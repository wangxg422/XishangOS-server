// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysloginlog"
)

// SysLoginLogUpdate is the builder for updating SysLoginLog entities.
type SysLoginLogUpdate struct {
	config
	hooks    []Hook
	mutation *SysLoginLogMutation
}

// Where appends a list predicates to the SysLoginLogUpdate builder.
func (sllu *SysLoginLogUpdate) Where(ps ...predicate.SysLoginLog) *SysLoginLogUpdate {
	sllu.mutation.Where(ps...)
	return sllu
}

// SetLoginName sets the "login_name" field.
func (sllu *SysLoginLogUpdate) SetLoginName(s string) *SysLoginLogUpdate {
	sllu.mutation.SetLoginName(s)
	return sllu
}

// SetNillableLoginName sets the "login_name" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableLoginName(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetLoginName(*s)
	}
	return sllu
}

// ClearLoginName clears the value of the "login_name" field.
func (sllu *SysLoginLogUpdate) ClearLoginName() *SysLoginLogUpdate {
	sllu.mutation.ClearLoginName()
	return sllu
}

// SetIPAddr sets the "ip_addr" field.
func (sllu *SysLoginLogUpdate) SetIPAddr(s string) *SysLoginLogUpdate {
	sllu.mutation.SetIPAddr(s)
	return sllu
}

// SetNillableIPAddr sets the "ip_addr" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableIPAddr(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetIPAddr(*s)
	}
	return sllu
}

// ClearIPAddr clears the value of the "ip_addr" field.
func (sllu *SysLoginLogUpdate) ClearIPAddr() *SysLoginLogUpdate {
	sllu.mutation.ClearIPAddr()
	return sllu
}

// SetLoginLocation sets the "login_location" field.
func (sllu *SysLoginLogUpdate) SetLoginLocation(s string) *SysLoginLogUpdate {
	sllu.mutation.SetLoginLocation(s)
	return sllu
}

// SetNillableLoginLocation sets the "login_location" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableLoginLocation(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetLoginLocation(*s)
	}
	return sllu
}

// ClearLoginLocation clears the value of the "login_location" field.
func (sllu *SysLoginLogUpdate) ClearLoginLocation() *SysLoginLogUpdate {
	sllu.mutation.ClearLoginLocation()
	return sllu
}

// SetBrowser sets the "browser" field.
func (sllu *SysLoginLogUpdate) SetBrowser(s string) *SysLoginLogUpdate {
	sllu.mutation.SetBrowser(s)
	return sllu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableBrowser(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetBrowser(*s)
	}
	return sllu
}

// ClearBrowser clears the value of the "browser" field.
func (sllu *SysLoginLogUpdate) ClearBrowser() *SysLoginLogUpdate {
	sllu.mutation.ClearBrowser()
	return sllu
}

// SetOs sets the "os" field.
func (sllu *SysLoginLogUpdate) SetOs(s string) *SysLoginLogUpdate {
	sllu.mutation.SetOs(s)
	return sllu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableOs(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetOs(*s)
	}
	return sllu
}

// ClearOs clears the value of the "os" field.
func (sllu *SysLoginLogUpdate) ClearOs() *SysLoginLogUpdate {
	sllu.mutation.ClearOs()
	return sllu
}

// SetMsg sets the "msg" field.
func (sllu *SysLoginLogUpdate) SetMsg(s string) *SysLoginLogUpdate {
	sllu.mutation.SetMsg(s)
	return sllu
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableMsg(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetMsg(*s)
	}
	return sllu
}

// ClearMsg clears the value of the "msg" field.
func (sllu *SysLoginLogUpdate) ClearMsg() *SysLoginLogUpdate {
	sllu.mutation.ClearMsg()
	return sllu
}

// SetLoginTime sets the "login_time" field.
func (sllu *SysLoginLogUpdate) SetLoginTime(t time.Time) *SysLoginLogUpdate {
	sllu.mutation.SetLoginTime(t)
	return sllu
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableLoginTime(t *time.Time) *SysLoginLogUpdate {
	if t != nil {
		sllu.SetLoginTime(*t)
	}
	return sllu
}

// ClearLoginTime clears the value of the "login_time" field.
func (sllu *SysLoginLogUpdate) ClearLoginTime() *SysLoginLogUpdate {
	sllu.mutation.ClearLoginTime()
	return sllu
}

// SetModule sets the "module" field.
func (sllu *SysLoginLogUpdate) SetModule(s string) *SysLoginLogUpdate {
	sllu.mutation.SetModule(s)
	return sllu
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (sllu *SysLoginLogUpdate) SetNillableModule(s *string) *SysLoginLogUpdate {
	if s != nil {
		sllu.SetModule(*s)
	}
	return sllu
}

// ClearModule clears the value of the "module" field.
func (sllu *SysLoginLogUpdate) ClearModule() *SysLoginLogUpdate {
	sllu.mutation.ClearModule()
	return sllu
}

// Mutation returns the SysLoginLogMutation object of the builder.
func (sllu *SysLoginLogUpdate) Mutation() *SysLoginLogMutation {
	return sllu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sllu *SysLoginLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sllu.sqlSave, sllu.mutation, sllu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sllu *SysLoginLogUpdate) SaveX(ctx context.Context) int {
	affected, err := sllu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sllu *SysLoginLogUpdate) Exec(ctx context.Context) error {
	_, err := sllu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sllu *SysLoginLogUpdate) ExecX(ctx context.Context) {
	if err := sllu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sllu *SysLoginLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysloginlog.Table, sysloginlog.Columns, sqlgraph.NewFieldSpec(sysloginlog.FieldID, field.TypeInt64))
	if ps := sllu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sllu.mutation.StatusCleared() {
		_spec.ClearField(sysloginlog.FieldStatus, field.TypeInt8)
	}
	if value, ok := sllu.mutation.LoginName(); ok {
		_spec.SetField(sysloginlog.FieldLoginName, field.TypeString, value)
	}
	if sllu.mutation.LoginNameCleared() {
		_spec.ClearField(sysloginlog.FieldLoginName, field.TypeString)
	}
	if value, ok := sllu.mutation.IPAddr(); ok {
		_spec.SetField(sysloginlog.FieldIPAddr, field.TypeString, value)
	}
	if sllu.mutation.IPAddrCleared() {
		_spec.ClearField(sysloginlog.FieldIPAddr, field.TypeString)
	}
	if value, ok := sllu.mutation.LoginLocation(); ok {
		_spec.SetField(sysloginlog.FieldLoginLocation, field.TypeString, value)
	}
	if sllu.mutation.LoginLocationCleared() {
		_spec.ClearField(sysloginlog.FieldLoginLocation, field.TypeString)
	}
	if value, ok := sllu.mutation.Browser(); ok {
		_spec.SetField(sysloginlog.FieldBrowser, field.TypeString, value)
	}
	if sllu.mutation.BrowserCleared() {
		_spec.ClearField(sysloginlog.FieldBrowser, field.TypeString)
	}
	if value, ok := sllu.mutation.Os(); ok {
		_spec.SetField(sysloginlog.FieldOs, field.TypeString, value)
	}
	if sllu.mutation.OsCleared() {
		_spec.ClearField(sysloginlog.FieldOs, field.TypeString)
	}
	if value, ok := sllu.mutation.Msg(); ok {
		_spec.SetField(sysloginlog.FieldMsg, field.TypeString, value)
	}
	if sllu.mutation.MsgCleared() {
		_spec.ClearField(sysloginlog.FieldMsg, field.TypeString)
	}
	if value, ok := sllu.mutation.LoginTime(); ok {
		_spec.SetField(sysloginlog.FieldLoginTime, field.TypeTime, value)
	}
	if sllu.mutation.LoginTimeCleared() {
		_spec.ClearField(sysloginlog.FieldLoginTime, field.TypeTime)
	}
	if value, ok := sllu.mutation.Module(); ok {
		_spec.SetField(sysloginlog.FieldModule, field.TypeString, value)
	}
	if sllu.mutation.ModuleCleared() {
		_spec.ClearField(sysloginlog.FieldModule, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sllu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysloginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sllu.mutation.done = true
	return n, nil
}

// SysLoginLogUpdateOne is the builder for updating a single SysLoginLog entity.
type SysLoginLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysLoginLogMutation
}

// SetLoginName sets the "login_name" field.
func (slluo *SysLoginLogUpdateOne) SetLoginName(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetLoginName(s)
	return slluo
}

// SetNillableLoginName sets the "login_name" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableLoginName(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetLoginName(*s)
	}
	return slluo
}

// ClearLoginName clears the value of the "login_name" field.
func (slluo *SysLoginLogUpdateOne) ClearLoginName() *SysLoginLogUpdateOne {
	slluo.mutation.ClearLoginName()
	return slluo
}

// SetIPAddr sets the "ip_addr" field.
func (slluo *SysLoginLogUpdateOne) SetIPAddr(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetIPAddr(s)
	return slluo
}

// SetNillableIPAddr sets the "ip_addr" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableIPAddr(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetIPAddr(*s)
	}
	return slluo
}

// ClearIPAddr clears the value of the "ip_addr" field.
func (slluo *SysLoginLogUpdateOne) ClearIPAddr() *SysLoginLogUpdateOne {
	slluo.mutation.ClearIPAddr()
	return slluo
}

// SetLoginLocation sets the "login_location" field.
func (slluo *SysLoginLogUpdateOne) SetLoginLocation(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetLoginLocation(s)
	return slluo
}

// SetNillableLoginLocation sets the "login_location" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableLoginLocation(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetLoginLocation(*s)
	}
	return slluo
}

// ClearLoginLocation clears the value of the "login_location" field.
func (slluo *SysLoginLogUpdateOne) ClearLoginLocation() *SysLoginLogUpdateOne {
	slluo.mutation.ClearLoginLocation()
	return slluo
}

// SetBrowser sets the "browser" field.
func (slluo *SysLoginLogUpdateOne) SetBrowser(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetBrowser(s)
	return slluo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableBrowser(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetBrowser(*s)
	}
	return slluo
}

// ClearBrowser clears the value of the "browser" field.
func (slluo *SysLoginLogUpdateOne) ClearBrowser() *SysLoginLogUpdateOne {
	slluo.mutation.ClearBrowser()
	return slluo
}

// SetOs sets the "os" field.
func (slluo *SysLoginLogUpdateOne) SetOs(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetOs(s)
	return slluo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableOs(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetOs(*s)
	}
	return slluo
}

// ClearOs clears the value of the "os" field.
func (slluo *SysLoginLogUpdateOne) ClearOs() *SysLoginLogUpdateOne {
	slluo.mutation.ClearOs()
	return slluo
}

// SetMsg sets the "msg" field.
func (slluo *SysLoginLogUpdateOne) SetMsg(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetMsg(s)
	return slluo
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableMsg(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetMsg(*s)
	}
	return slluo
}

// ClearMsg clears the value of the "msg" field.
func (slluo *SysLoginLogUpdateOne) ClearMsg() *SysLoginLogUpdateOne {
	slluo.mutation.ClearMsg()
	return slluo
}

// SetLoginTime sets the "login_time" field.
func (slluo *SysLoginLogUpdateOne) SetLoginTime(t time.Time) *SysLoginLogUpdateOne {
	slluo.mutation.SetLoginTime(t)
	return slluo
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableLoginTime(t *time.Time) *SysLoginLogUpdateOne {
	if t != nil {
		slluo.SetLoginTime(*t)
	}
	return slluo
}

// ClearLoginTime clears the value of the "login_time" field.
func (slluo *SysLoginLogUpdateOne) ClearLoginTime() *SysLoginLogUpdateOne {
	slluo.mutation.ClearLoginTime()
	return slluo
}

// SetModule sets the "module" field.
func (slluo *SysLoginLogUpdateOne) SetModule(s string) *SysLoginLogUpdateOne {
	slluo.mutation.SetModule(s)
	return slluo
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (slluo *SysLoginLogUpdateOne) SetNillableModule(s *string) *SysLoginLogUpdateOne {
	if s != nil {
		slluo.SetModule(*s)
	}
	return slluo
}

// ClearModule clears the value of the "module" field.
func (slluo *SysLoginLogUpdateOne) ClearModule() *SysLoginLogUpdateOne {
	slluo.mutation.ClearModule()
	return slluo
}

// Mutation returns the SysLoginLogMutation object of the builder.
func (slluo *SysLoginLogUpdateOne) Mutation() *SysLoginLogMutation {
	return slluo.mutation
}

// Where appends a list predicates to the SysLoginLogUpdate builder.
func (slluo *SysLoginLogUpdateOne) Where(ps ...predicate.SysLoginLog) *SysLoginLogUpdateOne {
	slluo.mutation.Where(ps...)
	return slluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (slluo *SysLoginLogUpdateOne) Select(field string, fields ...string) *SysLoginLogUpdateOne {
	slluo.fields = append([]string{field}, fields...)
	return slluo
}

// Save executes the query and returns the updated SysLoginLog entity.
func (slluo *SysLoginLogUpdateOne) Save(ctx context.Context) (*SysLoginLog, error) {
	return withHooks(ctx, slluo.sqlSave, slluo.mutation, slluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slluo *SysLoginLogUpdateOne) SaveX(ctx context.Context) *SysLoginLog {
	node, err := slluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (slluo *SysLoginLogUpdateOne) Exec(ctx context.Context) error {
	_, err := slluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slluo *SysLoginLogUpdateOne) ExecX(ctx context.Context) {
	if err := slluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (slluo *SysLoginLogUpdateOne) sqlSave(ctx context.Context) (_node *SysLoginLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysloginlog.Table, sysloginlog.Columns, sqlgraph.NewFieldSpec(sysloginlog.FieldID, field.TypeInt64))
	id, ok := slluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysLoginLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := slluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysloginlog.FieldID)
		for _, f := range fields {
			if !sysloginlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysloginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := slluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if slluo.mutation.StatusCleared() {
		_spec.ClearField(sysloginlog.FieldStatus, field.TypeInt8)
	}
	if value, ok := slluo.mutation.LoginName(); ok {
		_spec.SetField(sysloginlog.FieldLoginName, field.TypeString, value)
	}
	if slluo.mutation.LoginNameCleared() {
		_spec.ClearField(sysloginlog.FieldLoginName, field.TypeString)
	}
	if value, ok := slluo.mutation.IPAddr(); ok {
		_spec.SetField(sysloginlog.FieldIPAddr, field.TypeString, value)
	}
	if slluo.mutation.IPAddrCleared() {
		_spec.ClearField(sysloginlog.FieldIPAddr, field.TypeString)
	}
	if value, ok := slluo.mutation.LoginLocation(); ok {
		_spec.SetField(sysloginlog.FieldLoginLocation, field.TypeString, value)
	}
	if slluo.mutation.LoginLocationCleared() {
		_spec.ClearField(sysloginlog.FieldLoginLocation, field.TypeString)
	}
	if value, ok := slluo.mutation.Browser(); ok {
		_spec.SetField(sysloginlog.FieldBrowser, field.TypeString, value)
	}
	if slluo.mutation.BrowserCleared() {
		_spec.ClearField(sysloginlog.FieldBrowser, field.TypeString)
	}
	if value, ok := slluo.mutation.Os(); ok {
		_spec.SetField(sysloginlog.FieldOs, field.TypeString, value)
	}
	if slluo.mutation.OsCleared() {
		_spec.ClearField(sysloginlog.FieldOs, field.TypeString)
	}
	if value, ok := slluo.mutation.Msg(); ok {
		_spec.SetField(sysloginlog.FieldMsg, field.TypeString, value)
	}
	if slluo.mutation.MsgCleared() {
		_spec.ClearField(sysloginlog.FieldMsg, field.TypeString)
	}
	if value, ok := slluo.mutation.LoginTime(); ok {
		_spec.SetField(sysloginlog.FieldLoginTime, field.TypeTime, value)
	}
	if slluo.mutation.LoginTimeCleared() {
		_spec.ClearField(sysloginlog.FieldLoginTime, field.TypeTime)
	}
	if value, ok := slluo.mutation.Module(); ok {
		_spec.SetField(sysloginlog.FieldModule, field.TypeString, value)
	}
	if slluo.mutation.ModuleCleared() {
		_spec.ClearField(sysloginlog.FieldModule, field.TypeString)
	}
	_node = &SysLoginLog{config: slluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, slluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysloginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	slluo.mutation.done = true
	return _node, nil
}
