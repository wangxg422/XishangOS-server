// Code generated by ent, DO NOT EDIT.

package sysdicttype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDeleteAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDeleteBy, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldRemark, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldStatus, v))
}

// DelFlag applies equality check predicate on the "del_flag" field. It's identical to DelFlagEQ.
func DelFlag(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDelFlag, v))
}

// DictName applies equality check predicate on the "dict_name" field. It's identical to DictNameEQ.
func DictName(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDictName, v))
}

// DictType applies equality check predicate on the "dict_type" field. It's identical to DictTypeEQ.
func DictType(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDictType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldDeleteAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldCreatedBy))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldUpdatedBy))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v int64) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldDeleteBy))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldContainsFold(FieldRemark, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldStatus))
}

// DelFlagEQ applies the EQ predicate on the "del_flag" field.
func DelFlagEQ(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDelFlag, v))
}

// DelFlagNEQ applies the NEQ predicate on the "del_flag" field.
func DelFlagNEQ(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldDelFlag, v))
}

// DelFlagIn applies the In predicate on the "del_flag" field.
func DelFlagIn(vs ...int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldDelFlag, vs...))
}

// DelFlagNotIn applies the NotIn predicate on the "del_flag" field.
func DelFlagNotIn(vs ...int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldDelFlag, vs...))
}

// DelFlagGT applies the GT predicate on the "del_flag" field.
func DelFlagGT(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldDelFlag, v))
}

// DelFlagGTE applies the GTE predicate on the "del_flag" field.
func DelFlagGTE(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldDelFlag, v))
}

// DelFlagLT applies the LT predicate on the "del_flag" field.
func DelFlagLT(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldDelFlag, v))
}

// DelFlagLTE applies the LTE predicate on the "del_flag" field.
func DelFlagLTE(v int8) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldDelFlag, v))
}

// DelFlagIsNil applies the IsNil predicate on the "del_flag" field.
func DelFlagIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldDelFlag))
}

// DelFlagNotNil applies the NotNil predicate on the "del_flag" field.
func DelFlagNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldDelFlag))
}

// DictNameEQ applies the EQ predicate on the "dict_name" field.
func DictNameEQ(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDictName, v))
}

// DictNameNEQ applies the NEQ predicate on the "dict_name" field.
func DictNameNEQ(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldDictName, v))
}

// DictNameIn applies the In predicate on the "dict_name" field.
func DictNameIn(vs ...string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldDictName, vs...))
}

// DictNameNotIn applies the NotIn predicate on the "dict_name" field.
func DictNameNotIn(vs ...string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldDictName, vs...))
}

// DictNameGT applies the GT predicate on the "dict_name" field.
func DictNameGT(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldDictName, v))
}

// DictNameGTE applies the GTE predicate on the "dict_name" field.
func DictNameGTE(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldDictName, v))
}

// DictNameLT applies the LT predicate on the "dict_name" field.
func DictNameLT(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldDictName, v))
}

// DictNameLTE applies the LTE predicate on the "dict_name" field.
func DictNameLTE(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldDictName, v))
}

// DictNameContains applies the Contains predicate on the "dict_name" field.
func DictNameContains(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldContains(FieldDictName, v))
}

// DictNameHasPrefix applies the HasPrefix predicate on the "dict_name" field.
func DictNameHasPrefix(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldHasPrefix(FieldDictName, v))
}

// DictNameHasSuffix applies the HasSuffix predicate on the "dict_name" field.
func DictNameHasSuffix(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldHasSuffix(FieldDictName, v))
}

// DictNameIsNil applies the IsNil predicate on the "dict_name" field.
func DictNameIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldDictName))
}

// DictNameNotNil applies the NotNil predicate on the "dict_name" field.
func DictNameNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldDictName))
}

// DictNameEqualFold applies the EqualFold predicate on the "dict_name" field.
func DictNameEqualFold(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEqualFold(FieldDictName, v))
}

// DictNameContainsFold applies the ContainsFold predicate on the "dict_name" field.
func DictNameContainsFold(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldContainsFold(FieldDictName, v))
}

// DictTypeEQ applies the EQ predicate on the "dict_type" field.
func DictTypeEQ(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEQ(FieldDictType, v))
}

// DictTypeNEQ applies the NEQ predicate on the "dict_type" field.
func DictTypeNEQ(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNEQ(FieldDictType, v))
}

// DictTypeIn applies the In predicate on the "dict_type" field.
func DictTypeIn(vs ...string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIn(FieldDictType, vs...))
}

// DictTypeNotIn applies the NotIn predicate on the "dict_type" field.
func DictTypeNotIn(vs ...string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotIn(FieldDictType, vs...))
}

// DictTypeGT applies the GT predicate on the "dict_type" field.
func DictTypeGT(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGT(FieldDictType, v))
}

// DictTypeGTE applies the GTE predicate on the "dict_type" field.
func DictTypeGTE(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldGTE(FieldDictType, v))
}

// DictTypeLT applies the LT predicate on the "dict_type" field.
func DictTypeLT(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLT(FieldDictType, v))
}

// DictTypeLTE applies the LTE predicate on the "dict_type" field.
func DictTypeLTE(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldLTE(FieldDictType, v))
}

// DictTypeContains applies the Contains predicate on the "dict_type" field.
func DictTypeContains(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldContains(FieldDictType, v))
}

// DictTypeHasPrefix applies the HasPrefix predicate on the "dict_type" field.
func DictTypeHasPrefix(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldHasPrefix(FieldDictType, v))
}

// DictTypeHasSuffix applies the HasSuffix predicate on the "dict_type" field.
func DictTypeHasSuffix(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldHasSuffix(FieldDictType, v))
}

// DictTypeIsNil applies the IsNil predicate on the "dict_type" field.
func DictTypeIsNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldIsNull(FieldDictType))
}

// DictTypeNotNil applies the NotNil predicate on the "dict_type" field.
func DictTypeNotNil() predicate.SysDictType {
	return predicate.SysDictType(sql.FieldNotNull(FieldDictType))
}

// DictTypeEqualFold applies the EqualFold predicate on the "dict_type" field.
func DictTypeEqualFold(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldEqualFold(FieldDictType, v))
}

// DictTypeContainsFold applies the ContainsFold predicate on the "dict_type" field.
func DictTypeContainsFold(v string) predicate.SysDictType {
	return predicate.SysDictType(sql.FieldContainsFold(FieldDictType, v))
}

// HasSysDictDatas applies the HasEdge predicate on the "sysDictDatas" edge.
func HasSysDictDatas() predicate.SysDictType {
	return predicate.SysDictType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SysDictDatasTable, SysDictDatasColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSysDictDatasWith applies the HasEdge predicate on the "sysDictDatas" edge with a given conditions (other predicates).
func HasSysDictDatasWith(preds ...predicate.SysDictData) predicate.SysDictType {
	return predicate.SysDictType(func(s *sql.Selector) {
		step := newSysDictDatasStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysDictType) predicate.SysDictType {
	return predicate.SysDictType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysDictType) predicate.SysDictType {
	return predicate.SysDictType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysDictType) predicate.SysDictType {
	return predicate.SysDictType(sql.NotPredicates(p))
}
