// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdictdata"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdicttype"
)

// SysDictDataCreate is the builder for creating a SysDictData entity.
type SysDictDataCreate struct {
	config
	mutation *SysDictDataMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sddc *SysDictDataCreate) SetCreatedAt(t time.Time) *SysDictDataCreate {
	sddc.mutation.SetCreatedAt(t)
	return sddc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableCreatedAt(t *time.Time) *SysDictDataCreate {
	if t != nil {
		sddc.SetCreatedAt(*t)
	}
	return sddc
}

// SetUpdatedAt sets the "updated_at" field.
func (sddc *SysDictDataCreate) SetUpdatedAt(t time.Time) *SysDictDataCreate {
	sddc.mutation.SetUpdatedAt(t)
	return sddc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableUpdatedAt(t *time.Time) *SysDictDataCreate {
	if t != nil {
		sddc.SetUpdatedAt(*t)
	}
	return sddc
}

// SetDeleteAt sets the "delete_at" field.
func (sddc *SysDictDataCreate) SetDeleteAt(t time.Time) *SysDictDataCreate {
	sddc.mutation.SetDeleteAt(t)
	return sddc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableDeleteAt(t *time.Time) *SysDictDataCreate {
	if t != nil {
		sddc.SetDeleteAt(*t)
	}
	return sddc
}

// SetCreatedBy sets the "created_by" field.
func (sddc *SysDictDataCreate) SetCreatedBy(i int64) *SysDictDataCreate {
	sddc.mutation.SetCreatedBy(i)
	return sddc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableCreatedBy(i *int64) *SysDictDataCreate {
	if i != nil {
		sddc.SetCreatedBy(*i)
	}
	return sddc
}

// SetUpdatedBy sets the "updated_by" field.
func (sddc *SysDictDataCreate) SetUpdatedBy(i int64) *SysDictDataCreate {
	sddc.mutation.SetUpdatedBy(i)
	return sddc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableUpdatedBy(i *int64) *SysDictDataCreate {
	if i != nil {
		sddc.SetUpdatedBy(*i)
	}
	return sddc
}

// SetDeleteBy sets the "delete_by" field.
func (sddc *SysDictDataCreate) SetDeleteBy(i int64) *SysDictDataCreate {
	sddc.mutation.SetDeleteBy(i)
	return sddc
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableDeleteBy(i *int64) *SysDictDataCreate {
	if i != nil {
		sddc.SetDeleteBy(*i)
	}
	return sddc
}

// SetRemark sets the "remark" field.
func (sddc *SysDictDataCreate) SetRemark(s string) *SysDictDataCreate {
	sddc.mutation.SetRemark(s)
	return sddc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableRemark(s *string) *SysDictDataCreate {
	if s != nil {
		sddc.SetRemark(*s)
	}
	return sddc
}

// SetStatus sets the "status" field.
func (sddc *SysDictDataCreate) SetStatus(i int8) *SysDictDataCreate {
	sddc.mutation.SetStatus(i)
	return sddc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableStatus(i *int8) *SysDictDataCreate {
	if i != nil {
		sddc.SetStatus(*i)
	}
	return sddc
}

// SetSort sets the "sort" field.
func (sddc *SysDictDataCreate) SetSort(i int) *SysDictDataCreate {
	sddc.mutation.SetSort(i)
	return sddc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableSort(i *int) *SysDictDataCreate {
	if i != nil {
		sddc.SetSort(*i)
	}
	return sddc
}

// SetDelFlag sets the "del_flag" field.
func (sddc *SysDictDataCreate) SetDelFlag(i int8) *SysDictDataCreate {
	sddc.mutation.SetDelFlag(i)
	return sddc
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableDelFlag(i *int8) *SysDictDataCreate {
	if i != nil {
		sddc.SetDelFlag(*i)
	}
	return sddc
}

// SetDictLabel sets the "dict_label" field.
func (sddc *SysDictDataCreate) SetDictLabel(s string) *SysDictDataCreate {
	sddc.mutation.SetDictLabel(s)
	return sddc
}

// SetNillableDictLabel sets the "dict_label" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableDictLabel(s *string) *SysDictDataCreate {
	if s != nil {
		sddc.SetDictLabel(*s)
	}
	return sddc
}

// SetDictValue sets the "dict_value" field.
func (sddc *SysDictDataCreate) SetDictValue(s string) *SysDictDataCreate {
	sddc.mutation.SetDictValue(s)
	return sddc
}

// SetNillableDictValue sets the "dict_value" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableDictValue(s *string) *SysDictDataCreate {
	if s != nil {
		sddc.SetDictValue(*s)
	}
	return sddc
}

// SetDictTypeID sets the "dict_type_id" field.
func (sddc *SysDictDataCreate) SetDictTypeID(i int64) *SysDictDataCreate {
	sddc.mutation.SetDictTypeID(i)
	return sddc
}

// SetNillableDictTypeID sets the "dict_type_id" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableDictTypeID(i *int64) *SysDictDataCreate {
	if i != nil {
		sddc.SetDictTypeID(*i)
	}
	return sddc
}

// SetCSSClass sets the "css_class" field.
func (sddc *SysDictDataCreate) SetCSSClass(s string) *SysDictDataCreate {
	sddc.mutation.SetCSSClass(s)
	return sddc
}

// SetNillableCSSClass sets the "css_class" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableCSSClass(s *string) *SysDictDataCreate {
	if s != nil {
		sddc.SetCSSClass(*s)
	}
	return sddc
}

// SetListClass sets the "list_class" field.
func (sddc *SysDictDataCreate) SetListClass(s string) *SysDictDataCreate {
	sddc.mutation.SetListClass(s)
	return sddc
}

// SetNillableListClass sets the "list_class" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableListClass(s *string) *SysDictDataCreate {
	if s != nil {
		sddc.SetListClass(*s)
	}
	return sddc
}

// SetIsDefault sets the "is_default" field.
func (sddc *SysDictDataCreate) SetIsDefault(i int8) *SysDictDataCreate {
	sddc.mutation.SetIsDefault(i)
	return sddc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableIsDefault(i *int8) *SysDictDataCreate {
	if i != nil {
		sddc.SetIsDefault(*i)
	}
	return sddc
}

// SetID sets the "id" field.
func (sddc *SysDictDataCreate) SetID(i int64) *SysDictDataCreate {
	sddc.mutation.SetID(i)
	return sddc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableID(i *int64) *SysDictDataCreate {
	if i != nil {
		sddc.SetID(*i)
	}
	return sddc
}

// SetSysDictTypeID sets the "sysDictType" edge to the SysDictType entity by ID.
func (sddc *SysDictDataCreate) SetSysDictTypeID(id int64) *SysDictDataCreate {
	sddc.mutation.SetSysDictTypeID(id)
	return sddc
}

// SetNillableSysDictTypeID sets the "sysDictType" edge to the SysDictType entity by ID if the given value is not nil.
func (sddc *SysDictDataCreate) SetNillableSysDictTypeID(id *int64) *SysDictDataCreate {
	if id != nil {
		sddc = sddc.SetSysDictTypeID(*id)
	}
	return sddc
}

// SetSysDictType sets the "sysDictType" edge to the SysDictType entity.
func (sddc *SysDictDataCreate) SetSysDictType(s *SysDictType) *SysDictDataCreate {
	return sddc.SetSysDictTypeID(s.ID)
}

// Mutation returns the SysDictDataMutation object of the builder.
func (sddc *SysDictDataCreate) Mutation() *SysDictDataMutation {
	return sddc.mutation
}

// Save creates the SysDictData in the database.
func (sddc *SysDictDataCreate) Save(ctx context.Context) (*SysDictData, error) {
	if err := sddc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sddc.sqlSave, sddc.mutation, sddc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sddc *SysDictDataCreate) SaveX(ctx context.Context) *SysDictData {
	v, err := sddc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sddc *SysDictDataCreate) Exec(ctx context.Context) error {
	_, err := sddc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sddc *SysDictDataCreate) ExecX(ctx context.Context) {
	if err := sddc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sddc *SysDictDataCreate) defaults() error {
	if _, ok := sddc.mutation.CreatedAt(); !ok {
		if sysdictdata.DefaultCreatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdictdata.DefaultCreatedAt (forgotten import codegen/runtime?)")
		}
		v := sysdictdata.DefaultCreatedAt()
		sddc.mutation.SetCreatedAt(v)
	}
	if _, ok := sddc.mutation.UpdatedAt(); !ok {
		if sysdictdata.DefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdictdata.DefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysdictdata.DefaultUpdatedAt()
		sddc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sddc.mutation.Status(); !ok {
		v := sysdictdata.DefaultStatus
		sddc.mutation.SetStatus(v)
	}
	if _, ok := sddc.mutation.Sort(); !ok {
		v := sysdictdata.DefaultSort
		sddc.mutation.SetSort(v)
	}
	if _, ok := sddc.mutation.DelFlag(); !ok {
		v := sysdictdata.DefaultDelFlag
		sddc.mutation.SetDelFlag(v)
	}
	if _, ok := sddc.mutation.ID(); !ok {
		if sysdictdata.DefaultID == nil {
			return fmt.Errorf("codegen: uninitialized sysdictdata.DefaultID (forgotten import codegen/runtime?)")
		}
		v := sysdictdata.DefaultID()
		sddc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sddc *SysDictDataCreate) check() error {
	if _, ok := sddc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`codegen: missing required field "SysDictData.status"`)}
	}
	if _, ok := sddc.mutation.DelFlag(); !ok {
		return &ValidationError{Name: "del_flag", err: errors.New(`codegen: missing required field "SysDictData.del_flag"`)}
	}
	return nil
}

func (sddc *SysDictDataCreate) sqlSave(ctx context.Context) (*SysDictData, error) {
	if err := sddc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sddc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sddc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sddc.mutation.id = &_node.ID
	sddc.mutation.done = true
	return _node, nil
}

func (sddc *SysDictDataCreate) createSpec() (*SysDictData, *sqlgraph.CreateSpec) {
	var (
		_node = &SysDictData{config: sddc.config}
		_spec = sqlgraph.NewCreateSpec(sysdictdata.Table, sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64))
	)
	if id, ok := sddc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sddc.mutation.CreatedAt(); ok {
		_spec.SetField(sysdictdata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sddc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdictdata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sddc.mutation.DeleteAt(); ok {
		_spec.SetField(sysdictdata.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := sddc.mutation.CreatedBy(); ok {
		_spec.SetField(sysdictdata.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sddc.mutation.UpdatedBy(); ok {
		_spec.SetField(sysdictdata.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sddc.mutation.DeleteBy(); ok {
		_spec.SetField(sysdictdata.FieldDeleteBy, field.TypeInt64, value)
		_node.DeleteBy = value
	}
	if value, ok := sddc.mutation.Remark(); ok {
		_spec.SetField(sysdictdata.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := sddc.mutation.Status(); ok {
		_spec.SetField(sysdictdata.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := sddc.mutation.Sort(); ok {
		_spec.SetField(sysdictdata.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := sddc.mutation.DelFlag(); ok {
		_spec.SetField(sysdictdata.FieldDelFlag, field.TypeInt8, value)
		_node.DelFlag = value
	}
	if value, ok := sddc.mutation.DictLabel(); ok {
		_spec.SetField(sysdictdata.FieldDictLabel, field.TypeString, value)
		_node.DictLabel = value
	}
	if value, ok := sddc.mutation.DictValue(); ok {
		_spec.SetField(sysdictdata.FieldDictValue, field.TypeString, value)
		_node.DictValue = value
	}
	if value, ok := sddc.mutation.CSSClass(); ok {
		_spec.SetField(sysdictdata.FieldCSSClass, field.TypeString, value)
		_node.CSSClass = value
	}
	if value, ok := sddc.mutation.ListClass(); ok {
		_spec.SetField(sysdictdata.FieldListClass, field.TypeString, value)
		_node.ListClass = value
	}
	if value, ok := sddc.mutation.IsDefault(); ok {
		_spec.SetField(sysdictdata.FieldIsDefault, field.TypeInt8, value)
		_node.IsDefault = value
	}
	if nodes := sddc.mutation.SysDictTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdictdata.SysDictTypeTable,
			Columns: []string{sysdictdata.SysDictTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdicttype.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DictTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SysDictDataCreateBulk is the builder for creating many SysDictData entities in bulk.
type SysDictDataCreateBulk struct {
	config
	err      error
	builders []*SysDictDataCreate
}

// Save creates the SysDictData entities in the database.
func (sddcb *SysDictDataCreateBulk) Save(ctx context.Context) ([]*SysDictData, error) {
	if sddcb.err != nil {
		return nil, sddcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sddcb.builders))
	nodes := make([]*SysDictData, len(sddcb.builders))
	mutators := make([]Mutator, len(sddcb.builders))
	for i := range sddcb.builders {
		func(i int, root context.Context) {
			builder := sddcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysDictDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sddcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sddcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sddcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sddcb *SysDictDataCreateBulk) SaveX(ctx context.Context) []*SysDictData {
	v, err := sddcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sddcb *SysDictDataCreateBulk) Exec(ctx context.Context) error {
	_, err := sddcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sddcb *SysDictDataCreateBulk) ExecX(ctx context.Context) {
	if err := sddcb.Exec(ctx); err != nil {
		panic(err)
	}
}
