// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysrole"
)

// SysRoleCreate is the builder for creating a SysRole entity.
type SysRoleCreate struct {
	config
	mutation *SysRoleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (src *SysRoleCreate) SetCreatedAt(t time.Time) *SysRoleCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableCreatedAt(t *time.Time) *SysRoleCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *SysRoleCreate) SetUpdatedAt(t time.Time) *SysRoleCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableUpdatedAt(t *time.Time) *SysRoleCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetDeleteAt sets the "delete_at" field.
func (src *SysRoleCreate) SetDeleteAt(t time.Time) *SysRoleCreate {
	src.mutation.SetDeleteAt(t)
	return src
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableDeleteAt(t *time.Time) *SysRoleCreate {
	if t != nil {
		src.SetDeleteAt(*t)
	}
	return src
}

// SetStatus sets the "status" field.
func (src *SysRoleCreate) SetStatus(i int8) *SysRoleCreate {
	src.mutation.SetStatus(i)
	return src
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableStatus(i *int8) *SysRoleCreate {
	if i != nil {
		src.SetStatus(*i)
	}
	return src
}

// SetRemark sets the "remark" field.
func (src *SysRoleCreate) SetRemark(s string) *SysRoleCreate {
	src.mutation.SetRemark(s)
	return src
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableRemark(s *string) *SysRoleCreate {
	if s != nil {
		src.SetRemark(*s)
	}
	return src
}

// SetListOrder sets the "list_order" field.
func (src *SysRoleCreate) SetListOrder(i int64) *SysRoleCreate {
	src.mutation.SetListOrder(i)
	return src
}

// SetNillableListOrder sets the "list_order" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableListOrder(i *int64) *SysRoleCreate {
	if i != nil {
		src.SetListOrder(*i)
	}
	return src
}

// SetName sets the "name" field.
func (src *SysRoleCreate) SetName(s string) *SysRoleCreate {
	src.mutation.SetName(s)
	return src
}

// SetNillableName sets the "name" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableName(s *string) *SysRoleCreate {
	if s != nil {
		src.SetName(*s)
	}
	return src
}

// SetDataScope sets the "data_scope" field.
func (src *SysRoleCreate) SetDataScope(i int8) *SysRoleCreate {
	src.mutation.SetDataScope(i)
	return src
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableDataScope(i *int8) *SysRoleCreate {
	if i != nil {
		src.SetDataScope(*i)
	}
	return src
}

// SetID sets the "id" field.
func (src *SysRoleCreate) SetID(i int64) *SysRoleCreate {
	src.mutation.SetID(i)
	return src
}

// SetNillableID sets the "id" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableID(i *int64) *SysRoleCreate {
	if i != nil {
		src.SetID(*i)
	}
	return src
}

// Mutation returns the SysRoleMutation object of the builder.
func (src *SysRoleCreate) Mutation() *SysRoleMutation {
	return src.mutation
}

// Save creates the SysRole in the database.
func (src *SysRoleCreate) Save(ctx context.Context) (*SysRole, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SysRoleCreate) SaveX(ctx context.Context) *SysRole {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SysRoleCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SysRoleCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SysRoleCreate) defaults() {
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := sysrole.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := sysrole.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.DeleteAt(); !ok {
		v := sysrole.DefaultDeleteAt()
		src.mutation.SetDeleteAt(v)
	}
	if _, ok := src.mutation.Status(); !ok {
		v := sysrole.DefaultStatus
		src.mutation.SetStatus(v)
	}
	if _, ok := src.mutation.ID(); !ok {
		v := sysrole.DefaultID()
		src.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SysRoleCreate) check() error {
	return nil
}

func (src *SysRoleCreate) sqlSave(ctx context.Context) (*SysRole, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SysRoleCreate) createSpec() (*SysRole, *sqlgraph.CreateSpec) {
	var (
		_node = &SysRole{config: src.config}
		_spec = sqlgraph.NewCreateSpec(sysrole.Table, sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64))
	)
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(sysrole.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(sysrole.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := src.mutation.DeleteAt(); ok {
		_spec.SetField(sysrole.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(sysrole.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := src.mutation.Remark(); ok {
		_spec.SetField(sysrole.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := src.mutation.ListOrder(); ok {
		_spec.SetField(sysrole.FieldListOrder, field.TypeInt64, value)
		_node.ListOrder = value
	}
	if value, ok := src.mutation.Name(); ok {
		_spec.SetField(sysrole.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := src.mutation.DataScope(); ok {
		_spec.SetField(sysrole.FieldDataScope, field.TypeInt8, value)
		_node.DataScope = value
	}
	return _node, _spec
}

// SysRoleCreateBulk is the builder for creating many SysRole entities in bulk.
type SysRoleCreateBulk struct {
	config
	err      error
	builders []*SysRoleCreate
}

// Save creates the SysRole entities in the database.
func (srcb *SysRoleCreateBulk) Save(ctx context.Context) ([]*SysRole, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SysRole, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SysRoleCreateBulk) SaveX(ctx context.Context) []*SysRole {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SysRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SysRoleCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
