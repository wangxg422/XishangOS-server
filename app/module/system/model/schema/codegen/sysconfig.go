// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysconfig"
)

// 系统配置表
type SysConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,string"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"UpdateAt"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"deleteAt"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// DeleteBy holds the value of the "delete_by" field.
	DeleteBy int64 `json:"delete_by,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,string"`
	// DelFlag holds the value of the "del_flag" field.
	DelFlag int8 `json:"-"`
	// 配置名称
	ConfigName string `json:"configName"`
	// 配置项
	ConfigKey string `json:"configKey"`
	// 配置值
	ConfigValue string `json:"configValue"`
	// 系统内置配置(0是1否)
	ConfigType   int8 `json:"configType"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysconfig.FieldID, sysconfig.FieldCreatedBy, sysconfig.FieldUpdatedBy, sysconfig.FieldDeleteBy, sysconfig.FieldStatus, sysconfig.FieldDelFlag, sysconfig.FieldConfigType:
			values[i] = new(sql.NullInt64)
		case sysconfig.FieldRemark, sysconfig.FieldConfigName, sysconfig.FieldConfigKey, sysconfig.FieldConfigValue:
			values[i] = new(sql.NullString)
		case sysconfig.FieldCreatedAt, sysconfig.FieldUpdatedAt, sysconfig.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysConfig fields.
func (sc *SysConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int64(value.Int64)
		case sysconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case sysconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case sysconfig.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				sc.DeleteAt = value.Time
			}
		case sysconfig.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sc.CreatedBy = value.Int64
			}
		case sysconfig.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sc.UpdatedBy = value.Int64
			}
		case sysconfig.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				sc.DeleteBy = value.Int64
			}
		case sysconfig.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sc.Remark = value.String
			}
		case sysconfig.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sc.Status = int8(value.Int64)
			}
		case sysconfig.FieldDelFlag:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field del_flag", values[i])
			} else if value.Valid {
				sc.DelFlag = int8(value.Int64)
			}
		case sysconfig.FieldConfigName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_name", values[i])
			} else if value.Valid {
				sc.ConfigName = value.String
			}
		case sysconfig.FieldConfigKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_key", values[i])
			} else if value.Valid {
				sc.ConfigKey = value.String
			}
		case sysconfig.FieldConfigValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_value", values[i])
			} else if value.Valid {
				sc.ConfigValue = value.String
			}
		case sysconfig.FieldConfigType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field config_type", values[i])
			} else if value.Valid {
				sc.ConfigType = int8(value.Int64)
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysConfig.
// This includes values selected through modifiers, order, etc.
func (sc *SysConfig) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// Update returns a builder for updating this SysConfig.
// Note that you need to call SysConfig.Unwrap() before calling this method if this SysConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *SysConfig) Update() *SysConfigUpdateOne {
	return NewSysConfigClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the SysConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *SysConfig) Unwrap() *SysConfig {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("codegen: SysConfig is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *SysConfig) String() string {
	var builder strings.Builder
	builder.WriteString("SysConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(sc.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", sc.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", sc.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", sc.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(sc.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sc.Status))
	builder.WriteString(", ")
	builder.WriteString("del_flag=")
	builder.WriteString(fmt.Sprintf("%v", sc.DelFlag))
	builder.WriteString(", ")
	builder.WriteString("config_name=")
	builder.WriteString(sc.ConfigName)
	builder.WriteString(", ")
	builder.WriteString("config_key=")
	builder.WriteString(sc.ConfigKey)
	builder.WriteString(", ")
	builder.WriteString("config_value=")
	builder.WriteString(sc.ConfigValue)
	builder.WriteString(", ")
	builder.WriteString("config_type=")
	builder.WriteString(fmt.Sprintf("%v", sc.ConfigType))
	builder.WriteByte(')')
	return builder.String()
}

// SysConfigs is a parsable slice of SysConfig.
type SysConfigs []*SysConfig
