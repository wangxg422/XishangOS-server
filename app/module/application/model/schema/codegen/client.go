// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/appinstance"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/apppackage"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppInstance is the client for interacting with the AppInstance builders.
	AppInstance *AppInstanceClient
	// AppPackage is the client for interacting with the AppPackage builders.
	AppPackage *AppPackageClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppInstance = NewAppInstanceClient(c.config)
	c.AppPackage = NewAppPackageClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("codegen: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("codegen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		AppInstance: NewAppInstanceClient(cfg),
		AppPackage:  NewAppPackageClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		AppInstance: NewAppInstanceClient(cfg),
		AppPackage:  NewAppPackageClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppInstance.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppInstance.Use(hooks...)
	c.AppPackage.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.AppInstance.Intercept(interceptors...)
	c.AppPackage.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AppInstanceMutation:
		return c.AppInstance.mutate(ctx, m)
	case *AppPackageMutation:
		return c.AppPackage.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("codegen: unknown mutation type %T", m)
	}
}

// AppInstanceClient is a client for the AppInstance schema.
type AppInstanceClient struct {
	config
}

// NewAppInstanceClient returns a client for the AppInstance from the given config.
func NewAppInstanceClient(c config) *AppInstanceClient {
	return &AppInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appinstance.Hooks(f(g(h())))`.
func (c *AppInstanceClient) Use(hooks ...Hook) {
	c.hooks.AppInstance = append(c.hooks.AppInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `appinstance.Intercept(f(g(h())))`.
func (c *AppInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppInstance = append(c.inters.AppInstance, interceptors...)
}

// Create returns a builder for creating a AppInstance entity.
func (c *AppInstanceClient) Create() *AppInstanceCreate {
	mutation := newAppInstanceMutation(c.config, OpCreate)
	return &AppInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppInstance entities.
func (c *AppInstanceClient) CreateBulk(builders ...*AppInstanceCreate) *AppInstanceCreateBulk {
	return &AppInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppInstanceClient) MapCreateBulk(slice any, setFunc func(*AppInstanceCreate, int)) *AppInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppInstanceCreateBulk{err: fmt.Errorf("calling to AppInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppInstance.
func (c *AppInstanceClient) Update() *AppInstanceUpdate {
	mutation := newAppInstanceMutation(c.config, OpUpdate)
	return &AppInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppInstanceClient) UpdateOne(ai *AppInstance) *AppInstanceUpdateOne {
	mutation := newAppInstanceMutation(c.config, OpUpdateOne, withAppInstance(ai))
	return &AppInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppInstanceClient) UpdateOneID(id int64) *AppInstanceUpdateOne {
	mutation := newAppInstanceMutation(c.config, OpUpdateOne, withAppInstanceID(id))
	return &AppInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppInstance.
func (c *AppInstanceClient) Delete() *AppInstanceDelete {
	mutation := newAppInstanceMutation(c.config, OpDelete)
	return &AppInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppInstanceClient) DeleteOne(ai *AppInstance) *AppInstanceDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppInstanceClient) DeleteOneID(id int64) *AppInstanceDeleteOne {
	builder := c.Delete().Where(appinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppInstanceDeleteOne{builder}
}

// Query returns a query builder for AppInstance.
func (c *AppInstanceClient) Query() *AppInstanceQuery {
	return &AppInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a AppInstance entity by its id.
func (c *AppInstanceClient) Get(ctx context.Context, id int64) (*AppInstance, error) {
	return c.Query().Where(appinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppInstanceClient) GetX(ctx context.Context, id int64) *AppInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstallFrom queries the installFrom edge of a AppInstance.
func (c *AppInstanceClient) QueryInstallFrom(ai *AppInstance) *AppPackageQuery {
	query := (&AppPackageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appinstance.Table, appinstance.FieldID, id),
			sqlgraph.To(apppackage.Table, apppackage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appinstance.InstallFromTable, appinstance.InstallFromColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppInstanceClient) Hooks() []Hook {
	return c.hooks.AppInstance
}

// Interceptors returns the client interceptors.
func (c *AppInstanceClient) Interceptors() []Interceptor {
	return c.inters.AppInstance
}

func (c *AppInstanceClient) mutate(ctx context.Context, m *AppInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("codegen: unknown AppInstance mutation op: %q", m.Op())
	}
}

// AppPackageClient is a client for the AppPackage schema.
type AppPackageClient struct {
	config
}

// NewAppPackageClient returns a client for the AppPackage from the given config.
func NewAppPackageClient(c config) *AppPackageClient {
	return &AppPackageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apppackage.Hooks(f(g(h())))`.
func (c *AppPackageClient) Use(hooks ...Hook) {
	c.hooks.AppPackage = append(c.hooks.AppPackage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apppackage.Intercept(f(g(h())))`.
func (c *AppPackageClient) Intercept(interceptors ...Interceptor) {
	c.inters.AppPackage = append(c.inters.AppPackage, interceptors...)
}

// Create returns a builder for creating a AppPackage entity.
func (c *AppPackageClient) Create() *AppPackageCreate {
	mutation := newAppPackageMutation(c.config, OpCreate)
	return &AppPackageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppPackage entities.
func (c *AppPackageClient) CreateBulk(builders ...*AppPackageCreate) *AppPackageCreateBulk {
	return &AppPackageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AppPackageClient) MapCreateBulk(slice any, setFunc func(*AppPackageCreate, int)) *AppPackageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AppPackageCreateBulk{err: fmt.Errorf("calling to AppPackageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AppPackageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AppPackageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppPackage.
func (c *AppPackageClient) Update() *AppPackageUpdate {
	mutation := newAppPackageMutation(c.config, OpUpdate)
	return &AppPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppPackageClient) UpdateOne(ap *AppPackage) *AppPackageUpdateOne {
	mutation := newAppPackageMutation(c.config, OpUpdateOne, withAppPackage(ap))
	return &AppPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppPackageClient) UpdateOneID(id int64) *AppPackageUpdateOne {
	mutation := newAppPackageMutation(c.config, OpUpdateOne, withAppPackageID(id))
	return &AppPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppPackage.
func (c *AppPackageClient) Delete() *AppPackageDelete {
	mutation := newAppPackageMutation(c.config, OpDelete)
	return &AppPackageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AppPackageClient) DeleteOne(ap *AppPackage) *AppPackageDeleteOne {
	return c.DeleteOneID(ap.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AppPackageClient) DeleteOneID(id int64) *AppPackageDeleteOne {
	builder := c.Delete().Where(apppackage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppPackageDeleteOne{builder}
}

// Query returns a query builder for AppPackage.
func (c *AppPackageClient) Query() *AppPackageQuery {
	return &AppPackageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAppPackage},
		inters: c.Interceptors(),
	}
}

// Get returns a AppPackage entity by its id.
func (c *AppPackageClient) Get(ctx context.Context, id int64) (*AppPackage, error) {
	return c.Query().Where(apppackage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppPackageClient) GetX(ctx context.Context, id int64) *AppPackage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppInstance queries the app_instance edge of a AppPackage.
func (c *AppPackageClient) QueryAppInstance(ap *AppPackage) *AppInstanceQuery {
	query := (&AppInstanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ap.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apppackage.Table, apppackage.FieldID, id),
			sqlgraph.To(appinstance.Table, appinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, apppackage.AppInstanceTable, apppackage.AppInstanceColumn),
		)
		fromV = sqlgraph.Neighbors(ap.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppPackageClient) Hooks() []Hook {
	return c.hooks.AppPackage
}

// Interceptors returns the client interceptors.
func (c *AppPackageClient) Interceptors() []Interceptor {
	return c.inters.AppPackage
}

func (c *AppPackageClient) mutate(ctx context.Context, m *AppPackageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AppPackageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AppPackageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AppPackageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AppPackageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("codegen: unknown AppPackage mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AppInstance, AppPackage []ent.Hook
	}
	inters struct {
		AppInstance, AppPackage []ent.Interceptor
	}
)
