// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
)

// SysUserUpdate is the builder for updating SysUser entities.
type SysUserUpdate struct {
	config
	hooks    []Hook
	mutation *SysUserMutation
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suu *SysUserUpdate) Where(ps ...predicate.SysUser) *SysUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetUpdatedAt sets the "updated_at" field.
func (suu *SysUserUpdate) SetUpdatedAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetUpdatedAt(t)
	return suu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suu *SysUserUpdate) ClearUpdatedAt() *SysUserUpdate {
	suu.mutation.ClearUpdatedAt()
	return suu
}

// SetDeleteAt sets the "delete_at" field.
func (suu *SysUserUpdate) SetDeleteAt(t time.Time) *SysUserUpdate {
	suu.mutation.SetDeleteAt(t)
	return suu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (suu *SysUserUpdate) ClearDeleteAt() *SysUserUpdate {
	suu.mutation.ClearDeleteAt()
	return suu
}

// SetRemark sets the "remark" field.
func (suu *SysUserUpdate) SetRemark(s string) *SysUserUpdate {
	suu.mutation.SetRemark(s)
	return suu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableRemark(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetRemark(*s)
	}
	return suu
}

// ClearRemark clears the value of the "remark" field.
func (suu *SysUserUpdate) ClearRemark() *SysUserUpdate {
	suu.mutation.ClearRemark()
	return suu
}

// SetUserName sets the "user_name" field.
func (suu *SysUserUpdate) SetUserName(s string) *SysUserUpdate {
	suu.mutation.SetUserName(s)
	return suu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUserName(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUserName(*s)
	}
	return suu
}

// SetUserNickname sets the "user_nickname" field.
func (suu *SysUserUpdate) SetUserNickname(s string) *SysUserUpdate {
	suu.mutation.SetUserNickname(s)
	return suu
}

// SetNillableUserNickname sets the "user_nickname" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUserNickname(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUserNickname(*s)
	}
	return suu
}

// ClearUserNickname clears the value of the "user_nickname" field.
func (suu *SysUserUpdate) ClearUserNickname() *SysUserUpdate {
	suu.mutation.ClearUserNickname()
	return suu
}

// SetMobile sets the "mobile" field.
func (suu *SysUserUpdate) SetMobile(s string) *SysUserUpdate {
	suu.mutation.SetMobile(s)
	return suu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableMobile(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetMobile(*s)
	}
	return suu
}

// ClearMobile clears the value of the "mobile" field.
func (suu *SysUserUpdate) ClearMobile() *SysUserUpdate {
	suu.mutation.ClearMobile()
	return suu
}

// SetBirthday sets the "birthday" field.
func (suu *SysUserUpdate) SetBirthday(s string) *SysUserUpdate {
	suu.mutation.SetBirthday(s)
	return suu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableBirthday(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetBirthday(*s)
	}
	return suu
}

// ClearBirthday clears the value of the "birthday" field.
func (suu *SysUserUpdate) ClearBirthday() *SysUserUpdate {
	suu.mutation.ClearBirthday()
	return suu
}

// SetUserPassword sets the "user_password" field.
func (suu *SysUserUpdate) SetUserPassword(s string) *SysUserUpdate {
	suu.mutation.SetUserPassword(s)
	return suu
}

// SetNillableUserPassword sets the "user_password" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUserPassword(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUserPassword(*s)
	}
	return suu
}

// ClearUserPassword clears the value of the "user_password" field.
func (suu *SysUserUpdate) ClearUserPassword() *SysUserUpdate {
	suu.mutation.ClearUserPassword()
	return suu
}

// SetUserSalt sets the "user_salt" field.
func (suu *SysUserUpdate) SetUserSalt(s string) *SysUserUpdate {
	suu.mutation.SetUserSalt(s)
	return suu
}

// SetNillableUserSalt sets the "user_salt" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUserSalt(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUserSalt(*s)
	}
	return suu
}

// ClearUserSalt clears the value of the "user_salt" field.
func (suu *SysUserUpdate) ClearUserSalt() *SysUserUpdate {
	suu.mutation.ClearUserSalt()
	return suu
}

// SetUserEmail sets the "user_email" field.
func (suu *SysUserUpdate) SetUserEmail(s string) *SysUserUpdate {
	suu.mutation.SetUserEmail(s)
	return suu
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUserEmail(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetUserEmail(*s)
	}
	return suu
}

// ClearUserEmail clears the value of the "user_email" field.
func (suu *SysUserUpdate) ClearUserEmail() *SysUserUpdate {
	suu.mutation.ClearUserEmail()
	return suu
}

// SetSex sets the "sex" field.
func (suu *SysUserUpdate) SetSex(i int8) *SysUserUpdate {
	suu.mutation.ResetSex()
	suu.mutation.SetSex(i)
	return suu
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableSex(i *int8) *SysUserUpdate {
	if i != nil {
		suu.SetSex(*i)
	}
	return suu
}

// AddSex adds i to the "sex" field.
func (suu *SysUserUpdate) AddSex(i int8) *SysUserUpdate {
	suu.mutation.AddSex(i)
	return suu
}

// ClearSex clears the value of the "sex" field.
func (suu *SysUserUpdate) ClearSex() *SysUserUpdate {
	suu.mutation.ClearSex()
	return suu
}

// SetAvatar sets the "avatar" field.
func (suu *SysUserUpdate) SetAvatar(s string) *SysUserUpdate {
	suu.mutation.SetAvatar(s)
	return suu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableAvatar(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetAvatar(*s)
	}
	return suu
}

// ClearAvatar clears the value of the "avatar" field.
func (suu *SysUserUpdate) ClearAvatar() *SysUserUpdate {
	suu.mutation.ClearAvatar()
	return suu
}

// SetIsAdmin sets the "is_admin" field.
func (suu *SysUserUpdate) SetIsAdmin(i int8) *SysUserUpdate {
	suu.mutation.ResetIsAdmin()
	suu.mutation.SetIsAdmin(i)
	return suu
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableIsAdmin(i *int8) *SysUserUpdate {
	if i != nil {
		suu.SetIsAdmin(*i)
	}
	return suu
}

// AddIsAdmin adds i to the "is_admin" field.
func (suu *SysUserUpdate) AddIsAdmin(i int8) *SysUserUpdate {
	suu.mutation.AddIsAdmin(i)
	return suu
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (suu *SysUserUpdate) ClearIsAdmin() *SysUserUpdate {
	suu.mutation.ClearIsAdmin()
	return suu
}

// SetUserStatus sets the "user_status" field.
func (suu *SysUserUpdate) SetUserStatus(i int8) *SysUserUpdate {
	suu.mutation.ResetUserStatus()
	suu.mutation.SetUserStatus(i)
	return suu
}

// SetNillableUserStatus sets the "user_status" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableUserStatus(i *int8) *SysUserUpdate {
	if i != nil {
		suu.SetUserStatus(*i)
	}
	return suu
}

// AddUserStatus adds i to the "user_status" field.
func (suu *SysUserUpdate) AddUserStatus(i int8) *SysUserUpdate {
	suu.mutation.AddUserStatus(i)
	return suu
}

// ClearUserStatus clears the value of the "user_status" field.
func (suu *SysUserUpdate) ClearUserStatus() *SysUserUpdate {
	suu.mutation.ClearUserStatus()
	return suu
}

// SetDeptID sets the "dept_id" field.
func (suu *SysUserUpdate) SetDeptID(i int64) *SysUserUpdate {
	suu.mutation.ResetDeptID()
	suu.mutation.SetDeptID(i)
	return suu
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDeptID(i *int64) *SysUserUpdate {
	if i != nil {
		suu.SetDeptID(*i)
	}
	return suu
}

// AddDeptID adds i to the "dept_id" field.
func (suu *SysUserUpdate) AddDeptID(i int64) *SysUserUpdate {
	suu.mutation.AddDeptID(i)
	return suu
}

// ClearDeptID clears the value of the "dept_id" field.
func (suu *SysUserUpdate) ClearDeptID() *SysUserUpdate {
	suu.mutation.ClearDeptID()
	return suu
}

// SetAddress sets the "address" field.
func (suu *SysUserUpdate) SetAddress(s string) *SysUserUpdate {
	suu.mutation.SetAddress(s)
	return suu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableAddress(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetAddress(*s)
	}
	return suu
}

// ClearAddress clears the value of the "address" field.
func (suu *SysUserUpdate) ClearAddress() *SysUserUpdate {
	suu.mutation.ClearAddress()
	return suu
}

// SetDescribe sets the "describe" field.
func (suu *SysUserUpdate) SetDescribe(s string) *SysUserUpdate {
	suu.mutation.SetDescribe(s)
	return suu
}

// SetNillableDescribe sets the "describe" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableDescribe(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetDescribe(*s)
	}
	return suu
}

// ClearDescribe clears the value of the "describe" field.
func (suu *SysUserUpdate) ClearDescribe() *SysUserUpdate {
	suu.mutation.ClearDescribe()
	return suu
}

// SetLastLoginIP sets the "last_login_ip" field.
func (suu *SysUserUpdate) SetLastLoginIP(s string) *SysUserUpdate {
	suu.mutation.SetLastLoginIP(s)
	return suu
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableLastLoginIP(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetLastLoginIP(*s)
	}
	return suu
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (suu *SysUserUpdate) ClearLastLoginIP() *SysUserUpdate {
	suu.mutation.ClearLastLoginIP()
	return suu
}

// SetLastLoginTime sets the "last_login_time" field.
func (suu *SysUserUpdate) SetLastLoginTime(s string) *SysUserUpdate {
	suu.mutation.SetLastLoginTime(s)
	return suu
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (suu *SysUserUpdate) SetNillableLastLoginTime(s *string) *SysUserUpdate {
	if s != nil {
		suu.SetLastLoginTime(*s)
	}
	return suu
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (suu *SysUserUpdate) ClearLastLoginTime() *SysUserUpdate {
	suu.mutation.ClearLastLoginTime()
	return suu
}

// Mutation returns the SysUserMutation object of the builder.
func (suu *SysUserUpdate) Mutation() *SysUserMutation {
	return suu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SysUserUpdate) Save(ctx context.Context) (int, error) {
	suu.defaults()
	return withHooks(ctx, suu.sqlSave, suu.mutation, suu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SysUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SysUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SysUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suu *SysUserUpdate) defaults() {
	if _, ok := suu.mutation.UpdatedAt(); !ok && !suu.mutation.UpdatedAtCleared() {
		v := sysuser.UpdateDefaultUpdatedAt()
		suu.mutation.SetUpdatedAt(v)
	}
	if _, ok := suu.mutation.DeleteAt(); !ok && !suu.mutation.DeleteAtCleared() {
		v := sysuser.UpdateDefaultDeleteAt()
		suu.mutation.SetDeleteAt(v)
	}
}

func (suu *SysUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysuser.Table, sysuser.Columns, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64))
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suu.mutation.CreatedAtCleared() {
		_spec.ClearField(sysuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if suu.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysuser.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := suu.mutation.DeleteAt(); ok {
		_spec.SetField(sysuser.FieldDeleteAt, field.TypeTime, value)
	}
	if suu.mutation.DeleteAtCleared() {
		_spec.ClearField(sysuser.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := suu.mutation.Remark(); ok {
		_spec.SetField(sysuser.FieldRemark, field.TypeString, value)
	}
	if suu.mutation.RemarkCleared() {
		_spec.ClearField(sysuser.FieldRemark, field.TypeString)
	}
	if value, ok := suu.mutation.UserName(); ok {
		_spec.SetField(sysuser.FieldUserName, field.TypeString, value)
	}
	if value, ok := suu.mutation.UserNickname(); ok {
		_spec.SetField(sysuser.FieldUserNickname, field.TypeString, value)
	}
	if suu.mutation.UserNicknameCleared() {
		_spec.ClearField(sysuser.FieldUserNickname, field.TypeString)
	}
	if value, ok := suu.mutation.Mobile(); ok {
		_spec.SetField(sysuser.FieldMobile, field.TypeString, value)
	}
	if suu.mutation.MobileCleared() {
		_spec.ClearField(sysuser.FieldMobile, field.TypeString)
	}
	if value, ok := suu.mutation.Birthday(); ok {
		_spec.SetField(sysuser.FieldBirthday, field.TypeString, value)
	}
	if suu.mutation.BirthdayCleared() {
		_spec.ClearField(sysuser.FieldBirthday, field.TypeString)
	}
	if value, ok := suu.mutation.UserPassword(); ok {
		_spec.SetField(sysuser.FieldUserPassword, field.TypeString, value)
	}
	if suu.mutation.UserPasswordCleared() {
		_spec.ClearField(sysuser.FieldUserPassword, field.TypeString)
	}
	if value, ok := suu.mutation.UserSalt(); ok {
		_spec.SetField(sysuser.FieldUserSalt, field.TypeString, value)
	}
	if suu.mutation.UserSaltCleared() {
		_spec.ClearField(sysuser.FieldUserSalt, field.TypeString)
	}
	if value, ok := suu.mutation.UserEmail(); ok {
		_spec.SetField(sysuser.FieldUserEmail, field.TypeString, value)
	}
	if suu.mutation.UserEmailCleared() {
		_spec.ClearField(sysuser.FieldUserEmail, field.TypeString)
	}
	if value, ok := suu.mutation.Sex(); ok {
		_spec.SetField(sysuser.FieldSex, field.TypeInt8, value)
	}
	if value, ok := suu.mutation.AddedSex(); ok {
		_spec.AddField(sysuser.FieldSex, field.TypeInt8, value)
	}
	if suu.mutation.SexCleared() {
		_spec.ClearField(sysuser.FieldSex, field.TypeInt8)
	}
	if value, ok := suu.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
	}
	if suu.mutation.AvatarCleared() {
		_spec.ClearField(sysuser.FieldAvatar, field.TypeString)
	}
	if value, ok := suu.mutation.IsAdmin(); ok {
		_spec.SetField(sysuser.FieldIsAdmin, field.TypeInt8, value)
	}
	if value, ok := suu.mutation.AddedIsAdmin(); ok {
		_spec.AddField(sysuser.FieldIsAdmin, field.TypeInt8, value)
	}
	if suu.mutation.IsAdminCleared() {
		_spec.ClearField(sysuser.FieldIsAdmin, field.TypeInt8)
	}
	if value, ok := suu.mutation.UserStatus(); ok {
		_spec.SetField(sysuser.FieldUserStatus, field.TypeInt8, value)
	}
	if value, ok := suu.mutation.AddedUserStatus(); ok {
		_spec.AddField(sysuser.FieldUserStatus, field.TypeInt8, value)
	}
	if suu.mutation.UserStatusCleared() {
		_spec.ClearField(sysuser.FieldUserStatus, field.TypeInt8)
	}
	if value, ok := suu.mutation.DeptID(); ok {
		_spec.SetField(sysuser.FieldDeptID, field.TypeInt64, value)
	}
	if value, ok := suu.mutation.AddedDeptID(); ok {
		_spec.AddField(sysuser.FieldDeptID, field.TypeInt64, value)
	}
	if suu.mutation.DeptIDCleared() {
		_spec.ClearField(sysuser.FieldDeptID, field.TypeInt64)
	}
	if value, ok := suu.mutation.Address(); ok {
		_spec.SetField(sysuser.FieldAddress, field.TypeString, value)
	}
	if suu.mutation.AddressCleared() {
		_spec.ClearField(sysuser.FieldAddress, field.TypeString)
	}
	if value, ok := suu.mutation.Describe(); ok {
		_spec.SetField(sysuser.FieldDescribe, field.TypeString, value)
	}
	if suu.mutation.DescribeCleared() {
		_spec.ClearField(sysuser.FieldDescribe, field.TypeString)
	}
	if value, ok := suu.mutation.LastLoginIP(); ok {
		_spec.SetField(sysuser.FieldLastLoginIP, field.TypeString, value)
	}
	if suu.mutation.LastLoginIPCleared() {
		_spec.ClearField(sysuser.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := suu.mutation.LastLoginTime(); ok {
		_spec.SetField(sysuser.FieldLastLoginTime, field.TypeString, value)
	}
	if suu.mutation.LastLoginTimeCleared() {
		_spec.ClearField(sysuser.FieldLastLoginTime, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suu.mutation.done = true
	return n, nil
}

// SysUserUpdateOne is the builder for updating a single SysUser entity.
type SysUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysUserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suuo *SysUserUpdateOne) SetUpdatedAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetUpdatedAt(t)
	return suuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suuo *SysUserUpdateOne) ClearUpdatedAt() *SysUserUpdateOne {
	suuo.mutation.ClearUpdatedAt()
	return suuo
}

// SetDeleteAt sets the "delete_at" field.
func (suuo *SysUserUpdateOne) SetDeleteAt(t time.Time) *SysUserUpdateOne {
	suuo.mutation.SetDeleteAt(t)
	return suuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (suuo *SysUserUpdateOne) ClearDeleteAt() *SysUserUpdateOne {
	suuo.mutation.ClearDeleteAt()
	return suuo
}

// SetRemark sets the "remark" field.
func (suuo *SysUserUpdateOne) SetRemark(s string) *SysUserUpdateOne {
	suuo.mutation.SetRemark(s)
	return suuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableRemark(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetRemark(*s)
	}
	return suuo
}

// ClearRemark clears the value of the "remark" field.
func (suuo *SysUserUpdateOne) ClearRemark() *SysUserUpdateOne {
	suuo.mutation.ClearRemark()
	return suuo
}

// SetUserName sets the "user_name" field.
func (suuo *SysUserUpdateOne) SetUserName(s string) *SysUserUpdateOne {
	suuo.mutation.SetUserName(s)
	return suuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUserName(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUserName(*s)
	}
	return suuo
}

// SetUserNickname sets the "user_nickname" field.
func (suuo *SysUserUpdateOne) SetUserNickname(s string) *SysUserUpdateOne {
	suuo.mutation.SetUserNickname(s)
	return suuo
}

// SetNillableUserNickname sets the "user_nickname" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUserNickname(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUserNickname(*s)
	}
	return suuo
}

// ClearUserNickname clears the value of the "user_nickname" field.
func (suuo *SysUserUpdateOne) ClearUserNickname() *SysUserUpdateOne {
	suuo.mutation.ClearUserNickname()
	return suuo
}

// SetMobile sets the "mobile" field.
func (suuo *SysUserUpdateOne) SetMobile(s string) *SysUserUpdateOne {
	suuo.mutation.SetMobile(s)
	return suuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableMobile(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetMobile(*s)
	}
	return suuo
}

// ClearMobile clears the value of the "mobile" field.
func (suuo *SysUserUpdateOne) ClearMobile() *SysUserUpdateOne {
	suuo.mutation.ClearMobile()
	return suuo
}

// SetBirthday sets the "birthday" field.
func (suuo *SysUserUpdateOne) SetBirthday(s string) *SysUserUpdateOne {
	suuo.mutation.SetBirthday(s)
	return suuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableBirthday(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetBirthday(*s)
	}
	return suuo
}

// ClearBirthday clears the value of the "birthday" field.
func (suuo *SysUserUpdateOne) ClearBirthday() *SysUserUpdateOne {
	suuo.mutation.ClearBirthday()
	return suuo
}

// SetUserPassword sets the "user_password" field.
func (suuo *SysUserUpdateOne) SetUserPassword(s string) *SysUserUpdateOne {
	suuo.mutation.SetUserPassword(s)
	return suuo
}

// SetNillableUserPassword sets the "user_password" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUserPassword(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUserPassword(*s)
	}
	return suuo
}

// ClearUserPassword clears the value of the "user_password" field.
func (suuo *SysUserUpdateOne) ClearUserPassword() *SysUserUpdateOne {
	suuo.mutation.ClearUserPassword()
	return suuo
}

// SetUserSalt sets the "user_salt" field.
func (suuo *SysUserUpdateOne) SetUserSalt(s string) *SysUserUpdateOne {
	suuo.mutation.SetUserSalt(s)
	return suuo
}

// SetNillableUserSalt sets the "user_salt" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUserSalt(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUserSalt(*s)
	}
	return suuo
}

// ClearUserSalt clears the value of the "user_salt" field.
func (suuo *SysUserUpdateOne) ClearUserSalt() *SysUserUpdateOne {
	suuo.mutation.ClearUserSalt()
	return suuo
}

// SetUserEmail sets the "user_email" field.
func (suuo *SysUserUpdateOne) SetUserEmail(s string) *SysUserUpdateOne {
	suuo.mutation.SetUserEmail(s)
	return suuo
}

// SetNillableUserEmail sets the "user_email" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUserEmail(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetUserEmail(*s)
	}
	return suuo
}

// ClearUserEmail clears the value of the "user_email" field.
func (suuo *SysUserUpdateOne) ClearUserEmail() *SysUserUpdateOne {
	suuo.mutation.ClearUserEmail()
	return suuo
}

// SetSex sets the "sex" field.
func (suuo *SysUserUpdateOne) SetSex(i int8) *SysUserUpdateOne {
	suuo.mutation.ResetSex()
	suuo.mutation.SetSex(i)
	return suuo
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableSex(i *int8) *SysUserUpdateOne {
	if i != nil {
		suuo.SetSex(*i)
	}
	return suuo
}

// AddSex adds i to the "sex" field.
func (suuo *SysUserUpdateOne) AddSex(i int8) *SysUserUpdateOne {
	suuo.mutation.AddSex(i)
	return suuo
}

// ClearSex clears the value of the "sex" field.
func (suuo *SysUserUpdateOne) ClearSex() *SysUserUpdateOne {
	suuo.mutation.ClearSex()
	return suuo
}

// SetAvatar sets the "avatar" field.
func (suuo *SysUserUpdateOne) SetAvatar(s string) *SysUserUpdateOne {
	suuo.mutation.SetAvatar(s)
	return suuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableAvatar(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetAvatar(*s)
	}
	return suuo
}

// ClearAvatar clears the value of the "avatar" field.
func (suuo *SysUserUpdateOne) ClearAvatar() *SysUserUpdateOne {
	suuo.mutation.ClearAvatar()
	return suuo
}

// SetIsAdmin sets the "is_admin" field.
func (suuo *SysUserUpdateOne) SetIsAdmin(i int8) *SysUserUpdateOne {
	suuo.mutation.ResetIsAdmin()
	suuo.mutation.SetIsAdmin(i)
	return suuo
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableIsAdmin(i *int8) *SysUserUpdateOne {
	if i != nil {
		suuo.SetIsAdmin(*i)
	}
	return suuo
}

// AddIsAdmin adds i to the "is_admin" field.
func (suuo *SysUserUpdateOne) AddIsAdmin(i int8) *SysUserUpdateOne {
	suuo.mutation.AddIsAdmin(i)
	return suuo
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (suuo *SysUserUpdateOne) ClearIsAdmin() *SysUserUpdateOne {
	suuo.mutation.ClearIsAdmin()
	return suuo
}

// SetUserStatus sets the "user_status" field.
func (suuo *SysUserUpdateOne) SetUserStatus(i int8) *SysUserUpdateOne {
	suuo.mutation.ResetUserStatus()
	suuo.mutation.SetUserStatus(i)
	return suuo
}

// SetNillableUserStatus sets the "user_status" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableUserStatus(i *int8) *SysUserUpdateOne {
	if i != nil {
		suuo.SetUserStatus(*i)
	}
	return suuo
}

// AddUserStatus adds i to the "user_status" field.
func (suuo *SysUserUpdateOne) AddUserStatus(i int8) *SysUserUpdateOne {
	suuo.mutation.AddUserStatus(i)
	return suuo
}

// ClearUserStatus clears the value of the "user_status" field.
func (suuo *SysUserUpdateOne) ClearUserStatus() *SysUserUpdateOne {
	suuo.mutation.ClearUserStatus()
	return suuo
}

// SetDeptID sets the "dept_id" field.
func (suuo *SysUserUpdateOne) SetDeptID(i int64) *SysUserUpdateOne {
	suuo.mutation.ResetDeptID()
	suuo.mutation.SetDeptID(i)
	return suuo
}

// SetNillableDeptID sets the "dept_id" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDeptID(i *int64) *SysUserUpdateOne {
	if i != nil {
		suuo.SetDeptID(*i)
	}
	return suuo
}

// AddDeptID adds i to the "dept_id" field.
func (suuo *SysUserUpdateOne) AddDeptID(i int64) *SysUserUpdateOne {
	suuo.mutation.AddDeptID(i)
	return suuo
}

// ClearDeptID clears the value of the "dept_id" field.
func (suuo *SysUserUpdateOne) ClearDeptID() *SysUserUpdateOne {
	suuo.mutation.ClearDeptID()
	return suuo
}

// SetAddress sets the "address" field.
func (suuo *SysUserUpdateOne) SetAddress(s string) *SysUserUpdateOne {
	suuo.mutation.SetAddress(s)
	return suuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableAddress(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetAddress(*s)
	}
	return suuo
}

// ClearAddress clears the value of the "address" field.
func (suuo *SysUserUpdateOne) ClearAddress() *SysUserUpdateOne {
	suuo.mutation.ClearAddress()
	return suuo
}

// SetDescribe sets the "describe" field.
func (suuo *SysUserUpdateOne) SetDescribe(s string) *SysUserUpdateOne {
	suuo.mutation.SetDescribe(s)
	return suuo
}

// SetNillableDescribe sets the "describe" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableDescribe(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetDescribe(*s)
	}
	return suuo
}

// ClearDescribe clears the value of the "describe" field.
func (suuo *SysUserUpdateOne) ClearDescribe() *SysUserUpdateOne {
	suuo.mutation.ClearDescribe()
	return suuo
}

// SetLastLoginIP sets the "last_login_ip" field.
func (suuo *SysUserUpdateOne) SetLastLoginIP(s string) *SysUserUpdateOne {
	suuo.mutation.SetLastLoginIP(s)
	return suuo
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableLastLoginIP(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetLastLoginIP(*s)
	}
	return suuo
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (suuo *SysUserUpdateOne) ClearLastLoginIP() *SysUserUpdateOne {
	suuo.mutation.ClearLastLoginIP()
	return suuo
}

// SetLastLoginTime sets the "last_login_time" field.
func (suuo *SysUserUpdateOne) SetLastLoginTime(s string) *SysUserUpdateOne {
	suuo.mutation.SetLastLoginTime(s)
	return suuo
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (suuo *SysUserUpdateOne) SetNillableLastLoginTime(s *string) *SysUserUpdateOne {
	if s != nil {
		suuo.SetLastLoginTime(*s)
	}
	return suuo
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (suuo *SysUserUpdateOne) ClearLastLoginTime() *SysUserUpdateOne {
	suuo.mutation.ClearLastLoginTime()
	return suuo
}

// Mutation returns the SysUserMutation object of the builder.
func (suuo *SysUserUpdateOne) Mutation() *SysUserMutation {
	return suuo.mutation
}

// Where appends a list predicates to the SysUserUpdate builder.
func (suuo *SysUserUpdateOne) Where(ps ...predicate.SysUser) *SysUserUpdateOne {
	suuo.mutation.Where(ps...)
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SysUserUpdateOne) Select(field string, fields ...string) *SysUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SysUser entity.
func (suuo *SysUserUpdateOne) Save(ctx context.Context) (*SysUser, error) {
	suuo.defaults()
	return withHooks(ctx, suuo.sqlSave, suuo.mutation, suuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SysUserUpdateOne) SaveX(ctx context.Context) *SysUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SysUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SysUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suuo *SysUserUpdateOne) defaults() {
	if _, ok := suuo.mutation.UpdatedAt(); !ok && !suuo.mutation.UpdatedAtCleared() {
		v := sysuser.UpdateDefaultUpdatedAt()
		suuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := suuo.mutation.DeleteAt(); !ok && !suuo.mutation.DeleteAtCleared() {
		v := sysuser.UpdateDefaultDeleteAt()
		suuo.mutation.SetDeleteAt(v)
	}
}

func (suuo *SysUserUpdateOne) sqlSave(ctx context.Context) (_node *SysUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysuser.Table, sysuser.Columns, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64))
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuser.FieldID)
		for _, f := range fields {
			if !sysuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suuo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if suuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysuser.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := suuo.mutation.DeleteAt(); ok {
		_spec.SetField(sysuser.FieldDeleteAt, field.TypeTime, value)
	}
	if suuo.mutation.DeleteAtCleared() {
		_spec.ClearField(sysuser.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := suuo.mutation.Remark(); ok {
		_spec.SetField(sysuser.FieldRemark, field.TypeString, value)
	}
	if suuo.mutation.RemarkCleared() {
		_spec.ClearField(sysuser.FieldRemark, field.TypeString)
	}
	if value, ok := suuo.mutation.UserName(); ok {
		_spec.SetField(sysuser.FieldUserName, field.TypeString, value)
	}
	if value, ok := suuo.mutation.UserNickname(); ok {
		_spec.SetField(sysuser.FieldUserNickname, field.TypeString, value)
	}
	if suuo.mutation.UserNicknameCleared() {
		_spec.ClearField(sysuser.FieldUserNickname, field.TypeString)
	}
	if value, ok := suuo.mutation.Mobile(); ok {
		_spec.SetField(sysuser.FieldMobile, field.TypeString, value)
	}
	if suuo.mutation.MobileCleared() {
		_spec.ClearField(sysuser.FieldMobile, field.TypeString)
	}
	if value, ok := suuo.mutation.Birthday(); ok {
		_spec.SetField(sysuser.FieldBirthday, field.TypeString, value)
	}
	if suuo.mutation.BirthdayCleared() {
		_spec.ClearField(sysuser.FieldBirthday, field.TypeString)
	}
	if value, ok := suuo.mutation.UserPassword(); ok {
		_spec.SetField(sysuser.FieldUserPassword, field.TypeString, value)
	}
	if suuo.mutation.UserPasswordCleared() {
		_spec.ClearField(sysuser.FieldUserPassword, field.TypeString)
	}
	if value, ok := suuo.mutation.UserSalt(); ok {
		_spec.SetField(sysuser.FieldUserSalt, field.TypeString, value)
	}
	if suuo.mutation.UserSaltCleared() {
		_spec.ClearField(sysuser.FieldUserSalt, field.TypeString)
	}
	if value, ok := suuo.mutation.UserEmail(); ok {
		_spec.SetField(sysuser.FieldUserEmail, field.TypeString, value)
	}
	if suuo.mutation.UserEmailCleared() {
		_spec.ClearField(sysuser.FieldUserEmail, field.TypeString)
	}
	if value, ok := suuo.mutation.Sex(); ok {
		_spec.SetField(sysuser.FieldSex, field.TypeInt8, value)
	}
	if value, ok := suuo.mutation.AddedSex(); ok {
		_spec.AddField(sysuser.FieldSex, field.TypeInt8, value)
	}
	if suuo.mutation.SexCleared() {
		_spec.ClearField(sysuser.FieldSex, field.TypeInt8)
	}
	if value, ok := suuo.mutation.Avatar(); ok {
		_spec.SetField(sysuser.FieldAvatar, field.TypeString, value)
	}
	if suuo.mutation.AvatarCleared() {
		_spec.ClearField(sysuser.FieldAvatar, field.TypeString)
	}
	if value, ok := suuo.mutation.IsAdmin(); ok {
		_spec.SetField(sysuser.FieldIsAdmin, field.TypeInt8, value)
	}
	if value, ok := suuo.mutation.AddedIsAdmin(); ok {
		_spec.AddField(sysuser.FieldIsAdmin, field.TypeInt8, value)
	}
	if suuo.mutation.IsAdminCleared() {
		_spec.ClearField(sysuser.FieldIsAdmin, field.TypeInt8)
	}
	if value, ok := suuo.mutation.UserStatus(); ok {
		_spec.SetField(sysuser.FieldUserStatus, field.TypeInt8, value)
	}
	if value, ok := suuo.mutation.AddedUserStatus(); ok {
		_spec.AddField(sysuser.FieldUserStatus, field.TypeInt8, value)
	}
	if suuo.mutation.UserStatusCleared() {
		_spec.ClearField(sysuser.FieldUserStatus, field.TypeInt8)
	}
	if value, ok := suuo.mutation.DeptID(); ok {
		_spec.SetField(sysuser.FieldDeptID, field.TypeInt64, value)
	}
	if value, ok := suuo.mutation.AddedDeptID(); ok {
		_spec.AddField(sysuser.FieldDeptID, field.TypeInt64, value)
	}
	if suuo.mutation.DeptIDCleared() {
		_spec.ClearField(sysuser.FieldDeptID, field.TypeInt64)
	}
	if value, ok := suuo.mutation.Address(); ok {
		_spec.SetField(sysuser.FieldAddress, field.TypeString, value)
	}
	if suuo.mutation.AddressCleared() {
		_spec.ClearField(sysuser.FieldAddress, field.TypeString)
	}
	if value, ok := suuo.mutation.Describe(); ok {
		_spec.SetField(sysuser.FieldDescribe, field.TypeString, value)
	}
	if suuo.mutation.DescribeCleared() {
		_spec.ClearField(sysuser.FieldDescribe, field.TypeString)
	}
	if value, ok := suuo.mutation.LastLoginIP(); ok {
		_spec.SetField(sysuser.FieldLastLoginIP, field.TypeString, value)
	}
	if suuo.mutation.LastLoginIPCleared() {
		_spec.ClearField(sysuser.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := suuo.mutation.LastLoginTime(); ok {
		_spec.SetField(sysuser.FieldLastLoginTime, field.TypeString, value)
	}
	if suuo.mutation.LastLoginTimeCleared() {
		_spec.ClearField(sysuser.FieldLastLoginTime, field.TypeString)
	}
	_node = &SysUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suuo.mutation.done = true
	return _node, nil
}
