// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdept"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysmenu"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysrole"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
)

// SysRoleUpdate is the builder for updating SysRole entities.
type SysRoleUpdate struct {
	config
	hooks    []Hook
	mutation *SysRoleMutation
}

// Where appends a list predicates to the SysRoleUpdate builder.
func (sru *SysRoleUpdate) Where(ps ...predicate.SysRole) *SysRoleUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetCreatedAt sets the "created_at" field.
func (sru *SysRoleUpdate) SetCreatedAt(t time.Time) *SysRoleUpdate {
	sru.mutation.SetCreatedAt(t)
	return sru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableCreatedAt(t *time.Time) *SysRoleUpdate {
	if t != nil {
		sru.SetCreatedAt(*t)
	}
	return sru
}

// ClearCreatedAt clears the value of the "created_at" field.
func (sru *SysRoleUpdate) ClearCreatedAt() *SysRoleUpdate {
	sru.mutation.ClearCreatedAt()
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *SysRoleUpdate) SetUpdatedAt(t time.Time) *SysRoleUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sru *SysRoleUpdate) ClearUpdatedAt() *SysRoleUpdate {
	sru.mutation.ClearUpdatedAt()
	return sru
}

// SetDeleteAt sets the "delete_at" field.
func (sru *SysRoleUpdate) SetDeleteAt(t time.Time) *SysRoleUpdate {
	sru.mutation.SetDeleteAt(t)
	return sru
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableDeleteAt(t *time.Time) *SysRoleUpdate {
	if t != nil {
		sru.SetDeleteAt(*t)
	}
	return sru
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (sru *SysRoleUpdate) ClearDeleteAt() *SysRoleUpdate {
	sru.mutation.ClearDeleteAt()
	return sru
}

// SetCreatedBy sets the "created_by" field.
func (sru *SysRoleUpdate) SetCreatedBy(i int64) *SysRoleUpdate {
	sru.mutation.ResetCreatedBy()
	sru.mutation.SetCreatedBy(i)
	return sru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableCreatedBy(i *int64) *SysRoleUpdate {
	if i != nil {
		sru.SetCreatedBy(*i)
	}
	return sru
}

// AddCreatedBy adds i to the "created_by" field.
func (sru *SysRoleUpdate) AddCreatedBy(i int64) *SysRoleUpdate {
	sru.mutation.AddCreatedBy(i)
	return sru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sru *SysRoleUpdate) ClearCreatedBy() *SysRoleUpdate {
	sru.mutation.ClearCreatedBy()
	return sru
}

// SetUpdatedBy sets the "updated_by" field.
func (sru *SysRoleUpdate) SetUpdatedBy(i int64) *SysRoleUpdate {
	sru.mutation.ResetUpdatedBy()
	sru.mutation.SetUpdatedBy(i)
	return sru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableUpdatedBy(i *int64) *SysRoleUpdate {
	if i != nil {
		sru.SetUpdatedBy(*i)
	}
	return sru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (sru *SysRoleUpdate) AddUpdatedBy(i int64) *SysRoleUpdate {
	sru.mutation.AddUpdatedBy(i)
	return sru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sru *SysRoleUpdate) ClearUpdatedBy() *SysRoleUpdate {
	sru.mutation.ClearUpdatedBy()
	return sru
}

// SetDeleteBy sets the "delete_by" field.
func (sru *SysRoleUpdate) SetDeleteBy(i int64) *SysRoleUpdate {
	sru.mutation.ResetDeleteBy()
	sru.mutation.SetDeleteBy(i)
	return sru
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableDeleteBy(i *int64) *SysRoleUpdate {
	if i != nil {
		sru.SetDeleteBy(*i)
	}
	return sru
}

// AddDeleteBy adds i to the "delete_by" field.
func (sru *SysRoleUpdate) AddDeleteBy(i int64) *SysRoleUpdate {
	sru.mutation.AddDeleteBy(i)
	return sru
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (sru *SysRoleUpdate) ClearDeleteBy() *SysRoleUpdate {
	sru.mutation.ClearDeleteBy()
	return sru
}

// SetStatus sets the "status" field.
func (sru *SysRoleUpdate) SetStatus(i int8) *SysRoleUpdate {
	sru.mutation.ResetStatus()
	sru.mutation.SetStatus(i)
	return sru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableStatus(i *int8) *SysRoleUpdate {
	if i != nil {
		sru.SetStatus(*i)
	}
	return sru
}

// AddStatus adds i to the "status" field.
func (sru *SysRoleUpdate) AddStatus(i int8) *SysRoleUpdate {
	sru.mutation.AddStatus(i)
	return sru
}

// SetSort sets the "sort" field.
func (sru *SysRoleUpdate) SetSort(i int) *SysRoleUpdate {
	sru.mutation.ResetSort()
	sru.mutation.SetSort(i)
	return sru
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableSort(i *int) *SysRoleUpdate {
	if i != nil {
		sru.SetSort(*i)
	}
	return sru
}

// AddSort adds i to the "sort" field.
func (sru *SysRoleUpdate) AddSort(i int) *SysRoleUpdate {
	sru.mutation.AddSort(i)
	return sru
}

// ClearSort clears the value of the "sort" field.
func (sru *SysRoleUpdate) ClearSort() *SysRoleUpdate {
	sru.mutation.ClearSort()
	return sru
}

// SetRemark sets the "remark" field.
func (sru *SysRoleUpdate) SetRemark(s string) *SysRoleUpdate {
	sru.mutation.SetRemark(s)
	return sru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableRemark(s *string) *SysRoleUpdate {
	if s != nil {
		sru.SetRemark(*s)
	}
	return sru
}

// ClearRemark clears the value of the "remark" field.
func (sru *SysRoleUpdate) ClearRemark() *SysRoleUpdate {
	sru.mutation.ClearRemark()
	return sru
}

// SetDelFlag sets the "del_flag" field.
func (sru *SysRoleUpdate) SetDelFlag(i int8) *SysRoleUpdate {
	sru.mutation.ResetDelFlag()
	sru.mutation.SetDelFlag(i)
	return sru
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableDelFlag(i *int8) *SysRoleUpdate {
	if i != nil {
		sru.SetDelFlag(*i)
	}
	return sru
}

// AddDelFlag adds i to the "del_flag" field.
func (sru *SysRoleUpdate) AddDelFlag(i int8) *SysRoleUpdate {
	sru.mutation.AddDelFlag(i)
	return sru
}

// SetRoleName sets the "role_name" field.
func (sru *SysRoleUpdate) SetRoleName(s string) *SysRoleUpdate {
	sru.mutation.SetRoleName(s)
	return sru
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableRoleName(s *string) *SysRoleUpdate {
	if s != nil {
		sru.SetRoleName(*s)
	}
	return sru
}

// ClearRoleName clears the value of the "role_name" field.
func (sru *SysRoleUpdate) ClearRoleName() *SysRoleUpdate {
	sru.mutation.ClearRoleName()
	return sru
}

// SetDataScope sets the "data_scope" field.
func (sru *SysRoleUpdate) SetDataScope(i int8) *SysRoleUpdate {
	sru.mutation.ResetDataScope()
	sru.mutation.SetDataScope(i)
	return sru
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableDataScope(i *int8) *SysRoleUpdate {
	if i != nil {
		sru.SetDataScope(*i)
	}
	return sru
}

// AddDataScope adds i to the "data_scope" field.
func (sru *SysRoleUpdate) AddDataScope(i int8) *SysRoleUpdate {
	sru.mutation.AddDataScope(i)
	return sru
}

// ClearDataScope clears the value of the "data_scope" field.
func (sru *SysRoleUpdate) ClearDataScope() *SysRoleUpdate {
	sru.mutation.ClearDataScope()
	return sru
}

// AddSysDeptIDs adds the "sysDepts" edge to the SysDept entity by IDs.
func (sru *SysRoleUpdate) AddSysDeptIDs(ids ...int64) *SysRoleUpdate {
	sru.mutation.AddSysDeptIDs(ids...)
	return sru
}

// AddSysDepts adds the "sysDepts" edges to the SysDept entity.
func (sru *SysRoleUpdate) AddSysDepts(s ...*SysDept) *SysRoleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddSysDeptIDs(ids...)
}

// AddSysUserIDs adds the "sysUsers" edge to the SysUser entity by IDs.
func (sru *SysRoleUpdate) AddSysUserIDs(ids ...int64) *SysRoleUpdate {
	sru.mutation.AddSysUserIDs(ids...)
	return sru
}

// AddSysUsers adds the "sysUsers" edges to the SysUser entity.
func (sru *SysRoleUpdate) AddSysUsers(s ...*SysUser) *SysRoleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddSysUserIDs(ids...)
}

// AddSysMenuIDs adds the "sysMenus" edge to the SysMenu entity by IDs.
func (sru *SysRoleUpdate) AddSysMenuIDs(ids ...int64) *SysRoleUpdate {
	sru.mutation.AddSysMenuIDs(ids...)
	return sru
}

// AddSysMenus adds the "sysMenus" edges to the SysMenu entity.
func (sru *SysRoleUpdate) AddSysMenus(s ...*SysMenu) *SysRoleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.AddSysMenuIDs(ids...)
}

// Mutation returns the SysRoleMutation object of the builder.
func (sru *SysRoleUpdate) Mutation() *SysRoleMutation {
	return sru.mutation
}

// ClearSysDepts clears all "sysDepts" edges to the SysDept entity.
func (sru *SysRoleUpdate) ClearSysDepts() *SysRoleUpdate {
	sru.mutation.ClearSysDepts()
	return sru
}

// RemoveSysDeptIDs removes the "sysDepts" edge to SysDept entities by IDs.
func (sru *SysRoleUpdate) RemoveSysDeptIDs(ids ...int64) *SysRoleUpdate {
	sru.mutation.RemoveSysDeptIDs(ids...)
	return sru
}

// RemoveSysDepts removes "sysDepts" edges to SysDept entities.
func (sru *SysRoleUpdate) RemoveSysDepts(s ...*SysDept) *SysRoleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveSysDeptIDs(ids...)
}

// ClearSysUsers clears all "sysUsers" edges to the SysUser entity.
func (sru *SysRoleUpdate) ClearSysUsers() *SysRoleUpdate {
	sru.mutation.ClearSysUsers()
	return sru
}

// RemoveSysUserIDs removes the "sysUsers" edge to SysUser entities by IDs.
func (sru *SysRoleUpdate) RemoveSysUserIDs(ids ...int64) *SysRoleUpdate {
	sru.mutation.RemoveSysUserIDs(ids...)
	return sru
}

// RemoveSysUsers removes "sysUsers" edges to SysUser entities.
func (sru *SysRoleUpdate) RemoveSysUsers(s ...*SysUser) *SysRoleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveSysUserIDs(ids...)
}

// ClearSysMenus clears all "sysMenus" edges to the SysMenu entity.
func (sru *SysRoleUpdate) ClearSysMenus() *SysRoleUpdate {
	sru.mutation.ClearSysMenus()
	return sru
}

// RemoveSysMenuIDs removes the "sysMenus" edge to SysMenu entities by IDs.
func (sru *SysRoleUpdate) RemoveSysMenuIDs(ids ...int64) *SysRoleUpdate {
	sru.mutation.RemoveSysMenuIDs(ids...)
	return sru
}

// RemoveSysMenus removes "sysMenus" edges to SysMenu entities.
func (sru *SysRoleUpdate) RemoveSysMenus(s ...*SysMenu) *SysRoleUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sru.RemoveSysMenuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SysRoleUpdate) Save(ctx context.Context) (int, error) {
	if err := sru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SysRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SysRoleUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SysRoleUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *SysRoleUpdate) defaults() error {
	if _, ok := sru.mutation.UpdatedAt(); !ok && !sru.mutation.UpdatedAtCleared() {
		if sysrole.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysrole.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysrole.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (sru *SysRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysrole.Table, sysrole.Columns, sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.CreatedAt(); ok {
		_spec.SetField(sysrole.FieldCreatedAt, field.TypeTime, value)
	}
	if sru.mutation.CreatedAtCleared() {
		_spec.ClearField(sysrole.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(sysrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if sru.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sru.mutation.DeleteAt(); ok {
		_spec.SetField(sysrole.FieldDeleteAt, field.TypeTime, value)
	}
	if sru.mutation.DeleteAtCleared() {
		_spec.ClearField(sysrole.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := sru.mutation.CreatedBy(); ok {
		_spec.SetField(sysrole.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysrole.FieldCreatedBy, field.TypeInt64, value)
	}
	if sru.mutation.CreatedByCleared() {
		_spec.ClearField(sysrole.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := sru.mutation.UpdatedBy(); ok {
		_spec.SetField(sysrole.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysrole.FieldUpdatedBy, field.TypeInt64, value)
	}
	if sru.mutation.UpdatedByCleared() {
		_spec.ClearField(sysrole.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := sru.mutation.DeleteBy(); ok {
		_spec.SetField(sysrole.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := sru.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysrole.FieldDeleteBy, field.TypeInt64, value)
	}
	if sru.mutation.DeleteByCleared() {
		_spec.ClearField(sysrole.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := sru.mutation.Status(); ok {
		_spec.SetField(sysrole.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := sru.mutation.AddedStatus(); ok {
		_spec.AddField(sysrole.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := sru.mutation.Sort(); ok {
		_spec.SetField(sysrole.FieldSort, field.TypeInt, value)
	}
	if value, ok := sru.mutation.AddedSort(); ok {
		_spec.AddField(sysrole.FieldSort, field.TypeInt, value)
	}
	if sru.mutation.SortCleared() {
		_spec.ClearField(sysrole.FieldSort, field.TypeInt)
	}
	if value, ok := sru.mutation.Remark(); ok {
		_spec.SetField(sysrole.FieldRemark, field.TypeString, value)
	}
	if sru.mutation.RemarkCleared() {
		_spec.ClearField(sysrole.FieldRemark, field.TypeString)
	}
	if value, ok := sru.mutation.DelFlag(); ok {
		_spec.SetField(sysrole.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := sru.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysrole.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := sru.mutation.RoleName(); ok {
		_spec.SetField(sysrole.FieldRoleName, field.TypeString, value)
	}
	if sru.mutation.RoleNameCleared() {
		_spec.ClearField(sysrole.FieldRoleName, field.TypeString)
	}
	if value, ok := sru.mutation.DataScope(); ok {
		_spec.SetField(sysrole.FieldDataScope, field.TypeInt8, value)
	}
	if value, ok := sru.mutation.AddedDataScope(); ok {
		_spec.AddField(sysrole.FieldDataScope, field.TypeInt8, value)
	}
	if sru.mutation.DataScopeCleared() {
		_spec.ClearField(sysrole.FieldDataScope, field.TypeInt8)
	}
	if sru.mutation.SysDeptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysDeptsTable,
			Columns: sysrole.SysDeptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedSysDeptsIDs(); len(nodes) > 0 && !sru.mutation.SysDeptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysDeptsTable,
			Columns: sysrole.SysDeptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SysDeptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysDeptsTable,
			Columns: sysrole.SysDeptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysrole.SysUsersTable,
			Columns: sysrole.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedSysUsersIDs(); len(nodes) > 0 && !sru.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysrole.SysUsersTable,
			Columns: sysrole.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SysUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysrole.SysUsersTable,
			Columns: sysrole.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.SysMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysMenusTable,
			Columns: sysrole.SysMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RemovedSysMenusIDs(); len(nodes) > 0 && !sru.mutation.SysMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysMenusTable,
			Columns: sysrole.SysMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SysMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysMenusTable,
			Columns: sysrole.SysMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SysRoleUpdateOne is the builder for updating a single SysRole entity.
type SysRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysRoleMutation
}

// SetCreatedAt sets the "created_at" field.
func (sruo *SysRoleUpdateOne) SetCreatedAt(t time.Time) *SysRoleUpdateOne {
	sruo.mutation.SetCreatedAt(t)
	return sruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableCreatedAt(t *time.Time) *SysRoleUpdateOne {
	if t != nil {
		sruo.SetCreatedAt(*t)
	}
	return sruo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (sruo *SysRoleUpdateOne) ClearCreatedAt() *SysRoleUpdateOne {
	sruo.mutation.ClearCreatedAt()
	return sruo
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *SysRoleUpdateOne) SetUpdatedAt(t time.Time) *SysRoleUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sruo *SysRoleUpdateOne) ClearUpdatedAt() *SysRoleUpdateOne {
	sruo.mutation.ClearUpdatedAt()
	return sruo
}

// SetDeleteAt sets the "delete_at" field.
func (sruo *SysRoleUpdateOne) SetDeleteAt(t time.Time) *SysRoleUpdateOne {
	sruo.mutation.SetDeleteAt(t)
	return sruo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableDeleteAt(t *time.Time) *SysRoleUpdateOne {
	if t != nil {
		sruo.SetDeleteAt(*t)
	}
	return sruo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (sruo *SysRoleUpdateOne) ClearDeleteAt() *SysRoleUpdateOne {
	sruo.mutation.ClearDeleteAt()
	return sruo
}

// SetCreatedBy sets the "created_by" field.
func (sruo *SysRoleUpdateOne) SetCreatedBy(i int64) *SysRoleUpdateOne {
	sruo.mutation.ResetCreatedBy()
	sruo.mutation.SetCreatedBy(i)
	return sruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableCreatedBy(i *int64) *SysRoleUpdateOne {
	if i != nil {
		sruo.SetCreatedBy(*i)
	}
	return sruo
}

// AddCreatedBy adds i to the "created_by" field.
func (sruo *SysRoleUpdateOne) AddCreatedBy(i int64) *SysRoleUpdateOne {
	sruo.mutation.AddCreatedBy(i)
	return sruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sruo *SysRoleUpdateOne) ClearCreatedBy() *SysRoleUpdateOne {
	sruo.mutation.ClearCreatedBy()
	return sruo
}

// SetUpdatedBy sets the "updated_by" field.
func (sruo *SysRoleUpdateOne) SetUpdatedBy(i int64) *SysRoleUpdateOne {
	sruo.mutation.ResetUpdatedBy()
	sruo.mutation.SetUpdatedBy(i)
	return sruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableUpdatedBy(i *int64) *SysRoleUpdateOne {
	if i != nil {
		sruo.SetUpdatedBy(*i)
	}
	return sruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (sruo *SysRoleUpdateOne) AddUpdatedBy(i int64) *SysRoleUpdateOne {
	sruo.mutation.AddUpdatedBy(i)
	return sruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sruo *SysRoleUpdateOne) ClearUpdatedBy() *SysRoleUpdateOne {
	sruo.mutation.ClearUpdatedBy()
	return sruo
}

// SetDeleteBy sets the "delete_by" field.
func (sruo *SysRoleUpdateOne) SetDeleteBy(i int64) *SysRoleUpdateOne {
	sruo.mutation.ResetDeleteBy()
	sruo.mutation.SetDeleteBy(i)
	return sruo
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableDeleteBy(i *int64) *SysRoleUpdateOne {
	if i != nil {
		sruo.SetDeleteBy(*i)
	}
	return sruo
}

// AddDeleteBy adds i to the "delete_by" field.
func (sruo *SysRoleUpdateOne) AddDeleteBy(i int64) *SysRoleUpdateOne {
	sruo.mutation.AddDeleteBy(i)
	return sruo
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (sruo *SysRoleUpdateOne) ClearDeleteBy() *SysRoleUpdateOne {
	sruo.mutation.ClearDeleteBy()
	return sruo
}

// SetStatus sets the "status" field.
func (sruo *SysRoleUpdateOne) SetStatus(i int8) *SysRoleUpdateOne {
	sruo.mutation.ResetStatus()
	sruo.mutation.SetStatus(i)
	return sruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableStatus(i *int8) *SysRoleUpdateOne {
	if i != nil {
		sruo.SetStatus(*i)
	}
	return sruo
}

// AddStatus adds i to the "status" field.
func (sruo *SysRoleUpdateOne) AddStatus(i int8) *SysRoleUpdateOne {
	sruo.mutation.AddStatus(i)
	return sruo
}

// SetSort sets the "sort" field.
func (sruo *SysRoleUpdateOne) SetSort(i int) *SysRoleUpdateOne {
	sruo.mutation.ResetSort()
	sruo.mutation.SetSort(i)
	return sruo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableSort(i *int) *SysRoleUpdateOne {
	if i != nil {
		sruo.SetSort(*i)
	}
	return sruo
}

// AddSort adds i to the "sort" field.
func (sruo *SysRoleUpdateOne) AddSort(i int) *SysRoleUpdateOne {
	sruo.mutation.AddSort(i)
	return sruo
}

// ClearSort clears the value of the "sort" field.
func (sruo *SysRoleUpdateOne) ClearSort() *SysRoleUpdateOne {
	sruo.mutation.ClearSort()
	return sruo
}

// SetRemark sets the "remark" field.
func (sruo *SysRoleUpdateOne) SetRemark(s string) *SysRoleUpdateOne {
	sruo.mutation.SetRemark(s)
	return sruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableRemark(s *string) *SysRoleUpdateOne {
	if s != nil {
		sruo.SetRemark(*s)
	}
	return sruo
}

// ClearRemark clears the value of the "remark" field.
func (sruo *SysRoleUpdateOne) ClearRemark() *SysRoleUpdateOne {
	sruo.mutation.ClearRemark()
	return sruo
}

// SetDelFlag sets the "del_flag" field.
func (sruo *SysRoleUpdateOne) SetDelFlag(i int8) *SysRoleUpdateOne {
	sruo.mutation.ResetDelFlag()
	sruo.mutation.SetDelFlag(i)
	return sruo
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableDelFlag(i *int8) *SysRoleUpdateOne {
	if i != nil {
		sruo.SetDelFlag(*i)
	}
	return sruo
}

// AddDelFlag adds i to the "del_flag" field.
func (sruo *SysRoleUpdateOne) AddDelFlag(i int8) *SysRoleUpdateOne {
	sruo.mutation.AddDelFlag(i)
	return sruo
}

// SetRoleName sets the "role_name" field.
func (sruo *SysRoleUpdateOne) SetRoleName(s string) *SysRoleUpdateOne {
	sruo.mutation.SetRoleName(s)
	return sruo
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableRoleName(s *string) *SysRoleUpdateOne {
	if s != nil {
		sruo.SetRoleName(*s)
	}
	return sruo
}

// ClearRoleName clears the value of the "role_name" field.
func (sruo *SysRoleUpdateOne) ClearRoleName() *SysRoleUpdateOne {
	sruo.mutation.ClearRoleName()
	return sruo
}

// SetDataScope sets the "data_scope" field.
func (sruo *SysRoleUpdateOne) SetDataScope(i int8) *SysRoleUpdateOne {
	sruo.mutation.ResetDataScope()
	sruo.mutation.SetDataScope(i)
	return sruo
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableDataScope(i *int8) *SysRoleUpdateOne {
	if i != nil {
		sruo.SetDataScope(*i)
	}
	return sruo
}

// AddDataScope adds i to the "data_scope" field.
func (sruo *SysRoleUpdateOne) AddDataScope(i int8) *SysRoleUpdateOne {
	sruo.mutation.AddDataScope(i)
	return sruo
}

// ClearDataScope clears the value of the "data_scope" field.
func (sruo *SysRoleUpdateOne) ClearDataScope() *SysRoleUpdateOne {
	sruo.mutation.ClearDataScope()
	return sruo
}

// AddSysDeptIDs adds the "sysDepts" edge to the SysDept entity by IDs.
func (sruo *SysRoleUpdateOne) AddSysDeptIDs(ids ...int64) *SysRoleUpdateOne {
	sruo.mutation.AddSysDeptIDs(ids...)
	return sruo
}

// AddSysDepts adds the "sysDepts" edges to the SysDept entity.
func (sruo *SysRoleUpdateOne) AddSysDepts(s ...*SysDept) *SysRoleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddSysDeptIDs(ids...)
}

// AddSysUserIDs adds the "sysUsers" edge to the SysUser entity by IDs.
func (sruo *SysRoleUpdateOne) AddSysUserIDs(ids ...int64) *SysRoleUpdateOne {
	sruo.mutation.AddSysUserIDs(ids...)
	return sruo
}

// AddSysUsers adds the "sysUsers" edges to the SysUser entity.
func (sruo *SysRoleUpdateOne) AddSysUsers(s ...*SysUser) *SysRoleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddSysUserIDs(ids...)
}

// AddSysMenuIDs adds the "sysMenus" edge to the SysMenu entity by IDs.
func (sruo *SysRoleUpdateOne) AddSysMenuIDs(ids ...int64) *SysRoleUpdateOne {
	sruo.mutation.AddSysMenuIDs(ids...)
	return sruo
}

// AddSysMenus adds the "sysMenus" edges to the SysMenu entity.
func (sruo *SysRoleUpdateOne) AddSysMenus(s ...*SysMenu) *SysRoleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.AddSysMenuIDs(ids...)
}

// Mutation returns the SysRoleMutation object of the builder.
func (sruo *SysRoleUpdateOne) Mutation() *SysRoleMutation {
	return sruo.mutation
}

// ClearSysDepts clears all "sysDepts" edges to the SysDept entity.
func (sruo *SysRoleUpdateOne) ClearSysDepts() *SysRoleUpdateOne {
	sruo.mutation.ClearSysDepts()
	return sruo
}

// RemoveSysDeptIDs removes the "sysDepts" edge to SysDept entities by IDs.
func (sruo *SysRoleUpdateOne) RemoveSysDeptIDs(ids ...int64) *SysRoleUpdateOne {
	sruo.mutation.RemoveSysDeptIDs(ids...)
	return sruo
}

// RemoveSysDepts removes "sysDepts" edges to SysDept entities.
func (sruo *SysRoleUpdateOne) RemoveSysDepts(s ...*SysDept) *SysRoleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveSysDeptIDs(ids...)
}

// ClearSysUsers clears all "sysUsers" edges to the SysUser entity.
func (sruo *SysRoleUpdateOne) ClearSysUsers() *SysRoleUpdateOne {
	sruo.mutation.ClearSysUsers()
	return sruo
}

// RemoveSysUserIDs removes the "sysUsers" edge to SysUser entities by IDs.
func (sruo *SysRoleUpdateOne) RemoveSysUserIDs(ids ...int64) *SysRoleUpdateOne {
	sruo.mutation.RemoveSysUserIDs(ids...)
	return sruo
}

// RemoveSysUsers removes "sysUsers" edges to SysUser entities.
func (sruo *SysRoleUpdateOne) RemoveSysUsers(s ...*SysUser) *SysRoleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveSysUserIDs(ids...)
}

// ClearSysMenus clears all "sysMenus" edges to the SysMenu entity.
func (sruo *SysRoleUpdateOne) ClearSysMenus() *SysRoleUpdateOne {
	sruo.mutation.ClearSysMenus()
	return sruo
}

// RemoveSysMenuIDs removes the "sysMenus" edge to SysMenu entities by IDs.
func (sruo *SysRoleUpdateOne) RemoveSysMenuIDs(ids ...int64) *SysRoleUpdateOne {
	sruo.mutation.RemoveSysMenuIDs(ids...)
	return sruo
}

// RemoveSysMenus removes "sysMenus" edges to SysMenu entities.
func (sruo *SysRoleUpdateOne) RemoveSysMenus(s ...*SysMenu) *SysRoleUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sruo.RemoveSysMenuIDs(ids...)
}

// Where appends a list predicates to the SysRoleUpdate builder.
func (sruo *SysRoleUpdateOne) Where(ps ...predicate.SysRole) *SysRoleUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SysRoleUpdateOne) Select(field string, fields ...string) *SysRoleUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SysRole entity.
func (sruo *SysRoleUpdateOne) Save(ctx context.Context) (*SysRole, error) {
	if err := sruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SysRoleUpdateOne) SaveX(ctx context.Context) *SysRole {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SysRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SysRoleUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *SysRoleUpdateOne) defaults() error {
	if _, ok := sruo.mutation.UpdatedAt(); !ok && !sruo.mutation.UpdatedAtCleared() {
		if sysrole.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysrole.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysrole.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (sruo *SysRoleUpdateOne) sqlSave(ctx context.Context) (_node *SysRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysrole.Table, sysrole.Columns, sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysrole.FieldID)
		for _, f := range fields {
			if !sysrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.CreatedAt(); ok {
		_spec.SetField(sysrole.FieldCreatedAt, field.TypeTime, value)
	}
	if sruo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysrole.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if sruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.DeleteAt(); ok {
		_spec.SetField(sysrole.FieldDeleteAt, field.TypeTime, value)
	}
	if sruo.mutation.DeleteAtCleared() {
		_spec.ClearField(sysrole.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.CreatedBy(); ok {
		_spec.SetField(sysrole.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysrole.FieldCreatedBy, field.TypeInt64, value)
	}
	if sruo.mutation.CreatedByCleared() {
		_spec.ClearField(sysrole.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := sruo.mutation.UpdatedBy(); ok {
		_spec.SetField(sysrole.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysrole.FieldUpdatedBy, field.TypeInt64, value)
	}
	if sruo.mutation.UpdatedByCleared() {
		_spec.ClearField(sysrole.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := sruo.mutation.DeleteBy(); ok {
		_spec.SetField(sysrole.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := sruo.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysrole.FieldDeleteBy, field.TypeInt64, value)
	}
	if sruo.mutation.DeleteByCleared() {
		_spec.ClearField(sysrole.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := sruo.mutation.Status(); ok {
		_spec.SetField(sysrole.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := sruo.mutation.AddedStatus(); ok {
		_spec.AddField(sysrole.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := sruo.mutation.Sort(); ok {
		_spec.SetField(sysrole.FieldSort, field.TypeInt, value)
	}
	if value, ok := sruo.mutation.AddedSort(); ok {
		_spec.AddField(sysrole.FieldSort, field.TypeInt, value)
	}
	if sruo.mutation.SortCleared() {
		_spec.ClearField(sysrole.FieldSort, field.TypeInt)
	}
	if value, ok := sruo.mutation.Remark(); ok {
		_spec.SetField(sysrole.FieldRemark, field.TypeString, value)
	}
	if sruo.mutation.RemarkCleared() {
		_spec.ClearField(sysrole.FieldRemark, field.TypeString)
	}
	if value, ok := sruo.mutation.DelFlag(); ok {
		_spec.SetField(sysrole.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := sruo.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysrole.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := sruo.mutation.RoleName(); ok {
		_spec.SetField(sysrole.FieldRoleName, field.TypeString, value)
	}
	if sruo.mutation.RoleNameCleared() {
		_spec.ClearField(sysrole.FieldRoleName, field.TypeString)
	}
	if value, ok := sruo.mutation.DataScope(); ok {
		_spec.SetField(sysrole.FieldDataScope, field.TypeInt8, value)
	}
	if value, ok := sruo.mutation.AddedDataScope(); ok {
		_spec.AddField(sysrole.FieldDataScope, field.TypeInt8, value)
	}
	if sruo.mutation.DataScopeCleared() {
		_spec.ClearField(sysrole.FieldDataScope, field.TypeInt8)
	}
	if sruo.mutation.SysDeptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysDeptsTable,
			Columns: sysrole.SysDeptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedSysDeptsIDs(); len(nodes) > 0 && !sruo.mutation.SysDeptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysDeptsTable,
			Columns: sysrole.SysDeptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SysDeptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysDeptsTable,
			Columns: sysrole.SysDeptsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysrole.SysUsersTable,
			Columns: sysrole.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedSysUsersIDs(); len(nodes) > 0 && !sruo.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysrole.SysUsersTable,
			Columns: sysrole.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SysUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysrole.SysUsersTable,
			Columns: sysrole.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.SysMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysMenusTable,
			Columns: sysrole.SysMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RemovedSysMenusIDs(); len(nodes) > 0 && !sruo.mutation.SysMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysMenusTable,
			Columns: sysrole.SysMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SysMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   sysrole.SysMenusTable,
			Columns: sysrole.SysMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysRole{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
