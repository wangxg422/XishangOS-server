// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuseronline"
)

// 在线用户表
type SysUserOnline struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,string"`
	// 用户标识
	UUID int64 `json:"uuid"`
	// 用户token
	Token int64 `json:"token"`
	// 登录时间
	CreateTime int64 `json:"createTime"`
	// 用户名
	UserName int64 `json:"userName"`
	// 登录ip
	IPAddr int64 `json:"ipAddr"`
	// 浏览器
	Browser int64 `json:"browser"`
	// 操作系统
	Os           int64 `json:"os"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysUserOnline) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysuseronline.FieldID, sysuseronline.FieldUUID, sysuseronline.FieldToken, sysuseronline.FieldCreateTime, sysuseronline.FieldUserName, sysuseronline.FieldIPAddr, sysuseronline.FieldBrowser, sysuseronline.FieldOs:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysUserOnline fields.
func (suo *SysUserOnline) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysuseronline.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			suo.ID = int64(value.Int64)
		case sysuseronline.FieldUUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				suo.UUID = value.Int64
			}
		case sysuseronline.FieldToken:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				suo.Token = value.Int64
			}
		case sysuseronline.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				suo.CreateTime = value.Int64
			}
		case sysuseronline.FieldUserName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				suo.UserName = value.Int64
			}
		case sysuseronline.FieldIPAddr:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ip_addr", values[i])
			} else if value.Valid {
				suo.IPAddr = value.Int64
			}
		case sysuseronline.FieldBrowser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field browser", values[i])
			} else if value.Valid {
				suo.Browser = value.Int64
			}
		case sysuseronline.FieldOs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				suo.Os = value.Int64
			}
		default:
			suo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysUserOnline.
// This includes values selected through modifiers, order, etc.
func (suo *SysUserOnline) Value(name string) (ent.Value, error) {
	return suo.selectValues.Get(name)
}

// Update returns a builder for updating this SysUserOnline.
// Note that you need to call SysUserOnline.Unwrap() before calling this method if this SysUserOnline
// was returned from a transaction, and the transaction was committed or rolled back.
func (suo *SysUserOnline) Update() *SysUserOnlineUpdateOne {
	return NewSysUserOnlineClient(suo.config).UpdateOne(suo)
}

// Unwrap unwraps the SysUserOnline entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (suo *SysUserOnline) Unwrap() *SysUserOnline {
	_tx, ok := suo.config.driver.(*txDriver)
	if !ok {
		panic("codegen: SysUserOnline is not a transactional entity")
	}
	suo.config.driver = _tx.drv
	return suo
}

// String implements the fmt.Stringer.
func (suo *SysUserOnline) String() string {
	var builder strings.Builder
	builder.WriteString("SysUserOnline(")
	builder.WriteString(fmt.Sprintf("id=%v, ", suo.ID))
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", suo.UUID))
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(fmt.Sprintf("%v", suo.Token))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", suo.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(fmt.Sprintf("%v", suo.UserName))
	builder.WriteString(", ")
	builder.WriteString("ip_addr=")
	builder.WriteString(fmt.Sprintf("%v", suo.IPAddr))
	builder.WriteString(", ")
	builder.WriteString("browser=")
	builder.WriteString(fmt.Sprintf("%v", suo.Browser))
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(fmt.Sprintf("%v", suo.Os))
	builder.WriteByte(')')
	return builder.String()
}

// SysUserOnlines is a parsable slice of SysUserOnline.
type SysUserOnlines []*SysUserOnline
