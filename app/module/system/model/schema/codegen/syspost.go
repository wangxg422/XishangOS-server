// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/syspost"
)

// 系统岗位表
type SysPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"delete_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// DeleteBy holds the value of the "delete_by" field.
	DeleteBy int64 `json:"delete_by,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort int `json:"sort,omitempty"`
	// 岗位编码
	PostCode string `json:"post_code,omitempty"`
	// 岗位名称
	PostName string `json:"post_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysPostQuery when eager-loading is set.
	Edges        SysPostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SysPostEdges holds the relations/edges for other nodes in the graph.
type SysPostEdges struct {
	// SysUsers holds the value of the sysUsers edge.
	SysUsers []*SysUser `json:"sysUsers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SysUsersOrErr returns the SysUsers value or an error if the edge
// was not loaded in eager-loading.
func (e SysPostEdges) SysUsersOrErr() ([]*SysUser, error) {
	if e.loadedTypes[0] {
		return e.SysUsers, nil
	}
	return nil, &NotLoadedError{edge: "sysUsers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case syspost.FieldID, syspost.FieldCreatedBy, syspost.FieldUpdatedBy, syspost.FieldDeleteBy, syspost.FieldStatus, syspost.FieldSort:
			values[i] = new(sql.NullInt64)
		case syspost.FieldRemark, syspost.FieldPostCode, syspost.FieldPostName:
			values[i] = new(sql.NullString)
		case syspost.FieldCreatedAt, syspost.FieldUpdatedAt, syspost.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysPost fields.
func (sp *SysPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syspost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = int64(value.Int64)
		case syspost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case syspost.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case syspost.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				sp.DeleteAt = value.Time
			}
		case syspost.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sp.CreatedBy = value.Int64
			}
		case syspost.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sp.UpdatedBy = value.Int64
			}
		case syspost.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				sp.DeleteBy = value.Int64
			}
		case syspost.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sp.Remark = value.String
			}
		case syspost.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = int8(value.Int64)
			}
		case syspost.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sp.Sort = int(value.Int64)
			}
		case syspost.FieldPostCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_code", values[i])
			} else if value.Valid {
				sp.PostCode = value.String
			}
		case syspost.FieldPostName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_name", values[i])
			} else if value.Valid {
				sp.PostName = value.String
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysPost.
// This includes values selected through modifiers, order, etc.
func (sp *SysPost) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QuerySysUsers queries the "sysUsers" edge of the SysPost entity.
func (sp *SysPost) QuerySysUsers() *SysUserQuery {
	return NewSysPostClient(sp.config).QuerySysUsers(sp)
}

// Update returns a builder for updating this SysPost.
// Note that you need to call SysPost.Unwrap() before calling this method if this SysPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SysPost) Update() *SysPostUpdateOne {
	return NewSysPostClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SysPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SysPost) Unwrap() *SysPost {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("codegen: SysPost is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SysPost) String() string {
	var builder strings.Builder
	builder.WriteString("SysPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(sp.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", sp.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", sp.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", sp.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(sp.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", sp.Sort))
	builder.WriteString(", ")
	builder.WriteString("post_code=")
	builder.WriteString(sp.PostCode)
	builder.WriteString(", ")
	builder.WriteString("post_name=")
	builder.WriteString(sp.PostName)
	builder.WriteByte(')')
	return builder.String()
}

// SysPosts is a parsable slice of SysPost.
type SysPosts []*SysPost
