// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysloginlog"
)

// SysLoginLogCreate is the builder for creating a SysLoginLog entity.
type SysLoginLogCreate struct {
	config
	mutation *SysLoginLogMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (sllc *SysLoginLogCreate) SetStatus(i int8) *SysLoginLogCreate {
	sllc.mutation.SetStatus(i)
	return sllc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableStatus(i *int8) *SysLoginLogCreate {
	if i != nil {
		sllc.SetStatus(*i)
	}
	return sllc
}

// SetLoginName sets the "login_name" field.
func (sllc *SysLoginLogCreate) SetLoginName(s string) *SysLoginLogCreate {
	sllc.mutation.SetLoginName(s)
	return sllc
}

// SetNillableLoginName sets the "login_name" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableLoginName(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetLoginName(*s)
	}
	return sllc
}

// SetIPAddr sets the "ip_addr" field.
func (sllc *SysLoginLogCreate) SetIPAddr(s string) *SysLoginLogCreate {
	sllc.mutation.SetIPAddr(s)
	return sllc
}

// SetNillableIPAddr sets the "ip_addr" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableIPAddr(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetIPAddr(*s)
	}
	return sllc
}

// SetLoginLocation sets the "login_location" field.
func (sllc *SysLoginLogCreate) SetLoginLocation(s string) *SysLoginLogCreate {
	sllc.mutation.SetLoginLocation(s)
	return sllc
}

// SetNillableLoginLocation sets the "login_location" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableLoginLocation(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetLoginLocation(*s)
	}
	return sllc
}

// SetBrowser sets the "browser" field.
func (sllc *SysLoginLogCreate) SetBrowser(s string) *SysLoginLogCreate {
	sllc.mutation.SetBrowser(s)
	return sllc
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableBrowser(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetBrowser(*s)
	}
	return sllc
}

// SetOs sets the "os" field.
func (sllc *SysLoginLogCreate) SetOs(s string) *SysLoginLogCreate {
	sllc.mutation.SetOs(s)
	return sllc
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableOs(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetOs(*s)
	}
	return sllc
}

// SetMsg sets the "msg" field.
func (sllc *SysLoginLogCreate) SetMsg(s string) *SysLoginLogCreate {
	sllc.mutation.SetMsg(s)
	return sllc
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableMsg(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetMsg(*s)
	}
	return sllc
}

// SetLoginTime sets the "login_time" field.
func (sllc *SysLoginLogCreate) SetLoginTime(t time.Time) *SysLoginLogCreate {
	sllc.mutation.SetLoginTime(t)
	return sllc
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableLoginTime(t *time.Time) *SysLoginLogCreate {
	if t != nil {
		sllc.SetLoginTime(*t)
	}
	return sllc
}

// SetModule sets the "module" field.
func (sllc *SysLoginLogCreate) SetModule(s string) *SysLoginLogCreate {
	sllc.mutation.SetModule(s)
	return sllc
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableModule(s *string) *SysLoginLogCreate {
	if s != nil {
		sllc.SetModule(*s)
	}
	return sllc
}

// SetID sets the "id" field.
func (sllc *SysLoginLogCreate) SetID(i int64) *SysLoginLogCreate {
	sllc.mutation.SetID(i)
	return sllc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sllc *SysLoginLogCreate) SetNillableID(i *int64) *SysLoginLogCreate {
	if i != nil {
		sllc.SetID(*i)
	}
	return sllc
}

// Mutation returns the SysLoginLogMutation object of the builder.
func (sllc *SysLoginLogCreate) Mutation() *SysLoginLogMutation {
	return sllc.mutation
}

// Save creates the SysLoginLog in the database.
func (sllc *SysLoginLogCreate) Save(ctx context.Context) (*SysLoginLog, error) {
	sllc.defaults()
	return withHooks(ctx, sllc.sqlSave, sllc.mutation, sllc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sllc *SysLoginLogCreate) SaveX(ctx context.Context) *SysLoginLog {
	v, err := sllc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sllc *SysLoginLogCreate) Exec(ctx context.Context) error {
	_, err := sllc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sllc *SysLoginLogCreate) ExecX(ctx context.Context) {
	if err := sllc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sllc *SysLoginLogCreate) defaults() {
	if _, ok := sllc.mutation.Status(); !ok {
		v := sysloginlog.DefaultStatus
		sllc.mutation.SetStatus(v)
	}
	if _, ok := sllc.mutation.ID(); !ok {
		v := sysloginlog.DefaultID()
		sllc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sllc *SysLoginLogCreate) check() error {
	if _, ok := sllc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`codegen: missing required field "SysLoginLog.status"`)}
	}
	return nil
}

func (sllc *SysLoginLogCreate) sqlSave(ctx context.Context) (*SysLoginLog, error) {
	if err := sllc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sllc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sllc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sllc.mutation.id = &_node.ID
	sllc.mutation.done = true
	return _node, nil
}

func (sllc *SysLoginLogCreate) createSpec() (*SysLoginLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SysLoginLog{config: sllc.config}
		_spec = sqlgraph.NewCreateSpec(sysloginlog.Table, sqlgraph.NewFieldSpec(sysloginlog.FieldID, field.TypeInt64))
	)
	if id, ok := sllc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sllc.mutation.Status(); ok {
		_spec.SetField(sysloginlog.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := sllc.mutation.LoginName(); ok {
		_spec.SetField(sysloginlog.FieldLoginName, field.TypeString, value)
		_node.LoginName = value
	}
	if value, ok := sllc.mutation.IPAddr(); ok {
		_spec.SetField(sysloginlog.FieldIPAddr, field.TypeString, value)
		_node.IPAddr = value
	}
	if value, ok := sllc.mutation.LoginLocation(); ok {
		_spec.SetField(sysloginlog.FieldLoginLocation, field.TypeString, value)
		_node.LoginLocation = value
	}
	if value, ok := sllc.mutation.Browser(); ok {
		_spec.SetField(sysloginlog.FieldBrowser, field.TypeString, value)
		_node.Browser = value
	}
	if value, ok := sllc.mutation.Os(); ok {
		_spec.SetField(sysloginlog.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := sllc.mutation.Msg(); ok {
		_spec.SetField(sysloginlog.FieldMsg, field.TypeString, value)
		_node.Msg = value
	}
	if value, ok := sllc.mutation.LoginTime(); ok {
		_spec.SetField(sysloginlog.FieldLoginTime, field.TypeTime, value)
		_node.LoginTime = value
	}
	if value, ok := sllc.mutation.Module(); ok {
		_spec.SetField(sysloginlog.FieldModule, field.TypeString, value)
		_node.Module = value
	}
	return _node, _spec
}

// SysLoginLogCreateBulk is the builder for creating many SysLoginLog entities in bulk.
type SysLoginLogCreateBulk struct {
	config
	err      error
	builders []*SysLoginLogCreate
}

// Save creates the SysLoginLog entities in the database.
func (sllcb *SysLoginLogCreateBulk) Save(ctx context.Context) ([]*SysLoginLog, error) {
	if sllcb.err != nil {
		return nil, sllcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sllcb.builders))
	nodes := make([]*SysLoginLog, len(sllcb.builders))
	mutators := make([]Mutator, len(sllcb.builders))
	for i := range sllcb.builders {
		func(i int, root context.Context) {
			builder := sllcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysLoginLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sllcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sllcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sllcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sllcb *SysLoginLogCreateBulk) SaveX(ctx context.Context) []*SysLoginLog {
	v, err := sllcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sllcb *SysLoginLogCreateBulk) Exec(ctx context.Context) error {
	_, err := sllcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sllcb *SysLoginLogCreateBulk) ExecX(ctx context.Context) {
	if err := sllcb.Exec(ctx); err != nil {
		panic(err)
	}
}
