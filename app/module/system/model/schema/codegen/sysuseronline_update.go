// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuseronline"
)

// SysUserOnlineUpdate is the builder for updating SysUserOnline entities.
type SysUserOnlineUpdate struct {
	config
	hooks    []Hook
	mutation *SysUserOnlineMutation
}

// Where appends a list predicates to the SysUserOnlineUpdate builder.
func (suou *SysUserOnlineUpdate) Where(ps ...predicate.SysUserOnline) *SysUserOnlineUpdate {
	suou.mutation.Where(ps...)
	return suou
}

// SetUUID sets the "uuid" field.
func (suou *SysUserOnlineUpdate) SetUUID(i int64) *SysUserOnlineUpdate {
	suou.mutation.ResetUUID()
	suou.mutation.SetUUID(i)
	return suou
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (suou *SysUserOnlineUpdate) SetNillableUUID(i *int64) *SysUserOnlineUpdate {
	if i != nil {
		suou.SetUUID(*i)
	}
	return suou
}

// AddUUID adds i to the "uuid" field.
func (suou *SysUserOnlineUpdate) AddUUID(i int64) *SysUserOnlineUpdate {
	suou.mutation.AddUUID(i)
	return suou
}

// ClearUUID clears the value of the "uuid" field.
func (suou *SysUserOnlineUpdate) ClearUUID() *SysUserOnlineUpdate {
	suou.mutation.ClearUUID()
	return suou
}

// SetToken sets the "token" field.
func (suou *SysUserOnlineUpdate) SetToken(i int64) *SysUserOnlineUpdate {
	suou.mutation.ResetToken()
	suou.mutation.SetToken(i)
	return suou
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suou *SysUserOnlineUpdate) SetNillableToken(i *int64) *SysUserOnlineUpdate {
	if i != nil {
		suou.SetToken(*i)
	}
	return suou
}

// AddToken adds i to the "token" field.
func (suou *SysUserOnlineUpdate) AddToken(i int64) *SysUserOnlineUpdate {
	suou.mutation.AddToken(i)
	return suou
}

// ClearToken clears the value of the "token" field.
func (suou *SysUserOnlineUpdate) ClearToken() *SysUserOnlineUpdate {
	suou.mutation.ClearToken()
	return suou
}

// SetCreateTime sets the "create_time" field.
func (suou *SysUserOnlineUpdate) SetCreateTime(i int64) *SysUserOnlineUpdate {
	suou.mutation.ResetCreateTime()
	suou.mutation.SetCreateTime(i)
	return suou
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (suou *SysUserOnlineUpdate) SetNillableCreateTime(i *int64) *SysUserOnlineUpdate {
	if i != nil {
		suou.SetCreateTime(*i)
	}
	return suou
}

// AddCreateTime adds i to the "create_time" field.
func (suou *SysUserOnlineUpdate) AddCreateTime(i int64) *SysUserOnlineUpdate {
	suou.mutation.AddCreateTime(i)
	return suou
}

// ClearCreateTime clears the value of the "create_time" field.
func (suou *SysUserOnlineUpdate) ClearCreateTime() *SysUserOnlineUpdate {
	suou.mutation.ClearCreateTime()
	return suou
}

// SetUserName sets the "user_name" field.
func (suou *SysUserOnlineUpdate) SetUserName(i int64) *SysUserOnlineUpdate {
	suou.mutation.ResetUserName()
	suou.mutation.SetUserName(i)
	return suou
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (suou *SysUserOnlineUpdate) SetNillableUserName(i *int64) *SysUserOnlineUpdate {
	if i != nil {
		suou.SetUserName(*i)
	}
	return suou
}

// AddUserName adds i to the "user_name" field.
func (suou *SysUserOnlineUpdate) AddUserName(i int64) *SysUserOnlineUpdate {
	suou.mutation.AddUserName(i)
	return suou
}

// ClearUserName clears the value of the "user_name" field.
func (suou *SysUserOnlineUpdate) ClearUserName() *SysUserOnlineUpdate {
	suou.mutation.ClearUserName()
	return suou
}

// SetIPAddr sets the "ip_addr" field.
func (suou *SysUserOnlineUpdate) SetIPAddr(i int64) *SysUserOnlineUpdate {
	suou.mutation.ResetIPAddr()
	suou.mutation.SetIPAddr(i)
	return suou
}

// SetNillableIPAddr sets the "ip_addr" field if the given value is not nil.
func (suou *SysUserOnlineUpdate) SetNillableIPAddr(i *int64) *SysUserOnlineUpdate {
	if i != nil {
		suou.SetIPAddr(*i)
	}
	return suou
}

// AddIPAddr adds i to the "ip_addr" field.
func (suou *SysUserOnlineUpdate) AddIPAddr(i int64) *SysUserOnlineUpdate {
	suou.mutation.AddIPAddr(i)
	return suou
}

// ClearIPAddr clears the value of the "ip_addr" field.
func (suou *SysUserOnlineUpdate) ClearIPAddr() *SysUserOnlineUpdate {
	suou.mutation.ClearIPAddr()
	return suou
}

// SetBrowser sets the "browser" field.
func (suou *SysUserOnlineUpdate) SetBrowser(i int64) *SysUserOnlineUpdate {
	suou.mutation.ResetBrowser()
	suou.mutation.SetBrowser(i)
	return suou
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (suou *SysUserOnlineUpdate) SetNillableBrowser(i *int64) *SysUserOnlineUpdate {
	if i != nil {
		suou.SetBrowser(*i)
	}
	return suou
}

// AddBrowser adds i to the "browser" field.
func (suou *SysUserOnlineUpdate) AddBrowser(i int64) *SysUserOnlineUpdate {
	suou.mutation.AddBrowser(i)
	return suou
}

// ClearBrowser clears the value of the "browser" field.
func (suou *SysUserOnlineUpdate) ClearBrowser() *SysUserOnlineUpdate {
	suou.mutation.ClearBrowser()
	return suou
}

// SetOs sets the "os" field.
func (suou *SysUserOnlineUpdate) SetOs(i int64) *SysUserOnlineUpdate {
	suou.mutation.ResetOs()
	suou.mutation.SetOs(i)
	return suou
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (suou *SysUserOnlineUpdate) SetNillableOs(i *int64) *SysUserOnlineUpdate {
	if i != nil {
		suou.SetOs(*i)
	}
	return suou
}

// AddOs adds i to the "os" field.
func (suou *SysUserOnlineUpdate) AddOs(i int64) *SysUserOnlineUpdate {
	suou.mutation.AddOs(i)
	return suou
}

// ClearOs clears the value of the "os" field.
func (suou *SysUserOnlineUpdate) ClearOs() *SysUserOnlineUpdate {
	suou.mutation.ClearOs()
	return suou
}

// Mutation returns the SysUserOnlineMutation object of the builder.
func (suou *SysUserOnlineUpdate) Mutation() *SysUserOnlineMutation {
	return suou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suou *SysUserOnlineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, suou.sqlSave, suou.mutation, suou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suou *SysUserOnlineUpdate) SaveX(ctx context.Context) int {
	affected, err := suou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suou *SysUserOnlineUpdate) Exec(ctx context.Context) error {
	_, err := suou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suou *SysUserOnlineUpdate) ExecX(ctx context.Context) {
	if err := suou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suou *SysUserOnlineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysuseronline.Table, sysuseronline.Columns, sqlgraph.NewFieldSpec(sysuseronline.FieldID, field.TypeInt64))
	if ps := suou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suou.mutation.UUID(); ok {
		_spec.SetField(sysuseronline.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := suou.mutation.AddedUUID(); ok {
		_spec.AddField(sysuseronline.FieldUUID, field.TypeInt64, value)
	}
	if suou.mutation.UUIDCleared() {
		_spec.ClearField(sysuseronline.FieldUUID, field.TypeInt64)
	}
	if value, ok := suou.mutation.Token(); ok {
		_spec.SetField(sysuseronline.FieldToken, field.TypeInt64, value)
	}
	if value, ok := suou.mutation.AddedToken(); ok {
		_spec.AddField(sysuseronline.FieldToken, field.TypeInt64, value)
	}
	if suou.mutation.TokenCleared() {
		_spec.ClearField(sysuseronline.FieldToken, field.TypeInt64)
	}
	if value, ok := suou.mutation.CreateTime(); ok {
		_spec.SetField(sysuseronline.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := suou.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysuseronline.FieldCreateTime, field.TypeInt64, value)
	}
	if suou.mutation.CreateTimeCleared() {
		_spec.ClearField(sysuseronline.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := suou.mutation.UserName(); ok {
		_spec.SetField(sysuseronline.FieldUserName, field.TypeInt64, value)
	}
	if value, ok := suou.mutation.AddedUserName(); ok {
		_spec.AddField(sysuseronline.FieldUserName, field.TypeInt64, value)
	}
	if suou.mutation.UserNameCleared() {
		_spec.ClearField(sysuseronline.FieldUserName, field.TypeInt64)
	}
	if value, ok := suou.mutation.IPAddr(); ok {
		_spec.SetField(sysuseronline.FieldIPAddr, field.TypeInt64, value)
	}
	if value, ok := suou.mutation.AddedIPAddr(); ok {
		_spec.AddField(sysuseronline.FieldIPAddr, field.TypeInt64, value)
	}
	if suou.mutation.IPAddrCleared() {
		_spec.ClearField(sysuseronline.FieldIPAddr, field.TypeInt64)
	}
	if value, ok := suou.mutation.Browser(); ok {
		_spec.SetField(sysuseronline.FieldBrowser, field.TypeInt64, value)
	}
	if value, ok := suou.mutation.AddedBrowser(); ok {
		_spec.AddField(sysuseronline.FieldBrowser, field.TypeInt64, value)
	}
	if suou.mutation.BrowserCleared() {
		_spec.ClearField(sysuseronline.FieldBrowser, field.TypeInt64)
	}
	if value, ok := suou.mutation.Os(); ok {
		_spec.SetField(sysuseronline.FieldOs, field.TypeInt64, value)
	}
	if value, ok := suou.mutation.AddedOs(); ok {
		_spec.AddField(sysuseronline.FieldOs, field.TypeInt64, value)
	}
	if suou.mutation.OsCleared() {
		_spec.ClearField(sysuseronline.FieldOs, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuseronline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suou.mutation.done = true
	return n, nil
}

// SysUserOnlineUpdateOne is the builder for updating a single SysUserOnline entity.
type SysUserOnlineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysUserOnlineMutation
}

// SetUUID sets the "uuid" field.
func (suouo *SysUserOnlineUpdateOne) SetUUID(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.ResetUUID()
	suouo.mutation.SetUUID(i)
	return suouo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (suouo *SysUserOnlineUpdateOne) SetNillableUUID(i *int64) *SysUserOnlineUpdateOne {
	if i != nil {
		suouo.SetUUID(*i)
	}
	return suouo
}

// AddUUID adds i to the "uuid" field.
func (suouo *SysUserOnlineUpdateOne) AddUUID(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.AddUUID(i)
	return suouo
}

// ClearUUID clears the value of the "uuid" field.
func (suouo *SysUserOnlineUpdateOne) ClearUUID() *SysUserOnlineUpdateOne {
	suouo.mutation.ClearUUID()
	return suouo
}

// SetToken sets the "token" field.
func (suouo *SysUserOnlineUpdateOne) SetToken(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.ResetToken()
	suouo.mutation.SetToken(i)
	return suouo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suouo *SysUserOnlineUpdateOne) SetNillableToken(i *int64) *SysUserOnlineUpdateOne {
	if i != nil {
		suouo.SetToken(*i)
	}
	return suouo
}

// AddToken adds i to the "token" field.
func (suouo *SysUserOnlineUpdateOne) AddToken(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.AddToken(i)
	return suouo
}

// ClearToken clears the value of the "token" field.
func (suouo *SysUserOnlineUpdateOne) ClearToken() *SysUserOnlineUpdateOne {
	suouo.mutation.ClearToken()
	return suouo
}

// SetCreateTime sets the "create_time" field.
func (suouo *SysUserOnlineUpdateOne) SetCreateTime(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.ResetCreateTime()
	suouo.mutation.SetCreateTime(i)
	return suouo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (suouo *SysUserOnlineUpdateOne) SetNillableCreateTime(i *int64) *SysUserOnlineUpdateOne {
	if i != nil {
		suouo.SetCreateTime(*i)
	}
	return suouo
}

// AddCreateTime adds i to the "create_time" field.
func (suouo *SysUserOnlineUpdateOne) AddCreateTime(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.AddCreateTime(i)
	return suouo
}

// ClearCreateTime clears the value of the "create_time" field.
func (suouo *SysUserOnlineUpdateOne) ClearCreateTime() *SysUserOnlineUpdateOne {
	suouo.mutation.ClearCreateTime()
	return suouo
}

// SetUserName sets the "user_name" field.
func (suouo *SysUserOnlineUpdateOne) SetUserName(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.ResetUserName()
	suouo.mutation.SetUserName(i)
	return suouo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (suouo *SysUserOnlineUpdateOne) SetNillableUserName(i *int64) *SysUserOnlineUpdateOne {
	if i != nil {
		suouo.SetUserName(*i)
	}
	return suouo
}

// AddUserName adds i to the "user_name" field.
func (suouo *SysUserOnlineUpdateOne) AddUserName(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.AddUserName(i)
	return suouo
}

// ClearUserName clears the value of the "user_name" field.
func (suouo *SysUserOnlineUpdateOne) ClearUserName() *SysUserOnlineUpdateOne {
	suouo.mutation.ClearUserName()
	return suouo
}

// SetIPAddr sets the "ip_addr" field.
func (suouo *SysUserOnlineUpdateOne) SetIPAddr(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.ResetIPAddr()
	suouo.mutation.SetIPAddr(i)
	return suouo
}

// SetNillableIPAddr sets the "ip_addr" field if the given value is not nil.
func (suouo *SysUserOnlineUpdateOne) SetNillableIPAddr(i *int64) *SysUserOnlineUpdateOne {
	if i != nil {
		suouo.SetIPAddr(*i)
	}
	return suouo
}

// AddIPAddr adds i to the "ip_addr" field.
func (suouo *SysUserOnlineUpdateOne) AddIPAddr(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.AddIPAddr(i)
	return suouo
}

// ClearIPAddr clears the value of the "ip_addr" field.
func (suouo *SysUserOnlineUpdateOne) ClearIPAddr() *SysUserOnlineUpdateOne {
	suouo.mutation.ClearIPAddr()
	return suouo
}

// SetBrowser sets the "browser" field.
func (suouo *SysUserOnlineUpdateOne) SetBrowser(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.ResetBrowser()
	suouo.mutation.SetBrowser(i)
	return suouo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (suouo *SysUserOnlineUpdateOne) SetNillableBrowser(i *int64) *SysUserOnlineUpdateOne {
	if i != nil {
		suouo.SetBrowser(*i)
	}
	return suouo
}

// AddBrowser adds i to the "browser" field.
func (suouo *SysUserOnlineUpdateOne) AddBrowser(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.AddBrowser(i)
	return suouo
}

// ClearBrowser clears the value of the "browser" field.
func (suouo *SysUserOnlineUpdateOne) ClearBrowser() *SysUserOnlineUpdateOne {
	suouo.mutation.ClearBrowser()
	return suouo
}

// SetOs sets the "os" field.
func (suouo *SysUserOnlineUpdateOne) SetOs(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.ResetOs()
	suouo.mutation.SetOs(i)
	return suouo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (suouo *SysUserOnlineUpdateOne) SetNillableOs(i *int64) *SysUserOnlineUpdateOne {
	if i != nil {
		suouo.SetOs(*i)
	}
	return suouo
}

// AddOs adds i to the "os" field.
func (suouo *SysUserOnlineUpdateOne) AddOs(i int64) *SysUserOnlineUpdateOne {
	suouo.mutation.AddOs(i)
	return suouo
}

// ClearOs clears the value of the "os" field.
func (suouo *SysUserOnlineUpdateOne) ClearOs() *SysUserOnlineUpdateOne {
	suouo.mutation.ClearOs()
	return suouo
}

// Mutation returns the SysUserOnlineMutation object of the builder.
func (suouo *SysUserOnlineUpdateOne) Mutation() *SysUserOnlineMutation {
	return suouo.mutation
}

// Where appends a list predicates to the SysUserOnlineUpdate builder.
func (suouo *SysUserOnlineUpdateOne) Where(ps ...predicate.SysUserOnline) *SysUserOnlineUpdateOne {
	suouo.mutation.Where(ps...)
	return suouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suouo *SysUserOnlineUpdateOne) Select(field string, fields ...string) *SysUserOnlineUpdateOne {
	suouo.fields = append([]string{field}, fields...)
	return suouo
}

// Save executes the query and returns the updated SysUserOnline entity.
func (suouo *SysUserOnlineUpdateOne) Save(ctx context.Context) (*SysUserOnline, error) {
	return withHooks(ctx, suouo.sqlSave, suouo.mutation, suouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suouo *SysUserOnlineUpdateOne) SaveX(ctx context.Context) *SysUserOnline {
	node, err := suouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suouo *SysUserOnlineUpdateOne) Exec(ctx context.Context) error {
	_, err := suouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suouo *SysUserOnlineUpdateOne) ExecX(ctx context.Context) {
	if err := suouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suouo *SysUserOnlineUpdateOne) sqlSave(ctx context.Context) (_node *SysUserOnline, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysuseronline.Table, sysuseronline.Columns, sqlgraph.NewFieldSpec(sysuseronline.FieldID, field.TypeInt64))
	id, ok := suouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysUserOnline.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysuseronline.FieldID)
		for _, f := range fields {
			if !sysuseronline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysuseronline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suouo.mutation.UUID(); ok {
		_spec.SetField(sysuseronline.FieldUUID, field.TypeInt64, value)
	}
	if value, ok := suouo.mutation.AddedUUID(); ok {
		_spec.AddField(sysuseronline.FieldUUID, field.TypeInt64, value)
	}
	if suouo.mutation.UUIDCleared() {
		_spec.ClearField(sysuseronline.FieldUUID, field.TypeInt64)
	}
	if value, ok := suouo.mutation.Token(); ok {
		_spec.SetField(sysuseronline.FieldToken, field.TypeInt64, value)
	}
	if value, ok := suouo.mutation.AddedToken(); ok {
		_spec.AddField(sysuseronline.FieldToken, field.TypeInt64, value)
	}
	if suouo.mutation.TokenCleared() {
		_spec.ClearField(sysuseronline.FieldToken, field.TypeInt64)
	}
	if value, ok := suouo.mutation.CreateTime(); ok {
		_spec.SetField(sysuseronline.FieldCreateTime, field.TypeInt64, value)
	}
	if value, ok := suouo.mutation.AddedCreateTime(); ok {
		_spec.AddField(sysuseronline.FieldCreateTime, field.TypeInt64, value)
	}
	if suouo.mutation.CreateTimeCleared() {
		_spec.ClearField(sysuseronline.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := suouo.mutation.UserName(); ok {
		_spec.SetField(sysuseronline.FieldUserName, field.TypeInt64, value)
	}
	if value, ok := suouo.mutation.AddedUserName(); ok {
		_spec.AddField(sysuseronline.FieldUserName, field.TypeInt64, value)
	}
	if suouo.mutation.UserNameCleared() {
		_spec.ClearField(sysuseronline.FieldUserName, field.TypeInt64)
	}
	if value, ok := suouo.mutation.IPAddr(); ok {
		_spec.SetField(sysuseronline.FieldIPAddr, field.TypeInt64, value)
	}
	if value, ok := suouo.mutation.AddedIPAddr(); ok {
		_spec.AddField(sysuseronline.FieldIPAddr, field.TypeInt64, value)
	}
	if suouo.mutation.IPAddrCleared() {
		_spec.ClearField(sysuseronline.FieldIPAddr, field.TypeInt64)
	}
	if value, ok := suouo.mutation.Browser(); ok {
		_spec.SetField(sysuseronline.FieldBrowser, field.TypeInt64, value)
	}
	if value, ok := suouo.mutation.AddedBrowser(); ok {
		_spec.AddField(sysuseronline.FieldBrowser, field.TypeInt64, value)
	}
	if suouo.mutation.BrowserCleared() {
		_spec.ClearField(sysuseronline.FieldBrowser, field.TypeInt64)
	}
	if value, ok := suouo.mutation.Os(); ok {
		_spec.SetField(sysuseronline.FieldOs, field.TypeInt64, value)
	}
	if value, ok := suouo.mutation.AddedOs(); ok {
		_spec.AddField(sysuseronline.FieldOs, field.TypeInt64, value)
	}
	if suouo.mutation.OsCleared() {
		_spec.ClearField(sysuseronline.FieldOs, field.TypeInt64)
	}
	_node = &SysUserOnline{config: suouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysuseronline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suouo.mutation.done = true
	return _node, nil
}
