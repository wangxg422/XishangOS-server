// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/syscasbinrule"
)

// SysCasbinRuleUpdate is the builder for updating SysCasbinRule entities.
type SysCasbinRuleUpdate struct {
	config
	hooks    []Hook
	mutation *SysCasbinRuleMutation
}

// Where appends a list predicates to the SysCasbinRuleUpdate builder.
func (scru *SysCasbinRuleUpdate) Where(ps ...predicate.SysCasbinRule) *SysCasbinRuleUpdate {
	scru.mutation.Where(ps...)
	return scru
}

// SetPtype sets the "ptype" field.
func (scru *SysCasbinRuleUpdate) SetPtype(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetPtype(s)
	return scru
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillablePtype(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetPtype(*s)
	}
	return scru
}

// ClearPtype clears the value of the "ptype" field.
func (scru *SysCasbinRuleUpdate) ClearPtype() *SysCasbinRuleUpdate {
	scru.mutation.ClearPtype()
	return scru
}

// SetV0 sets the "v0" field.
func (scru *SysCasbinRuleUpdate) SetV0(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV0(s)
	return scru
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV0(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV0(*s)
	}
	return scru
}

// ClearV0 clears the value of the "v0" field.
func (scru *SysCasbinRuleUpdate) ClearV0() *SysCasbinRuleUpdate {
	scru.mutation.ClearV0()
	return scru
}

// SetV1 sets the "v1" field.
func (scru *SysCasbinRuleUpdate) SetV1(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV1(s)
	return scru
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV1(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV1(*s)
	}
	return scru
}

// ClearV1 clears the value of the "v1" field.
func (scru *SysCasbinRuleUpdate) ClearV1() *SysCasbinRuleUpdate {
	scru.mutation.ClearV1()
	return scru
}

// SetV2 sets the "v2" field.
func (scru *SysCasbinRuleUpdate) SetV2(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV2(s)
	return scru
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV2(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV2(*s)
	}
	return scru
}

// ClearV2 clears the value of the "v2" field.
func (scru *SysCasbinRuleUpdate) ClearV2() *SysCasbinRuleUpdate {
	scru.mutation.ClearV2()
	return scru
}

// SetV3 sets the "v3" field.
func (scru *SysCasbinRuleUpdate) SetV3(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV3(s)
	return scru
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV3(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV3(*s)
	}
	return scru
}

// ClearV3 clears the value of the "v3" field.
func (scru *SysCasbinRuleUpdate) ClearV3() *SysCasbinRuleUpdate {
	scru.mutation.ClearV3()
	return scru
}

// SetV4 sets the "v4" field.
func (scru *SysCasbinRuleUpdate) SetV4(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV4(s)
	return scru
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV4(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV4(*s)
	}
	return scru
}

// ClearV4 clears the value of the "v4" field.
func (scru *SysCasbinRuleUpdate) ClearV4() *SysCasbinRuleUpdate {
	scru.mutation.ClearV4()
	return scru
}

// SetV5 sets the "v5" field.
func (scru *SysCasbinRuleUpdate) SetV5(s string) *SysCasbinRuleUpdate {
	scru.mutation.SetV5(s)
	return scru
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (scru *SysCasbinRuleUpdate) SetNillableV5(s *string) *SysCasbinRuleUpdate {
	if s != nil {
		scru.SetV5(*s)
	}
	return scru
}

// ClearV5 clears the value of the "v5" field.
func (scru *SysCasbinRuleUpdate) ClearV5() *SysCasbinRuleUpdate {
	scru.mutation.ClearV5()
	return scru
}

// Mutation returns the SysCasbinRuleMutation object of the builder.
func (scru *SysCasbinRuleUpdate) Mutation() *SysCasbinRuleMutation {
	return scru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scru *SysCasbinRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scru.sqlSave, scru.mutation, scru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scru *SysCasbinRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := scru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scru *SysCasbinRuleUpdate) Exec(ctx context.Context) error {
	_, err := scru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scru *SysCasbinRuleUpdate) ExecX(ctx context.Context) {
	if err := scru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scru *SysCasbinRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(syscasbinrule.Table, syscasbinrule.Columns, sqlgraph.NewFieldSpec(syscasbinrule.FieldID, field.TypeInt))
	if ps := scru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scru.mutation.Ptype(); ok {
		_spec.SetField(syscasbinrule.FieldPtype, field.TypeString, value)
	}
	if scru.mutation.PtypeCleared() {
		_spec.ClearField(syscasbinrule.FieldPtype, field.TypeString)
	}
	if value, ok := scru.mutation.V0(); ok {
		_spec.SetField(syscasbinrule.FieldV0, field.TypeString, value)
	}
	if scru.mutation.V0Cleared() {
		_spec.ClearField(syscasbinrule.FieldV0, field.TypeString)
	}
	if value, ok := scru.mutation.V1(); ok {
		_spec.SetField(syscasbinrule.FieldV1, field.TypeString, value)
	}
	if scru.mutation.V1Cleared() {
		_spec.ClearField(syscasbinrule.FieldV1, field.TypeString)
	}
	if value, ok := scru.mutation.V2(); ok {
		_spec.SetField(syscasbinrule.FieldV2, field.TypeString, value)
	}
	if scru.mutation.V2Cleared() {
		_spec.ClearField(syscasbinrule.FieldV2, field.TypeString)
	}
	if value, ok := scru.mutation.V3(); ok {
		_spec.SetField(syscasbinrule.FieldV3, field.TypeString, value)
	}
	if scru.mutation.V3Cleared() {
		_spec.ClearField(syscasbinrule.FieldV3, field.TypeString)
	}
	if value, ok := scru.mutation.V4(); ok {
		_spec.SetField(syscasbinrule.FieldV4, field.TypeString, value)
	}
	if scru.mutation.V4Cleared() {
		_spec.ClearField(syscasbinrule.FieldV4, field.TypeString)
	}
	if value, ok := scru.mutation.V5(); ok {
		_spec.SetField(syscasbinrule.FieldV5, field.TypeString, value)
	}
	if scru.mutation.V5Cleared() {
		_spec.ClearField(syscasbinrule.FieldV5, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syscasbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scru.mutation.done = true
	return n, nil
}

// SysCasbinRuleUpdateOne is the builder for updating a single SysCasbinRule entity.
type SysCasbinRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysCasbinRuleMutation
}

// SetPtype sets the "ptype" field.
func (scruo *SysCasbinRuleUpdateOne) SetPtype(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetPtype(s)
	return scruo
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillablePtype(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetPtype(*s)
	}
	return scruo
}

// ClearPtype clears the value of the "ptype" field.
func (scruo *SysCasbinRuleUpdateOne) ClearPtype() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearPtype()
	return scruo
}

// SetV0 sets the "v0" field.
func (scruo *SysCasbinRuleUpdateOne) SetV0(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV0(s)
	return scruo
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV0(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV0(*s)
	}
	return scruo
}

// ClearV0 clears the value of the "v0" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV0() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV0()
	return scruo
}

// SetV1 sets the "v1" field.
func (scruo *SysCasbinRuleUpdateOne) SetV1(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV1(s)
	return scruo
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV1(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV1(*s)
	}
	return scruo
}

// ClearV1 clears the value of the "v1" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV1() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV1()
	return scruo
}

// SetV2 sets the "v2" field.
func (scruo *SysCasbinRuleUpdateOne) SetV2(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV2(s)
	return scruo
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV2(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV2(*s)
	}
	return scruo
}

// ClearV2 clears the value of the "v2" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV2() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV2()
	return scruo
}

// SetV3 sets the "v3" field.
func (scruo *SysCasbinRuleUpdateOne) SetV3(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV3(s)
	return scruo
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV3(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV3(*s)
	}
	return scruo
}

// ClearV3 clears the value of the "v3" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV3() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV3()
	return scruo
}

// SetV4 sets the "v4" field.
func (scruo *SysCasbinRuleUpdateOne) SetV4(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV4(s)
	return scruo
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV4(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV4(*s)
	}
	return scruo
}

// ClearV4 clears the value of the "v4" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV4() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV4()
	return scruo
}

// SetV5 sets the "v5" field.
func (scruo *SysCasbinRuleUpdateOne) SetV5(s string) *SysCasbinRuleUpdateOne {
	scruo.mutation.SetV5(s)
	return scruo
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (scruo *SysCasbinRuleUpdateOne) SetNillableV5(s *string) *SysCasbinRuleUpdateOne {
	if s != nil {
		scruo.SetV5(*s)
	}
	return scruo
}

// ClearV5 clears the value of the "v5" field.
func (scruo *SysCasbinRuleUpdateOne) ClearV5() *SysCasbinRuleUpdateOne {
	scruo.mutation.ClearV5()
	return scruo
}

// Mutation returns the SysCasbinRuleMutation object of the builder.
func (scruo *SysCasbinRuleUpdateOne) Mutation() *SysCasbinRuleMutation {
	return scruo.mutation
}

// Where appends a list predicates to the SysCasbinRuleUpdate builder.
func (scruo *SysCasbinRuleUpdateOne) Where(ps ...predicate.SysCasbinRule) *SysCasbinRuleUpdateOne {
	scruo.mutation.Where(ps...)
	return scruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scruo *SysCasbinRuleUpdateOne) Select(field string, fields ...string) *SysCasbinRuleUpdateOne {
	scruo.fields = append([]string{field}, fields...)
	return scruo
}

// Save executes the query and returns the updated SysCasbinRule entity.
func (scruo *SysCasbinRuleUpdateOne) Save(ctx context.Context) (*SysCasbinRule, error) {
	return withHooks(ctx, scruo.sqlSave, scruo.mutation, scruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scruo *SysCasbinRuleUpdateOne) SaveX(ctx context.Context) *SysCasbinRule {
	node, err := scruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scruo *SysCasbinRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := scruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scruo *SysCasbinRuleUpdateOne) ExecX(ctx context.Context) {
	if err := scruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scruo *SysCasbinRuleUpdateOne) sqlSave(ctx context.Context) (_node *SysCasbinRule, err error) {
	_spec := sqlgraph.NewUpdateSpec(syscasbinrule.Table, syscasbinrule.Columns, sqlgraph.NewFieldSpec(syscasbinrule.FieldID, field.TypeInt))
	id, ok := scruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysCasbinRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syscasbinrule.FieldID)
		for _, f := range fields {
			if !syscasbinrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != syscasbinrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scruo.mutation.Ptype(); ok {
		_spec.SetField(syscasbinrule.FieldPtype, field.TypeString, value)
	}
	if scruo.mutation.PtypeCleared() {
		_spec.ClearField(syscasbinrule.FieldPtype, field.TypeString)
	}
	if value, ok := scruo.mutation.V0(); ok {
		_spec.SetField(syscasbinrule.FieldV0, field.TypeString, value)
	}
	if scruo.mutation.V0Cleared() {
		_spec.ClearField(syscasbinrule.FieldV0, field.TypeString)
	}
	if value, ok := scruo.mutation.V1(); ok {
		_spec.SetField(syscasbinrule.FieldV1, field.TypeString, value)
	}
	if scruo.mutation.V1Cleared() {
		_spec.ClearField(syscasbinrule.FieldV1, field.TypeString)
	}
	if value, ok := scruo.mutation.V2(); ok {
		_spec.SetField(syscasbinrule.FieldV2, field.TypeString, value)
	}
	if scruo.mutation.V2Cleared() {
		_spec.ClearField(syscasbinrule.FieldV2, field.TypeString)
	}
	if value, ok := scruo.mutation.V3(); ok {
		_spec.SetField(syscasbinrule.FieldV3, field.TypeString, value)
	}
	if scruo.mutation.V3Cleared() {
		_spec.ClearField(syscasbinrule.FieldV3, field.TypeString)
	}
	if value, ok := scruo.mutation.V4(); ok {
		_spec.SetField(syscasbinrule.FieldV4, field.TypeString, value)
	}
	if scruo.mutation.V4Cleared() {
		_spec.ClearField(syscasbinrule.FieldV4, field.TypeString)
	}
	if value, ok := scruo.mutation.V5(); ok {
		_spec.SetField(syscasbinrule.FieldV5, field.TypeString, value)
	}
	if scruo.mutation.V5Cleared() {
		_spec.ClearField(syscasbinrule.FieldV5, field.TypeString)
	}
	_node = &SysCasbinRule{config: scruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syscasbinrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scruo.mutation.done = true
	return _node, nil
}
