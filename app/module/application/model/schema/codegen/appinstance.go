// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/appinstance"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/apppackage"
)

// 应用实例表
type AppInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,string"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"UpdateAt"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"deleteAt"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// DeleteBy holds the value of the "delete_by" field.
	DeleteBy int64 `json:"delete_by,omitempty"`
	// DelFlag holds the value of the "del_flag" field.
	DelFlag int8 `json:"-"`
	// InstanceName holds the value of the "instance_name" field.
	InstanceName string `json:"instanceName"`
	// InstanceCode holds the value of the "instance_code" field.
	InstanceCode string `json:"instanceCode"`
	// InstancePackage holds the value of the "instance_package" field.
	InstancePackage int64 `json:"instancePackage"`
	// 应用图标
	InstanceIcon string `json:"instanceIcon"`
	// 应用访问地址
	InstanceAddress string `json:"instanceAddress"`
	// InstanceType holds the value of the "instance_type" field.
	InstanceType int8 `json:"instanceType"`
	// 安装应用的用户
	Installer int64 `json:"installer,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppInstanceQuery when eager-loading is set.
	Edges                    AppInstanceEdges `json:"edges"`
	app_package_app_instance *int64
	selectValues             sql.SelectValues
}

// AppInstanceEdges holds the relations/edges for other nodes in the graph.
type AppInstanceEdges struct {
	// InstallFrom holds the value of the installFrom edge.
	InstallFrom *AppPackage `json:"installFrom,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstallFromOrErr returns the InstallFrom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppInstanceEdges) InstallFromOrErr() (*AppPackage, error) {
	if e.loadedTypes[0] {
		if e.InstallFrom == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: apppackage.Label}
		}
		return e.InstallFrom, nil
	}
	return nil, &NotLoadedError{edge: "installFrom"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appinstance.FieldID, appinstance.FieldStatus, appinstance.FieldCreatedBy, appinstance.FieldUpdatedBy, appinstance.FieldDeleteBy, appinstance.FieldDelFlag, appinstance.FieldInstancePackage, appinstance.FieldInstanceType, appinstance.FieldInstaller:
			values[i] = new(sql.NullInt64)
		case appinstance.FieldRemark, appinstance.FieldInstanceName, appinstance.FieldInstanceCode, appinstance.FieldInstanceIcon, appinstance.FieldInstanceAddress, appinstance.FieldDesc:
			values[i] = new(sql.NullString)
		case appinstance.FieldCreatedAt, appinstance.FieldUpdatedAt, appinstance.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		case appinstance.ForeignKeys[0]: // app_package_app_instance
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppInstance fields.
func (ai *AppInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appinstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int64(value.Int64)
		case appinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ai.CreatedAt = value.Time
			}
		case appinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ai.UpdatedAt = value.Time
			}
		case appinstance.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ai.DeleteAt = value.Time
			}
		case appinstance.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ai.Status = int8(value.Int64)
			}
		case appinstance.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ai.Remark = value.String
			}
		case appinstance.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ai.CreatedBy = value.Int64
			}
		case appinstance.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ai.UpdatedBy = value.Int64
			}
		case appinstance.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				ai.DeleteBy = value.Int64
			}
		case appinstance.FieldDelFlag:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field del_flag", values[i])
			} else if value.Valid {
				ai.DelFlag = int8(value.Int64)
			}
		case appinstance.FieldInstanceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_name", values[i])
			} else if value.Valid {
				ai.InstanceName = value.String
			}
		case appinstance.FieldInstanceCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_code", values[i])
			} else if value.Valid {
				ai.InstanceCode = value.String
			}
		case appinstance.FieldInstancePackage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field instance_package", values[i])
			} else if value.Valid {
				ai.InstancePackage = value.Int64
			}
		case appinstance.FieldInstanceIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_icon", values[i])
			} else if value.Valid {
				ai.InstanceIcon = value.String
			}
		case appinstance.FieldInstanceAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_address", values[i])
			} else if value.Valid {
				ai.InstanceAddress = value.String
			}
		case appinstance.FieldInstanceType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field instance_type", values[i])
			} else if value.Valid {
				ai.InstanceType = int8(value.Int64)
			}
		case appinstance.FieldInstaller:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field installer", values[i])
			} else if value.Valid {
				ai.Installer = value.Int64
			}
		case appinstance.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				ai.Desc = value.String
			}
		case appinstance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field app_package_app_instance", value)
			} else if value.Valid {
				ai.app_package_app_instance = new(int64)
				*ai.app_package_app_instance = int64(value.Int64)
			}
		default:
			ai.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppInstance.
// This includes values selected through modifiers, order, etc.
func (ai *AppInstance) Value(name string) (ent.Value, error) {
	return ai.selectValues.Get(name)
}

// QueryInstallFrom queries the "installFrom" edge of the AppInstance entity.
func (ai *AppInstance) QueryInstallFrom() *AppPackageQuery {
	return NewAppInstanceClient(ai.config).QueryInstallFrom(ai)
}

// Update returns a builder for updating this AppInstance.
// Note that you need to call AppInstance.Unwrap() before calling this method if this AppInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AppInstance) Update() *AppInstanceUpdateOne {
	return NewAppInstanceClient(ai.config).UpdateOne(ai)
}

// Unwrap unwraps the AppInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AppInstance) Unwrap() *AppInstance {
	_tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("codegen: AppInstance is not a transactional entity")
	}
	ai.config.driver = _tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AppInstance) String() string {
	var builder strings.Builder
	builder.WriteString("AppInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ai.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ai.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ai.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(ai.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ai.Status))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ai.Remark)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ai.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", ai.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", ai.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("del_flag=")
	builder.WriteString(fmt.Sprintf("%v", ai.DelFlag))
	builder.WriteString(", ")
	builder.WriteString("instance_name=")
	builder.WriteString(ai.InstanceName)
	builder.WriteString(", ")
	builder.WriteString("instance_code=")
	builder.WriteString(ai.InstanceCode)
	builder.WriteString(", ")
	builder.WriteString("instance_package=")
	builder.WriteString(fmt.Sprintf("%v", ai.InstancePackage))
	builder.WriteString(", ")
	builder.WriteString("instance_icon=")
	builder.WriteString(ai.InstanceIcon)
	builder.WriteString(", ")
	builder.WriteString("instance_address=")
	builder.WriteString(ai.InstanceAddress)
	builder.WriteString(", ")
	builder.WriteString("instance_type=")
	builder.WriteString(fmt.Sprintf("%v", ai.InstanceType))
	builder.WriteString(", ")
	builder.WriteString("installer=")
	builder.WriteString(fmt.Sprintf("%v", ai.Installer))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(ai.Desc)
	builder.WriteByte(')')
	return builder.String()
}

// AppInstances is a parsable slice of AppInstance.
type AppInstances []*AppInstance
