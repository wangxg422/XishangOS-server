// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/syspost"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
)

// SysPostCreate is the builder for creating a SysPost entity.
type SysPostCreate struct {
	config
	mutation *SysPostMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (spc *SysPostCreate) SetCreatedAt(t time.Time) *SysPostCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableCreatedAt(t *time.Time) *SysPostCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SysPostCreate) SetUpdatedAt(t time.Time) *SysPostCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableUpdatedAt(t *time.Time) *SysPostCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetDeleteAt sets the "delete_at" field.
func (spc *SysPostCreate) SetDeleteAt(t time.Time) *SysPostCreate {
	spc.mutation.SetDeleteAt(t)
	return spc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableDeleteAt(t *time.Time) *SysPostCreate {
	if t != nil {
		spc.SetDeleteAt(*t)
	}
	return spc
}

// SetCreatedBy sets the "created_by" field.
func (spc *SysPostCreate) SetCreatedBy(i int64) *SysPostCreate {
	spc.mutation.SetCreatedBy(i)
	return spc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableCreatedBy(i *int64) *SysPostCreate {
	if i != nil {
		spc.SetCreatedBy(*i)
	}
	return spc
}

// SetUpdatedBy sets the "updated_by" field.
func (spc *SysPostCreate) SetUpdatedBy(i int64) *SysPostCreate {
	spc.mutation.SetUpdatedBy(i)
	return spc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableUpdatedBy(i *int64) *SysPostCreate {
	if i != nil {
		spc.SetUpdatedBy(*i)
	}
	return spc
}

// SetDeleteBy sets the "delete_by" field.
func (spc *SysPostCreate) SetDeleteBy(i int64) *SysPostCreate {
	spc.mutation.SetDeleteBy(i)
	return spc
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableDeleteBy(i *int64) *SysPostCreate {
	if i != nil {
		spc.SetDeleteBy(*i)
	}
	return spc
}

// SetRemark sets the "remark" field.
func (spc *SysPostCreate) SetRemark(s string) *SysPostCreate {
	spc.mutation.SetRemark(s)
	return spc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableRemark(s *string) *SysPostCreate {
	if s != nil {
		spc.SetRemark(*s)
	}
	return spc
}

// SetStatus sets the "status" field.
func (spc *SysPostCreate) SetStatus(i int8) *SysPostCreate {
	spc.mutation.SetStatus(i)
	return spc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableStatus(i *int8) *SysPostCreate {
	if i != nil {
		spc.SetStatus(*i)
	}
	return spc
}

// SetSort sets the "sort" field.
func (spc *SysPostCreate) SetSort(i int) *SysPostCreate {
	spc.mutation.SetSort(i)
	return spc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableSort(i *int) *SysPostCreate {
	if i != nil {
		spc.SetSort(*i)
	}
	return spc
}

// SetDelFlag sets the "del_flag" field.
func (spc *SysPostCreate) SetDelFlag(i int8) *SysPostCreate {
	spc.mutation.SetDelFlag(i)
	return spc
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableDelFlag(i *int8) *SysPostCreate {
	if i != nil {
		spc.SetDelFlag(*i)
	}
	return spc
}

// SetPostCode sets the "post_code" field.
func (spc *SysPostCreate) SetPostCode(s string) *SysPostCreate {
	spc.mutation.SetPostCode(s)
	return spc
}

// SetNillablePostCode sets the "post_code" field if the given value is not nil.
func (spc *SysPostCreate) SetNillablePostCode(s *string) *SysPostCreate {
	if s != nil {
		spc.SetPostCode(*s)
	}
	return spc
}

// SetPostName sets the "post_name" field.
func (spc *SysPostCreate) SetPostName(s string) *SysPostCreate {
	spc.mutation.SetPostName(s)
	return spc
}

// SetNillablePostName sets the "post_name" field if the given value is not nil.
func (spc *SysPostCreate) SetNillablePostName(s *string) *SysPostCreate {
	if s != nil {
		spc.SetPostName(*s)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *SysPostCreate) SetID(i int64) *SysPostCreate {
	spc.mutation.SetID(i)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *SysPostCreate) SetNillableID(i *int64) *SysPostCreate {
	if i != nil {
		spc.SetID(*i)
	}
	return spc
}

// AddSysUserIDs adds the "sysUsers" edge to the SysUser entity by IDs.
func (spc *SysPostCreate) AddSysUserIDs(ids ...int64) *SysPostCreate {
	spc.mutation.AddSysUserIDs(ids...)
	return spc
}

// AddSysUsers adds the "sysUsers" edges to the SysUser entity.
func (spc *SysPostCreate) AddSysUsers(s ...*SysUser) *SysPostCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spc.AddSysUserIDs(ids...)
}

// Mutation returns the SysPostMutation object of the builder.
func (spc *SysPostCreate) Mutation() *SysPostMutation {
	return spc.mutation
}

// Save creates the SysPost in the database.
func (spc *SysPostCreate) Save(ctx context.Context) (*SysPost, error) {
	if err := spc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SysPostCreate) SaveX(ctx context.Context) *SysPost {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SysPostCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SysPostCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SysPostCreate) defaults() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		if syspost.DefaultCreatedAt == nil {
			return fmt.Errorf("codegen: uninitialized syspost.DefaultCreatedAt (forgotten import codegen/runtime?)")
		}
		v := syspost.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		if syspost.DefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized syspost.DefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := syspost.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	if _, ok := spc.mutation.DeleteAt(); !ok {
		if syspost.DefaultDeleteAt == nil {
			return fmt.Errorf("codegen: uninitialized syspost.DefaultDeleteAt (forgotten import codegen/runtime?)")
		}
		v := syspost.DefaultDeleteAt()
		spc.mutation.SetDeleteAt(v)
	}
	if _, ok := spc.mutation.Status(); !ok {
		v := syspost.DefaultStatus
		spc.mutation.SetStatus(v)
	}
	if _, ok := spc.mutation.ID(); !ok {
		if syspost.DefaultID == nil {
			return fmt.Errorf("codegen: uninitialized syspost.DefaultID (forgotten import codegen/runtime?)")
		}
		v := syspost.DefaultID()
		spc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spc *SysPostCreate) check() error {
	return nil
}

func (spc *SysPostCreate) sqlSave(ctx context.Context) (*SysPost, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SysPostCreate) createSpec() (*SysPost, *sqlgraph.CreateSpec) {
	var (
		_node = &SysPost{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(syspost.Table, sqlgraph.NewFieldSpec(syspost.FieldID, field.TypeInt64))
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.SetField(syspost.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.SetField(syspost.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.DeleteAt(); ok {
		_spec.SetField(syspost.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := spc.mutation.CreatedBy(); ok {
		_spec.SetField(syspost.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := spc.mutation.UpdatedBy(); ok {
		_spec.SetField(syspost.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := spc.mutation.DeleteBy(); ok {
		_spec.SetField(syspost.FieldDeleteBy, field.TypeInt64, value)
		_node.DeleteBy = value
	}
	if value, ok := spc.mutation.Remark(); ok {
		_spec.SetField(syspost.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := spc.mutation.Status(); ok {
		_spec.SetField(syspost.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := spc.mutation.Sort(); ok {
		_spec.SetField(syspost.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := spc.mutation.DelFlag(); ok {
		_spec.SetField(syspost.FieldDelFlag, field.TypeInt8, value)
		_node.DelFlag = value
	}
	if value, ok := spc.mutation.PostCode(); ok {
		_spec.SetField(syspost.FieldPostCode, field.TypeString, value)
		_node.PostCode = value
	}
	if value, ok := spc.mutation.PostName(); ok {
		_spec.SetField(syspost.FieldPostName, field.TypeString, value)
		_node.PostName = value
	}
	if nodes := spc.mutation.SysUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.SysUsersTable,
			Columns: syspost.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SysPostCreateBulk is the builder for creating many SysPost entities in bulk.
type SysPostCreateBulk struct {
	config
	err      error
	builders []*SysPostCreate
}

// Save creates the SysPost entities in the database.
func (spcb *SysPostCreateBulk) Save(ctx context.Context) ([]*SysPost, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SysPost, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SysPostCreateBulk) SaveX(ctx context.Context) []*SysPost {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SysPostCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SysPostCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
