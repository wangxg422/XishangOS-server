// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuseronline"
)

// SysUserOnlineDelete is the builder for deleting a SysUserOnline entity.
type SysUserOnlineDelete struct {
	config
	hooks    []Hook
	mutation *SysUserOnlineMutation
}

// Where appends a list predicates to the SysUserOnlineDelete builder.
func (suod *SysUserOnlineDelete) Where(ps ...predicate.SysUserOnline) *SysUserOnlineDelete {
	suod.mutation.Where(ps...)
	return suod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (suod *SysUserOnlineDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, suod.sqlExec, suod.mutation, suod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (suod *SysUserOnlineDelete) ExecX(ctx context.Context) int {
	n, err := suod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (suod *SysUserOnlineDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysuseronline.Table, sqlgraph.NewFieldSpec(sysuseronline.FieldID, field.TypeInt64))
	if ps := suod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, suod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	suod.mutation.done = true
	return affected, err
}

// SysUserOnlineDeleteOne is the builder for deleting a single SysUserOnline entity.
type SysUserOnlineDeleteOne struct {
	suod *SysUserOnlineDelete
}

// Where appends a list predicates to the SysUserOnlineDelete builder.
func (suodo *SysUserOnlineDeleteOne) Where(ps ...predicate.SysUserOnline) *SysUserOnlineDeleteOne {
	suodo.suod.mutation.Where(ps...)
	return suodo
}

// Exec executes the deletion query.
func (suodo *SysUserOnlineDeleteOne) Exec(ctx context.Context) error {
	n, err := suodo.suod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysuseronline.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (suodo *SysUserOnlineDeleteOne) ExecX(ctx context.Context) {
	if err := suodo.Exec(ctx); err != nil {
		panic(err)
	}
}
