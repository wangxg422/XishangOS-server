// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysmenu"
)

// SysMenuUpdate is the builder for updating SysMenu entities.
type SysMenuUpdate struct {
	config
	hooks    []Hook
	mutation *SysMenuMutation
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smu *SysMenuUpdate) Where(ps ...predicate.SysMenu) *SysMenuUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *SysMenuUpdate) SetUpdatedAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smu *SysMenuUpdate) ClearUpdatedAt() *SysMenuUpdate {
	smu.mutation.ClearUpdatedAt()
	return smu
}

// SetDeleteAt sets the "delete_at" field.
func (smu *SysMenuUpdate) SetDeleteAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetDeleteAt(t)
	return smu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (smu *SysMenuUpdate) ClearDeleteAt() *SysMenuUpdate {
	smu.mutation.ClearDeleteAt()
	return smu
}

// SetPid sets the "pid" field.
func (smu *SysMenuUpdate) SetPid(i int64) *SysMenuUpdate {
	smu.mutation.ResetPid()
	smu.mutation.SetPid(i)
	return smu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePid(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetPid(*i)
	}
	return smu
}

// AddPid adds i to the "pid" field.
func (smu *SysMenuUpdate) AddPid(i int64) *SysMenuUpdate {
	smu.mutation.AddPid(i)
	return smu
}

// SetName sets the "name" field.
func (smu *SysMenuUpdate) SetName(s string) *SysMenuUpdate {
	smu.mutation.SetName(s)
	return smu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableName(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetName(*s)
	}
	return smu
}

// ClearName clears the value of the "name" field.
func (smu *SysMenuUpdate) ClearName() *SysMenuUpdate {
	smu.mutation.ClearName()
	return smu
}

// SetTitle sets the "title" field.
func (smu *SysMenuUpdate) SetTitle(s string) *SysMenuUpdate {
	smu.mutation.SetTitle(s)
	return smu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableTitle(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetTitle(*s)
	}
	return smu
}

// ClearTitle clears the value of the "title" field.
func (smu *SysMenuUpdate) ClearTitle() *SysMenuUpdate {
	smu.mutation.ClearTitle()
	return smu
}

// SetIcon sets the "icon" field.
func (smu *SysMenuUpdate) SetIcon(s string) *SysMenuUpdate {
	smu.mutation.SetIcon(s)
	return smu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIcon(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetIcon(*s)
	}
	return smu
}

// ClearIcon clears the value of the "icon" field.
func (smu *SysMenuUpdate) ClearIcon() *SysMenuUpdate {
	smu.mutation.ClearIcon()
	return smu
}

// SetCondition sets the "condition" field.
func (smu *SysMenuUpdate) SetCondition(s string) *SysMenuUpdate {
	smu.mutation.SetCondition(s)
	return smu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableCondition(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetCondition(*s)
	}
	return smu
}

// ClearCondition clears the value of the "condition" field.
func (smu *SysMenuUpdate) ClearCondition() *SysMenuUpdate {
	smu.mutation.ClearCondition()
	return smu
}

// SetMenuType sets the "menu_type" field.
func (smu *SysMenuUpdate) SetMenuType(i int8) *SysMenuUpdate {
	smu.mutation.ResetMenuType()
	smu.mutation.SetMenuType(i)
	return smu
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMenuType(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetMenuType(*i)
	}
	return smu
}

// AddMenuType adds i to the "menu_type" field.
func (smu *SysMenuUpdate) AddMenuType(i int8) *SysMenuUpdate {
	smu.mutation.AddMenuType(i)
	return smu
}

// ClearMenuType clears the value of the "menu_type" field.
func (smu *SysMenuUpdate) ClearMenuType() *SysMenuUpdate {
	smu.mutation.ClearMenuType()
	return smu
}

// SetWeigh sets the "weigh" field.
func (smu *SysMenuUpdate) SetWeigh(i int64) *SysMenuUpdate {
	smu.mutation.ResetWeigh()
	smu.mutation.SetWeigh(i)
	return smu
}

// SetNillableWeigh sets the "weigh" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableWeigh(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetWeigh(*i)
	}
	return smu
}

// AddWeigh adds i to the "weigh" field.
func (smu *SysMenuUpdate) AddWeigh(i int64) *SysMenuUpdate {
	smu.mutation.AddWeigh(i)
	return smu
}

// ClearWeigh clears the value of the "weigh" field.
func (smu *SysMenuUpdate) ClearWeigh() *SysMenuUpdate {
	smu.mutation.ClearWeigh()
	return smu
}

// SetIsHide sets the "is_hide" field.
func (smu *SysMenuUpdate) SetIsHide(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsHide()
	smu.mutation.SetIsHide(i)
	return smu
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsHide(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsHide(*i)
	}
	return smu
}

// AddIsHide adds i to the "is_hide" field.
func (smu *SysMenuUpdate) AddIsHide(i int8) *SysMenuUpdate {
	smu.mutation.AddIsHide(i)
	return smu
}

// ClearIsHide clears the value of the "is_hide" field.
func (smu *SysMenuUpdate) ClearIsHide() *SysMenuUpdate {
	smu.mutation.ClearIsHide()
	return smu
}

// SetPath sets the "path" field.
func (smu *SysMenuUpdate) SetPath(s string) *SysMenuUpdate {
	smu.mutation.SetPath(s)
	return smu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePath(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetPath(*s)
	}
	return smu
}

// ClearPath clears the value of the "path" field.
func (smu *SysMenuUpdate) ClearPath() *SysMenuUpdate {
	smu.mutation.ClearPath()
	return smu
}

// SetComponent sets the "component" field.
func (smu *SysMenuUpdate) SetComponent(s string) *SysMenuUpdate {
	smu.mutation.SetComponent(s)
	return smu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableComponent(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetComponent(*s)
	}
	return smu
}

// ClearComponent clears the value of the "component" field.
func (smu *SysMenuUpdate) ClearComponent() *SysMenuUpdate {
	smu.mutation.ClearComponent()
	return smu
}

// SetIsLink sets the "is_link" field.
func (smu *SysMenuUpdate) SetIsLink(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsLink()
	smu.mutation.SetIsLink(i)
	return smu
}

// SetNillableIsLink sets the "is_link" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsLink(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsLink(*i)
	}
	return smu
}

// AddIsLink adds i to the "is_link" field.
func (smu *SysMenuUpdate) AddIsLink(i int8) *SysMenuUpdate {
	smu.mutation.AddIsLink(i)
	return smu
}

// ClearIsLink clears the value of the "is_link" field.
func (smu *SysMenuUpdate) ClearIsLink() *SysMenuUpdate {
	smu.mutation.ClearIsLink()
	return smu
}

// SetModuleType sets the "module_type" field.
func (smu *SysMenuUpdate) SetModuleType(s string) *SysMenuUpdate {
	smu.mutation.SetModuleType(s)
	return smu
}

// SetNillableModuleType sets the "module_type" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableModuleType(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetModuleType(*s)
	}
	return smu
}

// ClearModuleType clears the value of the "module_type" field.
func (smu *SysMenuUpdate) ClearModuleType() *SysMenuUpdate {
	smu.mutation.ClearModuleType()
	return smu
}

// SetModelID sets the "model_id" field.
func (smu *SysMenuUpdate) SetModelID(i int64) *SysMenuUpdate {
	smu.mutation.ResetModelID()
	smu.mutation.SetModelID(i)
	return smu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableModelID(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetModelID(*i)
	}
	return smu
}

// AddModelID adds i to the "model_id" field.
func (smu *SysMenuUpdate) AddModelID(i int64) *SysMenuUpdate {
	smu.mutation.AddModelID(i)
	return smu
}

// ClearModelID clears the value of the "model_id" field.
func (smu *SysMenuUpdate) ClearModelID() *SysMenuUpdate {
	smu.mutation.ClearModelID()
	return smu
}

// SetIsIframe sets the "is_iframe" field.
func (smu *SysMenuUpdate) SetIsIframe(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsIframe()
	smu.mutation.SetIsIframe(i)
	return smu
}

// SetNillableIsIframe sets the "is_iframe" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsIframe(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsIframe(*i)
	}
	return smu
}

// AddIsIframe adds i to the "is_iframe" field.
func (smu *SysMenuUpdate) AddIsIframe(i int8) *SysMenuUpdate {
	smu.mutation.AddIsIframe(i)
	return smu
}

// ClearIsIframe clears the value of the "is_iframe" field.
func (smu *SysMenuUpdate) ClearIsIframe() *SysMenuUpdate {
	smu.mutation.ClearIsIframe()
	return smu
}

// SetIsCached sets the "is_cached" field.
func (smu *SysMenuUpdate) SetIsCached(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsCached()
	smu.mutation.SetIsCached(i)
	return smu
}

// SetNillableIsCached sets the "is_cached" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsCached(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsCached(*i)
	}
	return smu
}

// AddIsCached adds i to the "is_cached" field.
func (smu *SysMenuUpdate) AddIsCached(i int8) *SysMenuUpdate {
	smu.mutation.AddIsCached(i)
	return smu
}

// ClearIsCached clears the value of the "is_cached" field.
func (smu *SysMenuUpdate) ClearIsCached() *SysMenuUpdate {
	smu.mutation.ClearIsCached()
	return smu
}

// SetRedirect sets the "redirect" field.
func (smu *SysMenuUpdate) SetRedirect(s string) *SysMenuUpdate {
	smu.mutation.SetRedirect(s)
	return smu
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableRedirect(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetRedirect(*s)
	}
	return smu
}

// ClearRedirect clears the value of the "redirect" field.
func (smu *SysMenuUpdate) ClearRedirect() *SysMenuUpdate {
	smu.mutation.ClearRedirect()
	return smu
}

// SetIsAffix sets the "is_affix" field.
func (smu *SysMenuUpdate) SetIsAffix(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsAffix()
	smu.mutation.SetIsAffix(i)
	return smu
}

// SetNillableIsAffix sets the "is_affix" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsAffix(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsAffix(*i)
	}
	return smu
}

// AddIsAffix adds i to the "is_affix" field.
func (smu *SysMenuUpdate) AddIsAffix(i int8) *SysMenuUpdate {
	smu.mutation.AddIsAffix(i)
	return smu
}

// ClearIsAffix clears the value of the "is_affix" field.
func (smu *SysMenuUpdate) ClearIsAffix() *SysMenuUpdate {
	smu.mutation.ClearIsAffix()
	return smu
}

// SetLinkURL sets the "link_url" field.
func (smu *SysMenuUpdate) SetLinkURL(s string) *SysMenuUpdate {
	smu.mutation.SetLinkURL(s)
	return smu
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableLinkURL(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetLinkURL(*s)
	}
	return smu
}

// ClearLinkURL clears the value of the "link_url" field.
func (smu *SysMenuUpdate) ClearLinkURL() *SysMenuUpdate {
	smu.mutation.ClearLinkURL()
	return smu
}

// SetRemark sets the "remark" field.
func (smu *SysMenuUpdate) SetRemark(s string) *SysMenuUpdate {
	smu.mutation.SetRemark(s)
	return smu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableRemark(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetRemark(*s)
	}
	return smu
}

// ClearRemark clears the value of the "remark" field.
func (smu *SysMenuUpdate) ClearRemark() *SysMenuUpdate {
	smu.mutation.ClearRemark()
	return smu
}

// Mutation returns the SysMenuMutation object of the builder.
func (smu *SysMenuUpdate) Mutation() *SysMenuMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SysMenuUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SysMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SysMenuUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SysMenuUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SysMenuUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok && !smu.mutation.UpdatedAtCleared() {
		v := sysmenu.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
	if _, ok := smu.mutation.DeleteAt(); !ok && !smu.mutation.DeleteAtCleared() {
		v := sysmenu.UpdateDefaultDeleteAt()
		smu.mutation.SetDeleteAt(v)
	}
}

func (smu *SysMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysmenu.Table, sysmenu.Columns, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if smu.mutation.CreatedAtCleared() {
		_spec.ClearField(sysmenu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if smu.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysmenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.DeleteAt(); ok {
		_spec.SetField(sysmenu.FieldDeleteAt, field.TypeTime, value)
	}
	if smu.mutation.DeleteAtCleared() {
		_spec.ClearField(sysmenu.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := smu.mutation.Pid(); ok {
		_spec.SetField(sysmenu.FieldPid, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedPid(); ok {
		_spec.AddField(sysmenu.FieldPid, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.Name(); ok {
		_spec.SetField(sysmenu.FieldName, field.TypeString, value)
	}
	if smu.mutation.NameCleared() {
		_spec.ClearField(sysmenu.FieldName, field.TypeString)
	}
	if value, ok := smu.mutation.Title(); ok {
		_spec.SetField(sysmenu.FieldTitle, field.TypeString, value)
	}
	if smu.mutation.TitleCleared() {
		_spec.ClearField(sysmenu.FieldTitle, field.TypeString)
	}
	if value, ok := smu.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
	}
	if smu.mutation.IconCleared() {
		_spec.ClearField(sysmenu.FieldIcon, field.TypeString)
	}
	if value, ok := smu.mutation.Condition(); ok {
		_spec.SetField(sysmenu.FieldCondition, field.TypeString, value)
	}
	if smu.mutation.ConditionCleared() {
		_spec.ClearField(sysmenu.FieldCondition, field.TypeString)
	}
	if value, ok := smu.mutation.MenuType(); ok {
		_spec.SetField(sysmenu.FieldMenuType, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedMenuType(); ok {
		_spec.AddField(sysmenu.FieldMenuType, field.TypeInt8, value)
	}
	if smu.mutation.MenuTypeCleared() {
		_spec.ClearField(sysmenu.FieldMenuType, field.TypeInt8)
	}
	if value, ok := smu.mutation.Weigh(); ok {
		_spec.SetField(sysmenu.FieldWeigh, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedWeigh(); ok {
		_spec.AddField(sysmenu.FieldWeigh, field.TypeInt64, value)
	}
	if smu.mutation.WeighCleared() {
		_spec.ClearField(sysmenu.FieldWeigh, field.TypeInt64)
	}
	if value, ok := smu.mutation.IsHide(); ok {
		_spec.SetField(sysmenu.FieldIsHide, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsHide(); ok {
		_spec.AddField(sysmenu.FieldIsHide, field.TypeInt8, value)
	}
	if smu.mutation.IsHideCleared() {
		_spec.ClearField(sysmenu.FieldIsHide, field.TypeInt8)
	}
	if value, ok := smu.mutation.Path(); ok {
		_spec.SetField(sysmenu.FieldPath, field.TypeString, value)
	}
	if smu.mutation.PathCleared() {
		_spec.ClearField(sysmenu.FieldPath, field.TypeString)
	}
	if value, ok := smu.mutation.Component(); ok {
		_spec.SetField(sysmenu.FieldComponent, field.TypeString, value)
	}
	if smu.mutation.ComponentCleared() {
		_spec.ClearField(sysmenu.FieldComponent, field.TypeString)
	}
	if value, ok := smu.mutation.IsLink(); ok {
		_spec.SetField(sysmenu.FieldIsLink, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsLink(); ok {
		_spec.AddField(sysmenu.FieldIsLink, field.TypeInt8, value)
	}
	if smu.mutation.IsLinkCleared() {
		_spec.ClearField(sysmenu.FieldIsLink, field.TypeInt8)
	}
	if value, ok := smu.mutation.ModuleType(); ok {
		_spec.SetField(sysmenu.FieldModuleType, field.TypeString, value)
	}
	if smu.mutation.ModuleTypeCleared() {
		_spec.ClearField(sysmenu.FieldModuleType, field.TypeString)
	}
	if value, ok := smu.mutation.ModelID(); ok {
		_spec.SetField(sysmenu.FieldModelID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedModelID(); ok {
		_spec.AddField(sysmenu.FieldModelID, field.TypeInt64, value)
	}
	if smu.mutation.ModelIDCleared() {
		_spec.ClearField(sysmenu.FieldModelID, field.TypeInt64)
	}
	if value, ok := smu.mutation.IsIframe(); ok {
		_spec.SetField(sysmenu.FieldIsIframe, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsIframe(); ok {
		_spec.AddField(sysmenu.FieldIsIframe, field.TypeInt8, value)
	}
	if smu.mutation.IsIframeCleared() {
		_spec.ClearField(sysmenu.FieldIsIframe, field.TypeInt8)
	}
	if value, ok := smu.mutation.IsCached(); ok {
		_spec.SetField(sysmenu.FieldIsCached, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsCached(); ok {
		_spec.AddField(sysmenu.FieldIsCached, field.TypeInt8, value)
	}
	if smu.mutation.IsCachedCleared() {
		_spec.ClearField(sysmenu.FieldIsCached, field.TypeInt8)
	}
	if value, ok := smu.mutation.Redirect(); ok {
		_spec.SetField(sysmenu.FieldRedirect, field.TypeString, value)
	}
	if smu.mutation.RedirectCleared() {
		_spec.ClearField(sysmenu.FieldRedirect, field.TypeString)
	}
	if value, ok := smu.mutation.IsAffix(); ok {
		_spec.SetField(sysmenu.FieldIsAffix, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsAffix(); ok {
		_spec.AddField(sysmenu.FieldIsAffix, field.TypeInt8, value)
	}
	if smu.mutation.IsAffixCleared() {
		_spec.ClearField(sysmenu.FieldIsAffix, field.TypeInt8)
	}
	if value, ok := smu.mutation.LinkURL(); ok {
		_spec.SetField(sysmenu.FieldLinkURL, field.TypeString, value)
	}
	if smu.mutation.LinkURLCleared() {
		_spec.ClearField(sysmenu.FieldLinkURL, field.TypeString)
	}
	if value, ok := smu.mutation.Remark(); ok {
		_spec.SetField(sysmenu.FieldRemark, field.TypeString, value)
	}
	if smu.mutation.RemarkCleared() {
		_spec.ClearField(sysmenu.FieldRemark, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SysMenuUpdateOne is the builder for updating a single SysMenu entity.
type SysMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysMenuMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *SysMenuUpdateOne) SetUpdatedAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smuo *SysMenuUpdateOne) ClearUpdatedAt() *SysMenuUpdateOne {
	smuo.mutation.ClearUpdatedAt()
	return smuo
}

// SetDeleteAt sets the "delete_at" field.
func (smuo *SysMenuUpdateOne) SetDeleteAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetDeleteAt(t)
	return smuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (smuo *SysMenuUpdateOne) ClearDeleteAt() *SysMenuUpdateOne {
	smuo.mutation.ClearDeleteAt()
	return smuo
}

// SetPid sets the "pid" field.
func (smuo *SysMenuUpdateOne) SetPid(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetPid()
	smuo.mutation.SetPid(i)
	return smuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePid(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetPid(*i)
	}
	return smuo
}

// AddPid adds i to the "pid" field.
func (smuo *SysMenuUpdateOne) AddPid(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddPid(i)
	return smuo
}

// SetName sets the "name" field.
func (smuo *SysMenuUpdateOne) SetName(s string) *SysMenuUpdateOne {
	smuo.mutation.SetName(s)
	return smuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableName(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetName(*s)
	}
	return smuo
}

// ClearName clears the value of the "name" field.
func (smuo *SysMenuUpdateOne) ClearName() *SysMenuUpdateOne {
	smuo.mutation.ClearName()
	return smuo
}

// SetTitle sets the "title" field.
func (smuo *SysMenuUpdateOne) SetTitle(s string) *SysMenuUpdateOne {
	smuo.mutation.SetTitle(s)
	return smuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableTitle(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetTitle(*s)
	}
	return smuo
}

// ClearTitle clears the value of the "title" field.
func (smuo *SysMenuUpdateOne) ClearTitle() *SysMenuUpdateOne {
	smuo.mutation.ClearTitle()
	return smuo
}

// SetIcon sets the "icon" field.
func (smuo *SysMenuUpdateOne) SetIcon(s string) *SysMenuUpdateOne {
	smuo.mutation.SetIcon(s)
	return smuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIcon(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetIcon(*s)
	}
	return smuo
}

// ClearIcon clears the value of the "icon" field.
func (smuo *SysMenuUpdateOne) ClearIcon() *SysMenuUpdateOne {
	smuo.mutation.ClearIcon()
	return smuo
}

// SetCondition sets the "condition" field.
func (smuo *SysMenuUpdateOne) SetCondition(s string) *SysMenuUpdateOne {
	smuo.mutation.SetCondition(s)
	return smuo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableCondition(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetCondition(*s)
	}
	return smuo
}

// ClearCondition clears the value of the "condition" field.
func (smuo *SysMenuUpdateOne) ClearCondition() *SysMenuUpdateOne {
	smuo.mutation.ClearCondition()
	return smuo
}

// SetMenuType sets the "menu_type" field.
func (smuo *SysMenuUpdateOne) SetMenuType(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetMenuType()
	smuo.mutation.SetMenuType(i)
	return smuo
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMenuType(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetMenuType(*i)
	}
	return smuo
}

// AddMenuType adds i to the "menu_type" field.
func (smuo *SysMenuUpdateOne) AddMenuType(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddMenuType(i)
	return smuo
}

// ClearMenuType clears the value of the "menu_type" field.
func (smuo *SysMenuUpdateOne) ClearMenuType() *SysMenuUpdateOne {
	smuo.mutation.ClearMenuType()
	return smuo
}

// SetWeigh sets the "weigh" field.
func (smuo *SysMenuUpdateOne) SetWeigh(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetWeigh()
	smuo.mutation.SetWeigh(i)
	return smuo
}

// SetNillableWeigh sets the "weigh" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableWeigh(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetWeigh(*i)
	}
	return smuo
}

// AddWeigh adds i to the "weigh" field.
func (smuo *SysMenuUpdateOne) AddWeigh(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddWeigh(i)
	return smuo
}

// ClearWeigh clears the value of the "weigh" field.
func (smuo *SysMenuUpdateOne) ClearWeigh() *SysMenuUpdateOne {
	smuo.mutation.ClearWeigh()
	return smuo
}

// SetIsHide sets the "is_hide" field.
func (smuo *SysMenuUpdateOne) SetIsHide(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsHide()
	smuo.mutation.SetIsHide(i)
	return smuo
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsHide(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsHide(*i)
	}
	return smuo
}

// AddIsHide adds i to the "is_hide" field.
func (smuo *SysMenuUpdateOne) AddIsHide(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsHide(i)
	return smuo
}

// ClearIsHide clears the value of the "is_hide" field.
func (smuo *SysMenuUpdateOne) ClearIsHide() *SysMenuUpdateOne {
	smuo.mutation.ClearIsHide()
	return smuo
}

// SetPath sets the "path" field.
func (smuo *SysMenuUpdateOne) SetPath(s string) *SysMenuUpdateOne {
	smuo.mutation.SetPath(s)
	return smuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePath(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetPath(*s)
	}
	return smuo
}

// ClearPath clears the value of the "path" field.
func (smuo *SysMenuUpdateOne) ClearPath() *SysMenuUpdateOne {
	smuo.mutation.ClearPath()
	return smuo
}

// SetComponent sets the "component" field.
func (smuo *SysMenuUpdateOne) SetComponent(s string) *SysMenuUpdateOne {
	smuo.mutation.SetComponent(s)
	return smuo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableComponent(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetComponent(*s)
	}
	return smuo
}

// ClearComponent clears the value of the "component" field.
func (smuo *SysMenuUpdateOne) ClearComponent() *SysMenuUpdateOne {
	smuo.mutation.ClearComponent()
	return smuo
}

// SetIsLink sets the "is_link" field.
func (smuo *SysMenuUpdateOne) SetIsLink(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsLink()
	smuo.mutation.SetIsLink(i)
	return smuo
}

// SetNillableIsLink sets the "is_link" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsLink(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsLink(*i)
	}
	return smuo
}

// AddIsLink adds i to the "is_link" field.
func (smuo *SysMenuUpdateOne) AddIsLink(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsLink(i)
	return smuo
}

// ClearIsLink clears the value of the "is_link" field.
func (smuo *SysMenuUpdateOne) ClearIsLink() *SysMenuUpdateOne {
	smuo.mutation.ClearIsLink()
	return smuo
}

// SetModuleType sets the "module_type" field.
func (smuo *SysMenuUpdateOne) SetModuleType(s string) *SysMenuUpdateOne {
	smuo.mutation.SetModuleType(s)
	return smuo
}

// SetNillableModuleType sets the "module_type" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableModuleType(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetModuleType(*s)
	}
	return smuo
}

// ClearModuleType clears the value of the "module_type" field.
func (smuo *SysMenuUpdateOne) ClearModuleType() *SysMenuUpdateOne {
	smuo.mutation.ClearModuleType()
	return smuo
}

// SetModelID sets the "model_id" field.
func (smuo *SysMenuUpdateOne) SetModelID(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetModelID()
	smuo.mutation.SetModelID(i)
	return smuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableModelID(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetModelID(*i)
	}
	return smuo
}

// AddModelID adds i to the "model_id" field.
func (smuo *SysMenuUpdateOne) AddModelID(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddModelID(i)
	return smuo
}

// ClearModelID clears the value of the "model_id" field.
func (smuo *SysMenuUpdateOne) ClearModelID() *SysMenuUpdateOne {
	smuo.mutation.ClearModelID()
	return smuo
}

// SetIsIframe sets the "is_iframe" field.
func (smuo *SysMenuUpdateOne) SetIsIframe(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsIframe()
	smuo.mutation.SetIsIframe(i)
	return smuo
}

// SetNillableIsIframe sets the "is_iframe" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsIframe(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsIframe(*i)
	}
	return smuo
}

// AddIsIframe adds i to the "is_iframe" field.
func (smuo *SysMenuUpdateOne) AddIsIframe(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsIframe(i)
	return smuo
}

// ClearIsIframe clears the value of the "is_iframe" field.
func (smuo *SysMenuUpdateOne) ClearIsIframe() *SysMenuUpdateOne {
	smuo.mutation.ClearIsIframe()
	return smuo
}

// SetIsCached sets the "is_cached" field.
func (smuo *SysMenuUpdateOne) SetIsCached(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsCached()
	smuo.mutation.SetIsCached(i)
	return smuo
}

// SetNillableIsCached sets the "is_cached" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsCached(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsCached(*i)
	}
	return smuo
}

// AddIsCached adds i to the "is_cached" field.
func (smuo *SysMenuUpdateOne) AddIsCached(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsCached(i)
	return smuo
}

// ClearIsCached clears the value of the "is_cached" field.
func (smuo *SysMenuUpdateOne) ClearIsCached() *SysMenuUpdateOne {
	smuo.mutation.ClearIsCached()
	return smuo
}

// SetRedirect sets the "redirect" field.
func (smuo *SysMenuUpdateOne) SetRedirect(s string) *SysMenuUpdateOne {
	smuo.mutation.SetRedirect(s)
	return smuo
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableRedirect(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetRedirect(*s)
	}
	return smuo
}

// ClearRedirect clears the value of the "redirect" field.
func (smuo *SysMenuUpdateOne) ClearRedirect() *SysMenuUpdateOne {
	smuo.mutation.ClearRedirect()
	return smuo
}

// SetIsAffix sets the "is_affix" field.
func (smuo *SysMenuUpdateOne) SetIsAffix(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsAffix()
	smuo.mutation.SetIsAffix(i)
	return smuo
}

// SetNillableIsAffix sets the "is_affix" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsAffix(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsAffix(*i)
	}
	return smuo
}

// AddIsAffix adds i to the "is_affix" field.
func (smuo *SysMenuUpdateOne) AddIsAffix(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsAffix(i)
	return smuo
}

// ClearIsAffix clears the value of the "is_affix" field.
func (smuo *SysMenuUpdateOne) ClearIsAffix() *SysMenuUpdateOne {
	smuo.mutation.ClearIsAffix()
	return smuo
}

// SetLinkURL sets the "link_url" field.
func (smuo *SysMenuUpdateOne) SetLinkURL(s string) *SysMenuUpdateOne {
	smuo.mutation.SetLinkURL(s)
	return smuo
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableLinkURL(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetLinkURL(*s)
	}
	return smuo
}

// ClearLinkURL clears the value of the "link_url" field.
func (smuo *SysMenuUpdateOne) ClearLinkURL() *SysMenuUpdateOne {
	smuo.mutation.ClearLinkURL()
	return smuo
}

// SetRemark sets the "remark" field.
func (smuo *SysMenuUpdateOne) SetRemark(s string) *SysMenuUpdateOne {
	smuo.mutation.SetRemark(s)
	return smuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableRemark(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetRemark(*s)
	}
	return smuo
}

// ClearRemark clears the value of the "remark" field.
func (smuo *SysMenuUpdateOne) ClearRemark() *SysMenuUpdateOne {
	smuo.mutation.ClearRemark()
	return smuo
}

// Mutation returns the SysMenuMutation object of the builder.
func (smuo *SysMenuUpdateOne) Mutation() *SysMenuMutation {
	return smuo.mutation
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smuo *SysMenuUpdateOne) Where(ps ...predicate.SysMenu) *SysMenuUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SysMenuUpdateOne) Select(field string, fields ...string) *SysMenuUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SysMenu entity.
func (smuo *SysMenuUpdateOne) Save(ctx context.Context) (*SysMenu, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) SaveX(ctx context.Context) *SysMenu {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SysMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SysMenuUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok && !smuo.mutation.UpdatedAtCleared() {
		v := sysmenu.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := smuo.mutation.DeleteAt(); !ok && !smuo.mutation.DeleteAtCleared() {
		v := sysmenu.UpdateDefaultDeleteAt()
		smuo.mutation.SetDeleteAt(v)
	}
}

func (smuo *SysMenuUpdateOne) sqlSave(ctx context.Context) (_node *SysMenu, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysmenu.Table, sysmenu.Columns, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenu.FieldID)
		for _, f := range fields {
			if !sysmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if smuo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysmenu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if smuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysmenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.DeleteAt(); ok {
		_spec.SetField(sysmenu.FieldDeleteAt, field.TypeTime, value)
	}
	if smuo.mutation.DeleteAtCleared() {
		_spec.ClearField(sysmenu.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.Pid(); ok {
		_spec.SetField(sysmenu.FieldPid, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedPid(); ok {
		_spec.AddField(sysmenu.FieldPid, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.Name(); ok {
		_spec.SetField(sysmenu.FieldName, field.TypeString, value)
	}
	if smuo.mutation.NameCleared() {
		_spec.ClearField(sysmenu.FieldName, field.TypeString)
	}
	if value, ok := smuo.mutation.Title(); ok {
		_spec.SetField(sysmenu.FieldTitle, field.TypeString, value)
	}
	if smuo.mutation.TitleCleared() {
		_spec.ClearField(sysmenu.FieldTitle, field.TypeString)
	}
	if value, ok := smuo.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
	}
	if smuo.mutation.IconCleared() {
		_spec.ClearField(sysmenu.FieldIcon, field.TypeString)
	}
	if value, ok := smuo.mutation.Condition(); ok {
		_spec.SetField(sysmenu.FieldCondition, field.TypeString, value)
	}
	if smuo.mutation.ConditionCleared() {
		_spec.ClearField(sysmenu.FieldCondition, field.TypeString)
	}
	if value, ok := smuo.mutation.MenuType(); ok {
		_spec.SetField(sysmenu.FieldMenuType, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedMenuType(); ok {
		_spec.AddField(sysmenu.FieldMenuType, field.TypeInt8, value)
	}
	if smuo.mutation.MenuTypeCleared() {
		_spec.ClearField(sysmenu.FieldMenuType, field.TypeInt8)
	}
	if value, ok := smuo.mutation.Weigh(); ok {
		_spec.SetField(sysmenu.FieldWeigh, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedWeigh(); ok {
		_spec.AddField(sysmenu.FieldWeigh, field.TypeInt64, value)
	}
	if smuo.mutation.WeighCleared() {
		_spec.ClearField(sysmenu.FieldWeigh, field.TypeInt64)
	}
	if value, ok := smuo.mutation.IsHide(); ok {
		_spec.SetField(sysmenu.FieldIsHide, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsHide(); ok {
		_spec.AddField(sysmenu.FieldIsHide, field.TypeInt8, value)
	}
	if smuo.mutation.IsHideCleared() {
		_spec.ClearField(sysmenu.FieldIsHide, field.TypeInt8)
	}
	if value, ok := smuo.mutation.Path(); ok {
		_spec.SetField(sysmenu.FieldPath, field.TypeString, value)
	}
	if smuo.mutation.PathCleared() {
		_spec.ClearField(sysmenu.FieldPath, field.TypeString)
	}
	if value, ok := smuo.mutation.Component(); ok {
		_spec.SetField(sysmenu.FieldComponent, field.TypeString, value)
	}
	if smuo.mutation.ComponentCleared() {
		_spec.ClearField(sysmenu.FieldComponent, field.TypeString)
	}
	if value, ok := smuo.mutation.IsLink(); ok {
		_spec.SetField(sysmenu.FieldIsLink, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsLink(); ok {
		_spec.AddField(sysmenu.FieldIsLink, field.TypeInt8, value)
	}
	if smuo.mutation.IsLinkCleared() {
		_spec.ClearField(sysmenu.FieldIsLink, field.TypeInt8)
	}
	if value, ok := smuo.mutation.ModuleType(); ok {
		_spec.SetField(sysmenu.FieldModuleType, field.TypeString, value)
	}
	if smuo.mutation.ModuleTypeCleared() {
		_spec.ClearField(sysmenu.FieldModuleType, field.TypeString)
	}
	if value, ok := smuo.mutation.ModelID(); ok {
		_spec.SetField(sysmenu.FieldModelID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedModelID(); ok {
		_spec.AddField(sysmenu.FieldModelID, field.TypeInt64, value)
	}
	if smuo.mutation.ModelIDCleared() {
		_spec.ClearField(sysmenu.FieldModelID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.IsIframe(); ok {
		_spec.SetField(sysmenu.FieldIsIframe, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsIframe(); ok {
		_spec.AddField(sysmenu.FieldIsIframe, field.TypeInt8, value)
	}
	if smuo.mutation.IsIframeCleared() {
		_spec.ClearField(sysmenu.FieldIsIframe, field.TypeInt8)
	}
	if value, ok := smuo.mutation.IsCached(); ok {
		_spec.SetField(sysmenu.FieldIsCached, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsCached(); ok {
		_spec.AddField(sysmenu.FieldIsCached, field.TypeInt8, value)
	}
	if smuo.mutation.IsCachedCleared() {
		_spec.ClearField(sysmenu.FieldIsCached, field.TypeInt8)
	}
	if value, ok := smuo.mutation.Redirect(); ok {
		_spec.SetField(sysmenu.FieldRedirect, field.TypeString, value)
	}
	if smuo.mutation.RedirectCleared() {
		_spec.ClearField(sysmenu.FieldRedirect, field.TypeString)
	}
	if value, ok := smuo.mutation.IsAffix(); ok {
		_spec.SetField(sysmenu.FieldIsAffix, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsAffix(); ok {
		_spec.AddField(sysmenu.FieldIsAffix, field.TypeInt8, value)
	}
	if smuo.mutation.IsAffixCleared() {
		_spec.ClearField(sysmenu.FieldIsAffix, field.TypeInt8)
	}
	if value, ok := smuo.mutation.LinkURL(); ok {
		_spec.SetField(sysmenu.FieldLinkURL, field.TypeString, value)
	}
	if smuo.mutation.LinkURLCleared() {
		_spec.ClearField(sysmenu.FieldLinkURL, field.TypeString)
	}
	if value, ok := smuo.mutation.Remark(); ok {
		_spec.SetField(sysmenu.FieldRemark, field.TypeString, value)
	}
	if smuo.mutation.RemarkCleared() {
		_spec.ClearField(sysmenu.FieldRemark, field.TypeString)
	}
	_node = &SysMenu{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
