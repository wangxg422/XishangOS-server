// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdicttype"
)

// 系统字典类型表
type SysDictType struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,string"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"UpdateAt"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"deleteAt"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// DeleteBy holds the value of the "delete_by" field.
	DeleteBy int64 `json:"delete_by,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,string"`
	// DelFlag holds the value of the "del_flag" field.
	DelFlag int8 `json:"-"`
	// 字典类型名称
	DictName string `json:"dictName"`
	// 字典类型
	DictType string `json:"dictType"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysDictTypeQuery when eager-loading is set.
	Edges        SysDictTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SysDictTypeEdges holds the relations/edges for other nodes in the graph.
type SysDictTypeEdges struct {
	// SysDictDatas holds the value of the sysDictDatas edge.
	SysDictDatas []*SysDictData `json:"sysDictDatas,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SysDictDatasOrErr returns the SysDictDatas value or an error if the edge
// was not loaded in eager-loading.
func (e SysDictTypeEdges) SysDictDatasOrErr() ([]*SysDictData, error) {
	if e.loadedTypes[0] {
		return e.SysDictDatas, nil
	}
	return nil, &NotLoadedError{edge: "sysDictDatas"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysDictType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysdicttype.FieldID, sysdicttype.FieldCreatedBy, sysdicttype.FieldUpdatedBy, sysdicttype.FieldDeleteBy, sysdicttype.FieldStatus, sysdicttype.FieldDelFlag:
			values[i] = new(sql.NullInt64)
		case sysdicttype.FieldRemark, sysdicttype.FieldDictName, sysdicttype.FieldDictType:
			values[i] = new(sql.NullString)
		case sysdicttype.FieldCreatedAt, sysdicttype.FieldUpdatedAt, sysdicttype.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysDictType fields.
func (sdt *SysDictType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysdicttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sdt.ID = int64(value.Int64)
		case sysdicttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sdt.CreatedAt = value.Time
			}
		case sysdicttype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sdt.UpdatedAt = value.Time
			}
		case sysdicttype.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				sdt.DeleteAt = value.Time
			}
		case sysdicttype.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sdt.CreatedBy = value.Int64
			}
		case sysdicttype.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sdt.UpdatedBy = value.Int64
			}
		case sysdicttype.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				sdt.DeleteBy = value.Int64
			}
		case sysdicttype.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sdt.Remark = value.String
			}
		case sysdicttype.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sdt.Status = int8(value.Int64)
			}
		case sysdicttype.FieldDelFlag:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field del_flag", values[i])
			} else if value.Valid {
				sdt.DelFlag = int8(value.Int64)
			}
		case sysdicttype.FieldDictName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dict_name", values[i])
			} else if value.Valid {
				sdt.DictName = value.String
			}
		case sysdicttype.FieldDictType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dict_type", values[i])
			} else if value.Valid {
				sdt.DictType = value.String
			}
		default:
			sdt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysDictType.
// This includes values selected through modifiers, order, etc.
func (sdt *SysDictType) Value(name string) (ent.Value, error) {
	return sdt.selectValues.Get(name)
}

// QuerySysDictDatas queries the "sysDictDatas" edge of the SysDictType entity.
func (sdt *SysDictType) QuerySysDictDatas() *SysDictDataQuery {
	return NewSysDictTypeClient(sdt.config).QuerySysDictDatas(sdt)
}

// Update returns a builder for updating this SysDictType.
// Note that you need to call SysDictType.Unwrap() before calling this method if this SysDictType
// was returned from a transaction, and the transaction was committed or rolled back.
func (sdt *SysDictType) Update() *SysDictTypeUpdateOne {
	return NewSysDictTypeClient(sdt.config).UpdateOne(sdt)
}

// Unwrap unwraps the SysDictType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sdt *SysDictType) Unwrap() *SysDictType {
	_tx, ok := sdt.config.driver.(*txDriver)
	if !ok {
		panic("codegen: SysDictType is not a transactional entity")
	}
	sdt.config.driver = _tx.drv
	return sdt
}

// String implements the fmt.Stringer.
func (sdt *SysDictType) String() string {
	var builder strings.Builder
	builder.WriteString("SysDictType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sdt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sdt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sdt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(sdt.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", sdt.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", sdt.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", sdt.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(sdt.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sdt.Status))
	builder.WriteString(", ")
	builder.WriteString("del_flag=")
	builder.WriteString(fmt.Sprintf("%v", sdt.DelFlag))
	builder.WriteString(", ")
	builder.WriteString("dict_name=")
	builder.WriteString(sdt.DictName)
	builder.WriteString(", ")
	builder.WriteString("dict_type=")
	builder.WriteString(sdt.DictType)
	builder.WriteByte(')')
	return builder.String()
}

// SysDictTypes is a parsable slice of SysDictType.
type SysDictTypes []*SysDictType
