// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdept"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysrole"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
)

// SysDeptQuery is the builder for querying SysDept entities.
type SysDeptQuery struct {
	config
	ctx          *QueryContext
	order        []sysdept.OrderOption
	inters       []Interceptor
	predicates   []predicate.SysDept
	withSysUsers *SysUserQuery
	withSysRoles *SysRoleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysDeptQuery builder.
func (sdq *SysDeptQuery) Where(ps ...predicate.SysDept) *SysDeptQuery {
	sdq.predicates = append(sdq.predicates, ps...)
	return sdq
}

// Limit the number of records to be returned by this query.
func (sdq *SysDeptQuery) Limit(limit int) *SysDeptQuery {
	sdq.ctx.Limit = &limit
	return sdq
}

// Offset to start from.
func (sdq *SysDeptQuery) Offset(offset int) *SysDeptQuery {
	sdq.ctx.Offset = &offset
	return sdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sdq *SysDeptQuery) Unique(unique bool) *SysDeptQuery {
	sdq.ctx.Unique = &unique
	return sdq
}

// Order specifies how the records should be ordered.
func (sdq *SysDeptQuery) Order(o ...sysdept.OrderOption) *SysDeptQuery {
	sdq.order = append(sdq.order, o...)
	return sdq
}

// QuerySysUsers chains the current query on the "sysUsers" edge.
func (sdq *SysDeptQuery) QuerySysUsers() *SysUserQuery {
	query := (&SysUserClient{config: sdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdept.Table, sysdept.FieldID, selector),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysdept.SysUsersTable, sysdept.SysUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(sdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySysRoles chains the current query on the "sysRoles" edge.
func (sdq *SysDeptQuery) QuerySysRoles() *SysRoleQuery {
	query := (&SysRoleClient{config: sdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdept.Table, sysdept.FieldID, selector),
			sqlgraph.To(sysrole.Table, sysrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sysdept.SysRolesTable, sysdept.SysRolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SysDept entity from the query.
// Returns a *NotFoundError when no SysDept was found.
func (sdq *SysDeptQuery) First(ctx context.Context) (*SysDept, error) {
	nodes, err := sdq.Limit(1).All(setContextOp(ctx, sdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sysdept.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sdq *SysDeptQuery) FirstX(ctx context.Context) *SysDept {
	node, err := sdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysDept ID from the query.
// Returns a *NotFoundError when no SysDept ID was found.
func (sdq *SysDeptQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sdq.Limit(1).IDs(setContextOp(ctx, sdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sysdept.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sdq *SysDeptQuery) FirstIDX(ctx context.Context) int64 {
	id, err := sdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysDept entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SysDept entity is found.
// Returns a *NotFoundError when no SysDept entities are found.
func (sdq *SysDeptQuery) Only(ctx context.Context) (*SysDept, error) {
	nodes, err := sdq.Limit(2).All(setContextOp(ctx, sdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sysdept.Label}
	default:
		return nil, &NotSingularError{sysdept.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sdq *SysDeptQuery) OnlyX(ctx context.Context) *SysDept {
	node, err := sdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysDept ID in the query.
// Returns a *NotSingularError when more than one SysDept ID is found.
// Returns a *NotFoundError when no entities are found.
func (sdq *SysDeptQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = sdq.Limit(2).IDs(setContextOp(ctx, sdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sysdept.Label}
	default:
		err = &NotSingularError{sysdept.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sdq *SysDeptQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := sdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysDepts.
func (sdq *SysDeptQuery) All(ctx context.Context) ([]*SysDept, error) {
	ctx = setContextOp(ctx, sdq.ctx, "All")
	if err := sdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SysDept, *SysDeptQuery]()
	return withInterceptors[[]*SysDept](ctx, sdq, qr, sdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sdq *SysDeptQuery) AllX(ctx context.Context) []*SysDept {
	nodes, err := sdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysDept IDs.
func (sdq *SysDeptQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if sdq.ctx.Unique == nil && sdq.path != nil {
		sdq.Unique(true)
	}
	ctx = setContextOp(ctx, sdq.ctx, "IDs")
	if err = sdq.Select(sysdept.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sdq *SysDeptQuery) IDsX(ctx context.Context) []int64 {
	ids, err := sdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sdq *SysDeptQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sdq.ctx, "Count")
	if err := sdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sdq, querierCount[*SysDeptQuery](), sdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sdq *SysDeptQuery) CountX(ctx context.Context) int {
	count, err := sdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sdq *SysDeptQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sdq.ctx, "Exist")
	switch _, err := sdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("codegen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sdq *SysDeptQuery) ExistX(ctx context.Context) bool {
	exist, err := sdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysDeptQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sdq *SysDeptQuery) Clone() *SysDeptQuery {
	if sdq == nil {
		return nil
	}
	return &SysDeptQuery{
		config:       sdq.config,
		ctx:          sdq.ctx.Clone(),
		order:        append([]sysdept.OrderOption{}, sdq.order...),
		inters:       append([]Interceptor{}, sdq.inters...),
		predicates:   append([]predicate.SysDept{}, sdq.predicates...),
		withSysUsers: sdq.withSysUsers.Clone(),
		withSysRoles: sdq.withSysRoles.Clone(),
		// clone intermediate query.
		sql:  sdq.sql.Clone(),
		path: sdq.path,
	}
}

// WithSysUsers tells the query-builder to eager-load the nodes that are connected to
// the "sysUsers" edge. The optional arguments are used to configure the query builder of the edge.
func (sdq *SysDeptQuery) WithSysUsers(opts ...func(*SysUserQuery)) *SysDeptQuery {
	query := (&SysUserClient{config: sdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sdq.withSysUsers = query
	return sdq
}

// WithSysRoles tells the query-builder to eager-load the nodes that are connected to
// the "sysRoles" edge. The optional arguments are used to configure the query builder of the edge.
func (sdq *SysDeptQuery) WithSysRoles(opts ...func(*SysRoleQuery)) *SysDeptQuery {
	query := (&SysRoleClient{config: sdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sdq.withSysRoles = query
	return sdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SysDept.Query().
//		GroupBy(sysdept.FieldCreatedAt).
//		Aggregate(codegen.Count()).
//		Scan(ctx, &v)
func (sdq *SysDeptQuery) GroupBy(field string, fields ...string) *SysDeptGroupBy {
	sdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SysDeptGroupBy{build: sdq}
	grbuild.flds = &sdq.ctx.Fields
	grbuild.label = sysdept.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createAt"`
//	}
//
//	client.SysDept.Query().
//		Select(sysdept.FieldCreatedAt).
//		Scan(ctx, &v)
func (sdq *SysDeptQuery) Select(fields ...string) *SysDeptSelect {
	sdq.ctx.Fields = append(sdq.ctx.Fields, fields...)
	sbuild := &SysDeptSelect{SysDeptQuery: sdq}
	sbuild.label = sysdept.Label
	sbuild.flds, sbuild.scan = &sdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SysDeptSelect configured with the given aggregations.
func (sdq *SysDeptQuery) Aggregate(fns ...AggregateFunc) *SysDeptSelect {
	return sdq.Select().Aggregate(fns...)
}

func (sdq *SysDeptQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sdq.inters {
		if inter == nil {
			return fmt.Errorf("codegen: uninitialized interceptor (forgotten import codegen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sdq); err != nil {
				return err
			}
		}
	}
	for _, f := range sdq.ctx.Fields {
		if !sysdept.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
		}
	}
	if sdq.path != nil {
		prev, err := sdq.path(ctx)
		if err != nil {
			return err
		}
		sdq.sql = prev
	}
	return nil
}

func (sdq *SysDeptQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SysDept, error) {
	var (
		nodes       = []*SysDept{}
		_spec       = sdq.querySpec()
		loadedTypes = [2]bool{
			sdq.withSysUsers != nil,
			sdq.withSysRoles != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SysDept).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SysDept{config: sdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sdq.withSysUsers; query != nil {
		if err := sdq.loadSysUsers(ctx, query, nodes,
			func(n *SysDept) { n.Edges.SysUsers = []*SysUser{} },
			func(n *SysDept, e *SysUser) { n.Edges.SysUsers = append(n.Edges.SysUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := sdq.withSysRoles; query != nil {
		if err := sdq.loadSysRoles(ctx, query, nodes,
			func(n *SysDept) { n.Edges.SysRoles = []*SysRole{} },
			func(n *SysDept, e *SysRole) { n.Edges.SysRoles = append(n.Edges.SysRoles, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sdq *SysDeptQuery) loadSysUsers(ctx context.Context, query *SysUserQuery, nodes []*SysDept, init func(*SysDept), assign func(*SysDept, *SysUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int64]*SysDept)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(sysuser.FieldDeptID)
	}
	query.Where(predicate.SysUser(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(sysdept.SysUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.DeptID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "dept_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sdq *SysDeptQuery) loadSysRoles(ctx context.Context, query *SysRoleQuery, nodes []*SysDept, init func(*SysDept), assign func(*SysDept, *SysRole)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int64]*SysDept)
	nids := make(map[int64]map[*SysDept]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(sysdept.SysRolesTable)
		s.Join(joinT).On(s.C(sysrole.FieldID), joinT.C(sysdept.SysRolesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(sysdept.SysRolesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(sysdept.SysRolesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullInt64).Int64
				inValue := values[1].(*sql.NullInt64).Int64
				if nids[inValue] == nil {
					nids[inValue] = map[*SysDept]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*SysRole](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "sysRoles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (sdq *SysDeptQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sdq.querySpec()
	_spec.Node.Columns = sdq.ctx.Fields
	if len(sdq.ctx.Fields) > 0 {
		_spec.Unique = sdq.ctx.Unique != nil && *sdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sdq.driver, _spec)
}

func (sdq *SysDeptQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sysdept.Table, sysdept.Columns, sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64))
	_spec.From = sdq.sql
	if unique := sdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sdq.path != nil {
		_spec.Unique = true
	}
	if fields := sdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdept.FieldID)
		for i := range fields {
			if fields[i] != sysdept.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sdq *SysDeptQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sdq.driver.Dialect())
	t1 := builder.Table(sysdept.Table)
	columns := sdq.ctx.Fields
	if len(columns) == 0 {
		columns = sysdept.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sdq.sql != nil {
		selector = sdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sdq.ctx.Unique != nil && *sdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sdq.predicates {
		p(selector)
	}
	for _, p := range sdq.order {
		p(selector)
	}
	if offset := sdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SysDeptGroupBy is the group-by builder for SysDept entities.
type SysDeptGroupBy struct {
	selector
	build *SysDeptQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sdgb *SysDeptGroupBy) Aggregate(fns ...AggregateFunc) *SysDeptGroupBy {
	sdgb.fns = append(sdgb.fns, fns...)
	return sdgb
}

// Scan applies the selector query and scans the result into the given value.
func (sdgb *SysDeptGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sdgb.build.ctx, "GroupBy")
	if err := sdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SysDeptQuery, *SysDeptGroupBy](ctx, sdgb.build, sdgb, sdgb.build.inters, v)
}

func (sdgb *SysDeptGroupBy) sqlScan(ctx context.Context, root *SysDeptQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sdgb.fns))
	for _, fn := range sdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sdgb.flds)+len(sdgb.fns))
		for _, f := range *sdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SysDeptSelect is the builder for selecting fields of SysDept entities.
type SysDeptSelect struct {
	*SysDeptQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sds *SysDeptSelect) Aggregate(fns ...AggregateFunc) *SysDeptSelect {
	sds.fns = append(sds.fns, fns...)
	return sds
}

// Scan applies the selector query and scans the result into the given value.
func (sds *SysDeptSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sds.ctx, "Select")
	if err := sds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SysDeptQuery, *SysDeptSelect](ctx, sds.SysDeptQuery, sds, sds.inters, v)
}

func (sds *SysDeptSelect) sqlScan(ctx context.Context, root *SysDeptQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sds.fns))
	for _, fn := range sds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
