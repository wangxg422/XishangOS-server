// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysoperlog"
)

// SysOperLogCreate is the builder for creating a SysOperLog entity.
type SysOperLogCreate struct {
	config
	mutation *SysOperLogMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (solc *SysOperLogCreate) SetTitle(s string) *SysOperLogCreate {
	solc.mutation.SetTitle(s)
	return solc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableTitle(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetTitle(*s)
	}
	return solc
}

// SetBusinessType sets the "business_type" field.
func (solc *SysOperLogCreate) SetBusinessType(i int) *SysOperLogCreate {
	solc.mutation.SetBusinessType(i)
	return solc
}

// SetNillableBusinessType sets the "business_type" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableBusinessType(i *int) *SysOperLogCreate {
	if i != nil {
		solc.SetBusinessType(*i)
	}
	return solc
}

// SetMethod sets the "method" field.
func (solc *SysOperLogCreate) SetMethod(s string) *SysOperLogCreate {
	solc.mutation.SetMethod(s)
	return solc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableMethod(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetMethod(*s)
	}
	return solc
}

// SetRequestMethod sets the "request_method" field.
func (solc *SysOperLogCreate) SetRequestMethod(s string) *SysOperLogCreate {
	solc.mutation.SetRequestMethod(s)
	return solc
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableRequestMethod(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetRequestMethod(*s)
	}
	return solc
}

// SetOperType sets the "oper_type" field.
func (solc *SysOperLogCreate) SetOperType(i int8) *SysOperLogCreate {
	solc.mutation.SetOperType(i)
	return solc
}

// SetNillableOperType sets the "oper_type" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableOperType(i *int8) *SysOperLogCreate {
	if i != nil {
		solc.SetOperType(*i)
	}
	return solc
}

// SetOperName sets the "oper_name" field.
func (solc *SysOperLogCreate) SetOperName(s string) *SysOperLogCreate {
	solc.mutation.SetOperName(s)
	return solc
}

// SetNillableOperName sets the "oper_name" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableOperName(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetOperName(*s)
	}
	return solc
}

// SetDeptName sets the "dept_name" field.
func (solc *SysOperLogCreate) SetDeptName(s string) *SysOperLogCreate {
	solc.mutation.SetDeptName(s)
	return solc
}

// SetNillableDeptName sets the "dept_name" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableDeptName(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetDeptName(*s)
	}
	return solc
}

// SetOperURL sets the "oper_url" field.
func (solc *SysOperLogCreate) SetOperURL(s string) *SysOperLogCreate {
	solc.mutation.SetOperURL(s)
	return solc
}

// SetNillableOperURL sets the "oper_url" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableOperURL(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetOperURL(*s)
	}
	return solc
}

// SetOperIP sets the "oper_ip" field.
func (solc *SysOperLogCreate) SetOperIP(s string) *SysOperLogCreate {
	solc.mutation.SetOperIP(s)
	return solc
}

// SetNillableOperIP sets the "oper_ip" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableOperIP(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetOperIP(*s)
	}
	return solc
}

// SetOperLocation sets the "oper_location" field.
func (solc *SysOperLogCreate) SetOperLocation(s string) *SysOperLogCreate {
	solc.mutation.SetOperLocation(s)
	return solc
}

// SetNillableOperLocation sets the "oper_location" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableOperLocation(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetOperLocation(*s)
	}
	return solc
}

// SetOperParam sets the "oper_param" field.
func (solc *SysOperLogCreate) SetOperParam(s string) *SysOperLogCreate {
	solc.mutation.SetOperParam(s)
	return solc
}

// SetNillableOperParam sets the "oper_param" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableOperParam(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetOperParam(*s)
	}
	return solc
}

// SetErrorMsg sets the "error_msg" field.
func (solc *SysOperLogCreate) SetErrorMsg(s string) *SysOperLogCreate {
	solc.mutation.SetErrorMsg(s)
	return solc
}

// SetNillableErrorMsg sets the "error_msg" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableErrorMsg(s *string) *SysOperLogCreate {
	if s != nil {
		solc.SetErrorMsg(*s)
	}
	return solc
}

// SetOperTime sets the "oper_time" field.
func (solc *SysOperLogCreate) SetOperTime(t time.Time) *SysOperLogCreate {
	solc.mutation.SetOperTime(t)
	return solc
}

// SetNillableOperTime sets the "oper_time" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableOperTime(t *time.Time) *SysOperLogCreate {
	if t != nil {
		solc.SetOperTime(*t)
	}
	return solc
}

// SetID sets the "id" field.
func (solc *SysOperLogCreate) SetID(i int64) *SysOperLogCreate {
	solc.mutation.SetID(i)
	return solc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (solc *SysOperLogCreate) SetNillableID(i *int64) *SysOperLogCreate {
	if i != nil {
		solc.SetID(*i)
	}
	return solc
}

// Mutation returns the SysOperLogMutation object of the builder.
func (solc *SysOperLogCreate) Mutation() *SysOperLogMutation {
	return solc.mutation
}

// Save creates the SysOperLog in the database.
func (solc *SysOperLogCreate) Save(ctx context.Context) (*SysOperLog, error) {
	solc.defaults()
	return withHooks(ctx, solc.sqlSave, solc.mutation, solc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (solc *SysOperLogCreate) SaveX(ctx context.Context) *SysOperLog {
	v, err := solc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (solc *SysOperLogCreate) Exec(ctx context.Context) error {
	_, err := solc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (solc *SysOperLogCreate) ExecX(ctx context.Context) {
	if err := solc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (solc *SysOperLogCreate) defaults() {
	if _, ok := solc.mutation.ID(); !ok {
		v := sysoperlog.DefaultID()
		solc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (solc *SysOperLogCreate) check() error {
	return nil
}

func (solc *SysOperLogCreate) sqlSave(ctx context.Context) (*SysOperLog, error) {
	if err := solc.check(); err != nil {
		return nil, err
	}
	_node, _spec := solc.createSpec()
	if err := sqlgraph.CreateNode(ctx, solc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	solc.mutation.id = &_node.ID
	solc.mutation.done = true
	return _node, nil
}

func (solc *SysOperLogCreate) createSpec() (*SysOperLog, *sqlgraph.CreateSpec) {
	var (
		_node = &SysOperLog{config: solc.config}
		_spec = sqlgraph.NewCreateSpec(sysoperlog.Table, sqlgraph.NewFieldSpec(sysoperlog.FieldID, field.TypeInt64))
	)
	if id, ok := solc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := solc.mutation.Title(); ok {
		_spec.SetField(sysoperlog.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := solc.mutation.BusinessType(); ok {
		_spec.SetField(sysoperlog.FieldBusinessType, field.TypeInt, value)
		_node.BusinessType = value
	}
	if value, ok := solc.mutation.Method(); ok {
		_spec.SetField(sysoperlog.FieldMethod, field.TypeString, value)
		_node.Method = value
	}
	if value, ok := solc.mutation.RequestMethod(); ok {
		_spec.SetField(sysoperlog.FieldRequestMethod, field.TypeString, value)
		_node.RequestMethod = value
	}
	if value, ok := solc.mutation.OperType(); ok {
		_spec.SetField(sysoperlog.FieldOperType, field.TypeInt8, value)
		_node.OperType = value
	}
	if value, ok := solc.mutation.OperName(); ok {
		_spec.SetField(sysoperlog.FieldOperName, field.TypeString, value)
		_node.OperName = value
	}
	if value, ok := solc.mutation.DeptName(); ok {
		_spec.SetField(sysoperlog.FieldDeptName, field.TypeString, value)
		_node.DeptName = value
	}
	if value, ok := solc.mutation.OperURL(); ok {
		_spec.SetField(sysoperlog.FieldOperURL, field.TypeString, value)
		_node.OperURL = value
	}
	if value, ok := solc.mutation.OperIP(); ok {
		_spec.SetField(sysoperlog.FieldOperIP, field.TypeString, value)
		_node.OperIP = value
	}
	if value, ok := solc.mutation.OperLocation(); ok {
		_spec.SetField(sysoperlog.FieldOperLocation, field.TypeString, value)
		_node.OperLocation = value
	}
	if value, ok := solc.mutation.OperParam(); ok {
		_spec.SetField(sysoperlog.FieldOperParam, field.TypeString, value)
		_node.OperParam = value
	}
	if value, ok := solc.mutation.ErrorMsg(); ok {
		_spec.SetField(sysoperlog.FieldErrorMsg, field.TypeString, value)
		_node.ErrorMsg = value
	}
	if value, ok := solc.mutation.OperTime(); ok {
		_spec.SetField(sysoperlog.FieldOperTime, field.TypeTime, value)
		_node.OperTime = value
	}
	return _node, _spec
}

// SysOperLogCreateBulk is the builder for creating many SysOperLog entities in bulk.
type SysOperLogCreateBulk struct {
	config
	err      error
	builders []*SysOperLogCreate
}

// Save creates the SysOperLog entities in the database.
func (solcb *SysOperLogCreateBulk) Save(ctx context.Context) ([]*SysOperLog, error) {
	if solcb.err != nil {
		return nil, solcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(solcb.builders))
	nodes := make([]*SysOperLog, len(solcb.builders))
	mutators := make([]Mutator, len(solcb.builders))
	for i := range solcb.builders {
		func(i int, root context.Context) {
			builder := solcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysOperLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, solcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, solcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, solcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (solcb *SysOperLogCreateBulk) SaveX(ctx context.Context) []*SysOperLog {
	v, err := solcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (solcb *SysOperLogCreateBulk) Exec(ctx context.Context) error {
	_, err := solcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (solcb *SysOperLogCreateBulk) ExecX(ctx context.Context) {
	if err := solcb.Exec(ctx); err != nil {
		panic(err)
	}
}
