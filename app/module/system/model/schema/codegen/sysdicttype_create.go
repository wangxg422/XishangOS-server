// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdictdata"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdicttype"
)

// SysDictTypeCreate is the builder for creating a SysDictType entity.
type SysDictTypeCreate struct {
	config
	mutation *SysDictTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sdtc *SysDictTypeCreate) SetCreatedAt(t time.Time) *SysDictTypeCreate {
	sdtc.mutation.SetCreatedAt(t)
	return sdtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableCreatedAt(t *time.Time) *SysDictTypeCreate {
	if t != nil {
		sdtc.SetCreatedAt(*t)
	}
	return sdtc
}

// SetUpdatedAt sets the "updated_at" field.
func (sdtc *SysDictTypeCreate) SetUpdatedAt(t time.Time) *SysDictTypeCreate {
	sdtc.mutation.SetUpdatedAt(t)
	return sdtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableUpdatedAt(t *time.Time) *SysDictTypeCreate {
	if t != nil {
		sdtc.SetUpdatedAt(*t)
	}
	return sdtc
}

// SetDeleteAt sets the "delete_at" field.
func (sdtc *SysDictTypeCreate) SetDeleteAt(t time.Time) *SysDictTypeCreate {
	sdtc.mutation.SetDeleteAt(t)
	return sdtc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableDeleteAt(t *time.Time) *SysDictTypeCreate {
	if t != nil {
		sdtc.SetDeleteAt(*t)
	}
	return sdtc
}

// SetCreatedBy sets the "created_by" field.
func (sdtc *SysDictTypeCreate) SetCreatedBy(i int64) *SysDictTypeCreate {
	sdtc.mutation.SetCreatedBy(i)
	return sdtc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableCreatedBy(i *int64) *SysDictTypeCreate {
	if i != nil {
		sdtc.SetCreatedBy(*i)
	}
	return sdtc
}

// SetUpdatedBy sets the "updated_by" field.
func (sdtc *SysDictTypeCreate) SetUpdatedBy(i int64) *SysDictTypeCreate {
	sdtc.mutation.SetUpdatedBy(i)
	return sdtc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableUpdatedBy(i *int64) *SysDictTypeCreate {
	if i != nil {
		sdtc.SetUpdatedBy(*i)
	}
	return sdtc
}

// SetDeleteBy sets the "delete_by" field.
func (sdtc *SysDictTypeCreate) SetDeleteBy(i int64) *SysDictTypeCreate {
	sdtc.mutation.SetDeleteBy(i)
	return sdtc
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableDeleteBy(i *int64) *SysDictTypeCreate {
	if i != nil {
		sdtc.SetDeleteBy(*i)
	}
	return sdtc
}

// SetRemark sets the "remark" field.
func (sdtc *SysDictTypeCreate) SetRemark(s string) *SysDictTypeCreate {
	sdtc.mutation.SetRemark(s)
	return sdtc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableRemark(s *string) *SysDictTypeCreate {
	if s != nil {
		sdtc.SetRemark(*s)
	}
	return sdtc
}

// SetStatus sets the "status" field.
func (sdtc *SysDictTypeCreate) SetStatus(i int8) *SysDictTypeCreate {
	sdtc.mutation.SetStatus(i)
	return sdtc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableStatus(i *int8) *SysDictTypeCreate {
	if i != nil {
		sdtc.SetStatus(*i)
	}
	return sdtc
}

// SetDictName sets the "dict_name" field.
func (sdtc *SysDictTypeCreate) SetDictName(s string) *SysDictTypeCreate {
	sdtc.mutation.SetDictName(s)
	return sdtc
}

// SetNillableDictName sets the "dict_name" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableDictName(s *string) *SysDictTypeCreate {
	if s != nil {
		sdtc.SetDictName(*s)
	}
	return sdtc
}

// SetDictType sets the "dict_type" field.
func (sdtc *SysDictTypeCreate) SetDictType(s string) *SysDictTypeCreate {
	sdtc.mutation.SetDictType(s)
	return sdtc
}

// SetNillableDictType sets the "dict_type" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableDictType(s *string) *SysDictTypeCreate {
	if s != nil {
		sdtc.SetDictType(*s)
	}
	return sdtc
}

// SetID sets the "id" field.
func (sdtc *SysDictTypeCreate) SetID(i int64) *SysDictTypeCreate {
	sdtc.mutation.SetID(i)
	return sdtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sdtc *SysDictTypeCreate) SetNillableID(i *int64) *SysDictTypeCreate {
	if i != nil {
		sdtc.SetID(*i)
	}
	return sdtc
}

// AddSysDictDataIDs adds the "sysDictDatas" edge to the SysDictData entity by IDs.
func (sdtc *SysDictTypeCreate) AddSysDictDataIDs(ids ...int64) *SysDictTypeCreate {
	sdtc.mutation.AddSysDictDataIDs(ids...)
	return sdtc
}

// AddSysDictDatas adds the "sysDictDatas" edges to the SysDictData entity.
func (sdtc *SysDictTypeCreate) AddSysDictDatas(s ...*SysDictData) *SysDictTypeCreate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdtc.AddSysDictDataIDs(ids...)
}

// Mutation returns the SysDictTypeMutation object of the builder.
func (sdtc *SysDictTypeCreate) Mutation() *SysDictTypeMutation {
	return sdtc.mutation
}

// Save creates the SysDictType in the database.
func (sdtc *SysDictTypeCreate) Save(ctx context.Context) (*SysDictType, error) {
	sdtc.defaults()
	return withHooks(ctx, sdtc.sqlSave, sdtc.mutation, sdtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdtc *SysDictTypeCreate) SaveX(ctx context.Context) *SysDictType {
	v, err := sdtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdtc *SysDictTypeCreate) Exec(ctx context.Context) error {
	_, err := sdtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtc *SysDictTypeCreate) ExecX(ctx context.Context) {
	if err := sdtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdtc *SysDictTypeCreate) defaults() {
	if _, ok := sdtc.mutation.CreatedAt(); !ok {
		v := sysdicttype.DefaultCreatedAt()
		sdtc.mutation.SetCreatedAt(v)
	}
	if _, ok := sdtc.mutation.UpdatedAt(); !ok {
		v := sysdicttype.DefaultUpdatedAt()
		sdtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sdtc.mutation.DeleteAt(); !ok {
		v := sysdicttype.DefaultDeleteAt()
		sdtc.mutation.SetDeleteAt(v)
	}
	if _, ok := sdtc.mutation.Status(); !ok {
		v := sysdicttype.DefaultStatus
		sdtc.mutation.SetStatus(v)
	}
	if _, ok := sdtc.mutation.ID(); !ok {
		v := sysdicttype.DefaultID()
		sdtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdtc *SysDictTypeCreate) check() error {
	return nil
}

func (sdtc *SysDictTypeCreate) sqlSave(ctx context.Context) (*SysDictType, error) {
	if err := sdtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sdtc.mutation.id = &_node.ID
	sdtc.mutation.done = true
	return _node, nil
}

func (sdtc *SysDictTypeCreate) createSpec() (*SysDictType, *sqlgraph.CreateSpec) {
	var (
		_node = &SysDictType{config: sdtc.config}
		_spec = sqlgraph.NewCreateSpec(sysdicttype.Table, sqlgraph.NewFieldSpec(sysdicttype.FieldID, field.TypeInt64))
	)
	if id, ok := sdtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sdtc.mutation.CreatedAt(); ok {
		_spec.SetField(sysdicttype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sdtc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdicttype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sdtc.mutation.DeleteAt(); ok {
		_spec.SetField(sysdicttype.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := sdtc.mutation.CreatedBy(); ok {
		_spec.SetField(sysdicttype.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := sdtc.mutation.UpdatedBy(); ok {
		_spec.SetField(sysdicttype.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := sdtc.mutation.DeleteBy(); ok {
		_spec.SetField(sysdicttype.FieldDeleteBy, field.TypeInt64, value)
		_node.DeleteBy = value
	}
	if value, ok := sdtc.mutation.Remark(); ok {
		_spec.SetField(sysdicttype.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := sdtc.mutation.Status(); ok {
		_spec.SetField(sysdicttype.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := sdtc.mutation.DictName(); ok {
		_spec.SetField(sysdicttype.FieldDictName, field.TypeString, value)
		_node.DictName = value
	}
	if value, ok := sdtc.mutation.DictType(); ok {
		_spec.SetField(sysdicttype.FieldDictType, field.TypeString, value)
		_node.DictType = value
	}
	if nodes := sdtc.mutation.SysDictDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdicttype.SysDictDatasTable,
			Columns: []string{sysdicttype.SysDictDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SysDictTypeCreateBulk is the builder for creating many SysDictType entities in bulk.
type SysDictTypeCreateBulk struct {
	config
	err      error
	builders []*SysDictTypeCreate
}

// Save creates the SysDictType entities in the database.
func (sdtcb *SysDictTypeCreateBulk) Save(ctx context.Context) ([]*SysDictType, error) {
	if sdtcb.err != nil {
		return nil, sdtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdtcb.builders))
	nodes := make([]*SysDictType, len(sdtcb.builders))
	mutators := make([]Mutator, len(sdtcb.builders))
	for i := range sdtcb.builders {
		func(i int, root context.Context) {
			builder := sdtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysDictTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdtcb *SysDictTypeCreateBulk) SaveX(ctx context.Context) []*SysDictType {
	v, err := sdtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdtcb *SysDictTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := sdtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtcb *SysDictTypeCreateBulk) ExecX(ctx context.Context) {
	if err := sdtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
