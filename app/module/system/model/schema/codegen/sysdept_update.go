// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdept"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysrole"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
)

// SysDeptUpdate is the builder for updating SysDept entities.
type SysDeptUpdate struct {
	config
	hooks    []Hook
	mutation *SysDeptMutation
}

// Where appends a list predicates to the SysDeptUpdate builder.
func (sdu *SysDeptUpdate) Where(ps ...predicate.SysDept) *SysDeptUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdu *SysDeptUpdate) SetUpdatedAt(t time.Time) *SysDeptUpdate {
	sdu.mutation.SetUpdatedAt(t)
	return sdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sdu *SysDeptUpdate) ClearUpdatedAt() *SysDeptUpdate {
	sdu.mutation.ClearUpdatedAt()
	return sdu
}

// SetDeleteAt sets the "delete_at" field.
func (sdu *SysDeptUpdate) SetDeleteAt(t time.Time) *SysDeptUpdate {
	sdu.mutation.SetDeleteAt(t)
	return sdu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (sdu *SysDeptUpdate) ClearDeleteAt() *SysDeptUpdate {
	sdu.mutation.ClearDeleteAt()
	return sdu
}

// SetCreatedBy sets the "created_by" field.
func (sdu *SysDeptUpdate) SetCreatedBy(i int64) *SysDeptUpdate {
	sdu.mutation.ResetCreatedBy()
	sdu.mutation.SetCreatedBy(i)
	return sdu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableCreatedBy(i *int64) *SysDeptUpdate {
	if i != nil {
		sdu.SetCreatedBy(*i)
	}
	return sdu
}

// AddCreatedBy adds i to the "created_by" field.
func (sdu *SysDeptUpdate) AddCreatedBy(i int64) *SysDeptUpdate {
	sdu.mutation.AddCreatedBy(i)
	return sdu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sdu *SysDeptUpdate) ClearCreatedBy() *SysDeptUpdate {
	sdu.mutation.ClearCreatedBy()
	return sdu
}

// SetUpdatedBy sets the "updated_by" field.
func (sdu *SysDeptUpdate) SetUpdatedBy(i int64) *SysDeptUpdate {
	sdu.mutation.ResetUpdatedBy()
	sdu.mutation.SetUpdatedBy(i)
	return sdu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableUpdatedBy(i *int64) *SysDeptUpdate {
	if i != nil {
		sdu.SetUpdatedBy(*i)
	}
	return sdu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (sdu *SysDeptUpdate) AddUpdatedBy(i int64) *SysDeptUpdate {
	sdu.mutation.AddUpdatedBy(i)
	return sdu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sdu *SysDeptUpdate) ClearUpdatedBy() *SysDeptUpdate {
	sdu.mutation.ClearUpdatedBy()
	return sdu
}

// SetDeleteBy sets the "delete_by" field.
func (sdu *SysDeptUpdate) SetDeleteBy(i int64) *SysDeptUpdate {
	sdu.mutation.ResetDeleteBy()
	sdu.mutation.SetDeleteBy(i)
	return sdu
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableDeleteBy(i *int64) *SysDeptUpdate {
	if i != nil {
		sdu.SetDeleteBy(*i)
	}
	return sdu
}

// AddDeleteBy adds i to the "delete_by" field.
func (sdu *SysDeptUpdate) AddDeleteBy(i int64) *SysDeptUpdate {
	sdu.mutation.AddDeleteBy(i)
	return sdu
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (sdu *SysDeptUpdate) ClearDeleteBy() *SysDeptUpdate {
	sdu.mutation.ClearDeleteBy()
	return sdu
}

// SetRemark sets the "remark" field.
func (sdu *SysDeptUpdate) SetRemark(s string) *SysDeptUpdate {
	sdu.mutation.SetRemark(s)
	return sdu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableRemark(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetRemark(*s)
	}
	return sdu
}

// ClearRemark clears the value of the "remark" field.
func (sdu *SysDeptUpdate) ClearRemark() *SysDeptUpdate {
	sdu.mutation.ClearRemark()
	return sdu
}

// SetSort sets the "sort" field.
func (sdu *SysDeptUpdate) SetSort(i int) *SysDeptUpdate {
	sdu.mutation.ResetSort()
	sdu.mutation.SetSort(i)
	return sdu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableSort(i *int) *SysDeptUpdate {
	if i != nil {
		sdu.SetSort(*i)
	}
	return sdu
}

// AddSort adds i to the "sort" field.
func (sdu *SysDeptUpdate) AddSort(i int) *SysDeptUpdate {
	sdu.mutation.AddSort(i)
	return sdu
}

// ClearSort clears the value of the "sort" field.
func (sdu *SysDeptUpdate) ClearSort() *SysDeptUpdate {
	sdu.mutation.ClearSort()
	return sdu
}

// SetParentID sets the "parent_id" field.
func (sdu *SysDeptUpdate) SetParentID(i int64) *SysDeptUpdate {
	sdu.mutation.ResetParentID()
	sdu.mutation.SetParentID(i)
	return sdu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableParentID(i *int64) *SysDeptUpdate {
	if i != nil {
		sdu.SetParentID(*i)
	}
	return sdu
}

// AddParentID adds i to the "parent_id" field.
func (sdu *SysDeptUpdate) AddParentID(i int64) *SysDeptUpdate {
	sdu.mutation.AddParentID(i)
	return sdu
}

// SetAncestors sets the "ancestors" field.
func (sdu *SysDeptUpdate) SetAncestors(s string) *SysDeptUpdate {
	sdu.mutation.SetAncestors(s)
	return sdu
}

// SetNillableAncestors sets the "ancestors" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableAncestors(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetAncestors(*s)
	}
	return sdu
}

// ClearAncestors clears the value of the "ancestors" field.
func (sdu *SysDeptUpdate) ClearAncestors() *SysDeptUpdate {
	sdu.mutation.ClearAncestors()
	return sdu
}

// SetDeptName sets the "dept_name" field.
func (sdu *SysDeptUpdate) SetDeptName(s string) *SysDeptUpdate {
	sdu.mutation.SetDeptName(s)
	return sdu
}

// SetNillableDeptName sets the "dept_name" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableDeptName(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetDeptName(*s)
	}
	return sdu
}

// ClearDeptName clears the value of the "dept_name" field.
func (sdu *SysDeptUpdate) ClearDeptName() *SysDeptUpdate {
	sdu.mutation.ClearDeptName()
	return sdu
}

// SetDeptCode sets the "dept_code" field.
func (sdu *SysDeptUpdate) SetDeptCode(s string) *SysDeptUpdate {
	sdu.mutation.SetDeptCode(s)
	return sdu
}

// SetNillableDeptCode sets the "dept_code" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableDeptCode(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetDeptCode(*s)
	}
	return sdu
}

// ClearDeptCode clears the value of the "dept_code" field.
func (sdu *SysDeptUpdate) ClearDeptCode() *SysDeptUpdate {
	sdu.mutation.ClearDeptCode()
	return sdu
}

// SetLeader sets the "leader" field.
func (sdu *SysDeptUpdate) SetLeader(s string) *SysDeptUpdate {
	sdu.mutation.SetLeader(s)
	return sdu
}

// SetNillableLeader sets the "leader" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableLeader(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetLeader(*s)
	}
	return sdu
}

// ClearLeader clears the value of the "leader" field.
func (sdu *SysDeptUpdate) ClearLeader() *SysDeptUpdate {
	sdu.mutation.ClearLeader()
	return sdu
}

// SetPhone sets the "phone" field.
func (sdu *SysDeptUpdate) SetPhone(s string) *SysDeptUpdate {
	sdu.mutation.SetPhone(s)
	return sdu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillablePhone(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetPhone(*s)
	}
	return sdu
}

// ClearPhone clears the value of the "phone" field.
func (sdu *SysDeptUpdate) ClearPhone() *SysDeptUpdate {
	sdu.mutation.ClearPhone()
	return sdu
}

// SetEmail sets the "email" field.
func (sdu *SysDeptUpdate) SetEmail(s string) *SysDeptUpdate {
	sdu.mutation.SetEmail(s)
	return sdu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sdu *SysDeptUpdate) SetNillableEmail(s *string) *SysDeptUpdate {
	if s != nil {
		sdu.SetEmail(*s)
	}
	return sdu
}

// ClearEmail clears the value of the "email" field.
func (sdu *SysDeptUpdate) ClearEmail() *SysDeptUpdate {
	sdu.mutation.ClearEmail()
	return sdu
}

// AddSysUserIDs adds the "sysUsers" edge to the SysUser entity by IDs.
func (sdu *SysDeptUpdate) AddSysUserIDs(ids ...int64) *SysDeptUpdate {
	sdu.mutation.AddSysUserIDs(ids...)
	return sdu
}

// AddSysUsers adds the "sysUsers" edges to the SysUser entity.
func (sdu *SysDeptUpdate) AddSysUsers(s ...*SysUser) *SysDeptUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.AddSysUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the SysRole entity by IDs.
func (sdu *SysDeptUpdate) AddRoleIDs(ids ...int64) *SysDeptUpdate {
	sdu.mutation.AddRoleIDs(ids...)
	return sdu
}

// AddRoles adds the "roles" edges to the SysRole entity.
func (sdu *SysDeptUpdate) AddRoles(s ...*SysRole) *SysDeptUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.AddRoleIDs(ids...)
}

// Mutation returns the SysDeptMutation object of the builder.
func (sdu *SysDeptUpdate) Mutation() *SysDeptMutation {
	return sdu.mutation
}

// ClearSysUsers clears all "sysUsers" edges to the SysUser entity.
func (sdu *SysDeptUpdate) ClearSysUsers() *SysDeptUpdate {
	sdu.mutation.ClearSysUsers()
	return sdu
}

// RemoveSysUserIDs removes the "sysUsers" edge to SysUser entities by IDs.
func (sdu *SysDeptUpdate) RemoveSysUserIDs(ids ...int64) *SysDeptUpdate {
	sdu.mutation.RemoveSysUserIDs(ids...)
	return sdu
}

// RemoveSysUsers removes "sysUsers" edges to SysUser entities.
func (sdu *SysDeptUpdate) RemoveSysUsers(s ...*SysUser) *SysDeptUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.RemoveSysUserIDs(ids...)
}

// ClearRoles clears all "roles" edges to the SysRole entity.
func (sdu *SysDeptUpdate) ClearRoles() *SysDeptUpdate {
	sdu.mutation.ClearRoles()
	return sdu
}

// RemoveRoleIDs removes the "roles" edge to SysRole entities by IDs.
func (sdu *SysDeptUpdate) RemoveRoleIDs(ids ...int64) *SysDeptUpdate {
	sdu.mutation.RemoveRoleIDs(ids...)
	return sdu
}

// RemoveRoles removes "roles" edges to SysRole entities.
func (sdu *SysDeptUpdate) RemoveRoles(s ...*SysRole) *SysDeptUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.RemoveRoleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SysDeptUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks(ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SysDeptUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SysDeptUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SysDeptUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SysDeptUpdate) defaults() {
	if _, ok := sdu.mutation.UpdatedAt(); !ok && !sdu.mutation.UpdatedAtCleared() {
		v := sysdept.UpdateDefaultUpdatedAt()
		sdu.mutation.SetUpdatedAt(v)
	}
	if _, ok := sdu.mutation.DeleteAt(); !ok && !sdu.mutation.DeleteAtCleared() {
		v := sysdept.UpdateDefaultDeleteAt()
		sdu.mutation.SetDeleteAt(v)
	}
}

func (sdu *SysDeptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysdept.Table, sysdept.Columns, sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sdu.mutation.CreatedAtCleared() {
		_spec.ClearField(sysdept.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdept.FieldUpdatedAt, field.TypeTime, value)
	}
	if sdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysdept.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sdu.mutation.DeleteAt(); ok {
		_spec.SetField(sysdept.FieldDeleteAt, field.TypeTime, value)
	}
	if sdu.mutation.DeleteAtCleared() {
		_spec.ClearField(sysdept.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := sdu.mutation.CreatedBy(); ok {
		_spec.SetField(sysdept.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysdept.FieldCreatedBy, field.TypeInt64, value)
	}
	if sdu.mutation.CreatedByCleared() {
		_spec.ClearField(sysdept.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := sdu.mutation.UpdatedBy(); ok {
		_spec.SetField(sysdept.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysdept.FieldUpdatedBy, field.TypeInt64, value)
	}
	if sdu.mutation.UpdatedByCleared() {
		_spec.ClearField(sysdept.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := sdu.mutation.DeleteBy(); ok {
		_spec.SetField(sysdept.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysdept.FieldDeleteBy, field.TypeInt64, value)
	}
	if sdu.mutation.DeleteByCleared() {
		_spec.ClearField(sysdept.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := sdu.mutation.Remark(); ok {
		_spec.SetField(sysdept.FieldRemark, field.TypeString, value)
	}
	if sdu.mutation.RemarkCleared() {
		_spec.ClearField(sysdept.FieldRemark, field.TypeString)
	}
	if sdu.mutation.StatusCleared() {
		_spec.ClearField(sysdept.FieldStatus, field.TypeInt8)
	}
	if value, ok := sdu.mutation.Sort(); ok {
		_spec.SetField(sysdept.FieldSort, field.TypeInt, value)
	}
	if value, ok := sdu.mutation.AddedSort(); ok {
		_spec.AddField(sysdept.FieldSort, field.TypeInt, value)
	}
	if sdu.mutation.SortCleared() {
		_spec.ClearField(sysdept.FieldSort, field.TypeInt)
	}
	if value, ok := sdu.mutation.ParentID(); ok {
		_spec.SetField(sysdept.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedParentID(); ok {
		_spec.AddField(sysdept.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.Ancestors(); ok {
		_spec.SetField(sysdept.FieldAncestors, field.TypeString, value)
	}
	if sdu.mutation.AncestorsCleared() {
		_spec.ClearField(sysdept.FieldAncestors, field.TypeString)
	}
	if value, ok := sdu.mutation.DeptName(); ok {
		_spec.SetField(sysdept.FieldDeptName, field.TypeString, value)
	}
	if sdu.mutation.DeptNameCleared() {
		_spec.ClearField(sysdept.FieldDeptName, field.TypeString)
	}
	if value, ok := sdu.mutation.DeptCode(); ok {
		_spec.SetField(sysdept.FieldDeptCode, field.TypeString, value)
	}
	if sdu.mutation.DeptCodeCleared() {
		_spec.ClearField(sysdept.FieldDeptCode, field.TypeString)
	}
	if value, ok := sdu.mutation.Leader(); ok {
		_spec.SetField(sysdept.FieldLeader, field.TypeString, value)
	}
	if sdu.mutation.LeaderCleared() {
		_spec.ClearField(sysdept.FieldLeader, field.TypeString)
	}
	if value, ok := sdu.mutation.Phone(); ok {
		_spec.SetField(sysdept.FieldPhone, field.TypeString, value)
	}
	if sdu.mutation.PhoneCleared() {
		_spec.ClearField(sysdept.FieldPhone, field.TypeString)
	}
	if value, ok := sdu.mutation.Email(); ok {
		_spec.SetField(sysdept.FieldEmail, field.TypeString, value)
	}
	if sdu.mutation.EmailCleared() {
		_spec.ClearField(sysdept.FieldEmail, field.TypeString)
	}
	if sdu.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.SysUsersTable,
			Columns: []string{sysdept.SysUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.RemovedSysUsersIDs(); len(nodes) > 0 && !sdu.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.SysUsersTable,
			Columns: []string{sysdept.SysUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.SysUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.SysUsersTable,
			Columns: []string{sysdept.SysUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sdu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysdept.RolesTable,
			Columns: sysdept.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !sdu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysdept.RolesTable,
			Columns: sysdept.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysdept.RolesTable,
			Columns: sysdept.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdept.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SysDeptUpdateOne is the builder for updating a single SysDept entity.
type SysDeptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysDeptMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sduo *SysDeptUpdateOne) SetUpdatedAt(t time.Time) *SysDeptUpdateOne {
	sduo.mutation.SetUpdatedAt(t)
	return sduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sduo *SysDeptUpdateOne) ClearUpdatedAt() *SysDeptUpdateOne {
	sduo.mutation.ClearUpdatedAt()
	return sduo
}

// SetDeleteAt sets the "delete_at" field.
func (sduo *SysDeptUpdateOne) SetDeleteAt(t time.Time) *SysDeptUpdateOne {
	sduo.mutation.SetDeleteAt(t)
	return sduo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (sduo *SysDeptUpdateOne) ClearDeleteAt() *SysDeptUpdateOne {
	sduo.mutation.ClearDeleteAt()
	return sduo
}

// SetCreatedBy sets the "created_by" field.
func (sduo *SysDeptUpdateOne) SetCreatedBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.ResetCreatedBy()
	sduo.mutation.SetCreatedBy(i)
	return sduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableCreatedBy(i *int64) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetCreatedBy(*i)
	}
	return sduo
}

// AddCreatedBy adds i to the "created_by" field.
func (sduo *SysDeptUpdateOne) AddCreatedBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.AddCreatedBy(i)
	return sduo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sduo *SysDeptUpdateOne) ClearCreatedBy() *SysDeptUpdateOne {
	sduo.mutation.ClearCreatedBy()
	return sduo
}

// SetUpdatedBy sets the "updated_by" field.
func (sduo *SysDeptUpdateOne) SetUpdatedBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.ResetUpdatedBy()
	sduo.mutation.SetUpdatedBy(i)
	return sduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableUpdatedBy(i *int64) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetUpdatedBy(*i)
	}
	return sduo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (sduo *SysDeptUpdateOne) AddUpdatedBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.AddUpdatedBy(i)
	return sduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sduo *SysDeptUpdateOne) ClearUpdatedBy() *SysDeptUpdateOne {
	sduo.mutation.ClearUpdatedBy()
	return sduo
}

// SetDeleteBy sets the "delete_by" field.
func (sduo *SysDeptUpdateOne) SetDeleteBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.ResetDeleteBy()
	sduo.mutation.SetDeleteBy(i)
	return sduo
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableDeleteBy(i *int64) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetDeleteBy(*i)
	}
	return sduo
}

// AddDeleteBy adds i to the "delete_by" field.
func (sduo *SysDeptUpdateOne) AddDeleteBy(i int64) *SysDeptUpdateOne {
	sduo.mutation.AddDeleteBy(i)
	return sduo
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (sduo *SysDeptUpdateOne) ClearDeleteBy() *SysDeptUpdateOne {
	sduo.mutation.ClearDeleteBy()
	return sduo
}

// SetRemark sets the "remark" field.
func (sduo *SysDeptUpdateOne) SetRemark(s string) *SysDeptUpdateOne {
	sduo.mutation.SetRemark(s)
	return sduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableRemark(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetRemark(*s)
	}
	return sduo
}

// ClearRemark clears the value of the "remark" field.
func (sduo *SysDeptUpdateOne) ClearRemark() *SysDeptUpdateOne {
	sduo.mutation.ClearRemark()
	return sduo
}

// SetSort sets the "sort" field.
func (sduo *SysDeptUpdateOne) SetSort(i int) *SysDeptUpdateOne {
	sduo.mutation.ResetSort()
	sduo.mutation.SetSort(i)
	return sduo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableSort(i *int) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetSort(*i)
	}
	return sduo
}

// AddSort adds i to the "sort" field.
func (sduo *SysDeptUpdateOne) AddSort(i int) *SysDeptUpdateOne {
	sduo.mutation.AddSort(i)
	return sduo
}

// ClearSort clears the value of the "sort" field.
func (sduo *SysDeptUpdateOne) ClearSort() *SysDeptUpdateOne {
	sduo.mutation.ClearSort()
	return sduo
}

// SetParentID sets the "parent_id" field.
func (sduo *SysDeptUpdateOne) SetParentID(i int64) *SysDeptUpdateOne {
	sduo.mutation.ResetParentID()
	sduo.mutation.SetParentID(i)
	return sduo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableParentID(i *int64) *SysDeptUpdateOne {
	if i != nil {
		sduo.SetParentID(*i)
	}
	return sduo
}

// AddParentID adds i to the "parent_id" field.
func (sduo *SysDeptUpdateOne) AddParentID(i int64) *SysDeptUpdateOne {
	sduo.mutation.AddParentID(i)
	return sduo
}

// SetAncestors sets the "ancestors" field.
func (sduo *SysDeptUpdateOne) SetAncestors(s string) *SysDeptUpdateOne {
	sduo.mutation.SetAncestors(s)
	return sduo
}

// SetNillableAncestors sets the "ancestors" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableAncestors(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetAncestors(*s)
	}
	return sduo
}

// ClearAncestors clears the value of the "ancestors" field.
func (sduo *SysDeptUpdateOne) ClearAncestors() *SysDeptUpdateOne {
	sduo.mutation.ClearAncestors()
	return sduo
}

// SetDeptName sets the "dept_name" field.
func (sduo *SysDeptUpdateOne) SetDeptName(s string) *SysDeptUpdateOne {
	sduo.mutation.SetDeptName(s)
	return sduo
}

// SetNillableDeptName sets the "dept_name" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableDeptName(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetDeptName(*s)
	}
	return sduo
}

// ClearDeptName clears the value of the "dept_name" field.
func (sduo *SysDeptUpdateOne) ClearDeptName() *SysDeptUpdateOne {
	sduo.mutation.ClearDeptName()
	return sduo
}

// SetDeptCode sets the "dept_code" field.
func (sduo *SysDeptUpdateOne) SetDeptCode(s string) *SysDeptUpdateOne {
	sduo.mutation.SetDeptCode(s)
	return sduo
}

// SetNillableDeptCode sets the "dept_code" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableDeptCode(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetDeptCode(*s)
	}
	return sduo
}

// ClearDeptCode clears the value of the "dept_code" field.
func (sduo *SysDeptUpdateOne) ClearDeptCode() *SysDeptUpdateOne {
	sduo.mutation.ClearDeptCode()
	return sduo
}

// SetLeader sets the "leader" field.
func (sduo *SysDeptUpdateOne) SetLeader(s string) *SysDeptUpdateOne {
	sduo.mutation.SetLeader(s)
	return sduo
}

// SetNillableLeader sets the "leader" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableLeader(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetLeader(*s)
	}
	return sduo
}

// ClearLeader clears the value of the "leader" field.
func (sduo *SysDeptUpdateOne) ClearLeader() *SysDeptUpdateOne {
	sduo.mutation.ClearLeader()
	return sduo
}

// SetPhone sets the "phone" field.
func (sduo *SysDeptUpdateOne) SetPhone(s string) *SysDeptUpdateOne {
	sduo.mutation.SetPhone(s)
	return sduo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillablePhone(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetPhone(*s)
	}
	return sduo
}

// ClearPhone clears the value of the "phone" field.
func (sduo *SysDeptUpdateOne) ClearPhone() *SysDeptUpdateOne {
	sduo.mutation.ClearPhone()
	return sduo
}

// SetEmail sets the "email" field.
func (sduo *SysDeptUpdateOne) SetEmail(s string) *SysDeptUpdateOne {
	sduo.mutation.SetEmail(s)
	return sduo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (sduo *SysDeptUpdateOne) SetNillableEmail(s *string) *SysDeptUpdateOne {
	if s != nil {
		sduo.SetEmail(*s)
	}
	return sduo
}

// ClearEmail clears the value of the "email" field.
func (sduo *SysDeptUpdateOne) ClearEmail() *SysDeptUpdateOne {
	sduo.mutation.ClearEmail()
	return sduo
}

// AddSysUserIDs adds the "sysUsers" edge to the SysUser entity by IDs.
func (sduo *SysDeptUpdateOne) AddSysUserIDs(ids ...int64) *SysDeptUpdateOne {
	sduo.mutation.AddSysUserIDs(ids...)
	return sduo
}

// AddSysUsers adds the "sysUsers" edges to the SysUser entity.
func (sduo *SysDeptUpdateOne) AddSysUsers(s ...*SysUser) *SysDeptUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.AddSysUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the SysRole entity by IDs.
func (sduo *SysDeptUpdateOne) AddRoleIDs(ids ...int64) *SysDeptUpdateOne {
	sduo.mutation.AddRoleIDs(ids...)
	return sduo
}

// AddRoles adds the "roles" edges to the SysRole entity.
func (sduo *SysDeptUpdateOne) AddRoles(s ...*SysRole) *SysDeptUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.AddRoleIDs(ids...)
}

// Mutation returns the SysDeptMutation object of the builder.
func (sduo *SysDeptUpdateOne) Mutation() *SysDeptMutation {
	return sduo.mutation
}

// ClearSysUsers clears all "sysUsers" edges to the SysUser entity.
func (sduo *SysDeptUpdateOne) ClearSysUsers() *SysDeptUpdateOne {
	sduo.mutation.ClearSysUsers()
	return sduo
}

// RemoveSysUserIDs removes the "sysUsers" edge to SysUser entities by IDs.
func (sduo *SysDeptUpdateOne) RemoveSysUserIDs(ids ...int64) *SysDeptUpdateOne {
	sduo.mutation.RemoveSysUserIDs(ids...)
	return sduo
}

// RemoveSysUsers removes "sysUsers" edges to SysUser entities.
func (sduo *SysDeptUpdateOne) RemoveSysUsers(s ...*SysUser) *SysDeptUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.RemoveSysUserIDs(ids...)
}

// ClearRoles clears all "roles" edges to the SysRole entity.
func (sduo *SysDeptUpdateOne) ClearRoles() *SysDeptUpdateOne {
	sduo.mutation.ClearRoles()
	return sduo
}

// RemoveRoleIDs removes the "roles" edge to SysRole entities by IDs.
func (sduo *SysDeptUpdateOne) RemoveRoleIDs(ids ...int64) *SysDeptUpdateOne {
	sduo.mutation.RemoveRoleIDs(ids...)
	return sduo
}

// RemoveRoles removes "roles" edges to SysRole entities.
func (sduo *SysDeptUpdateOne) RemoveRoles(s ...*SysRole) *SysDeptUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.RemoveRoleIDs(ids...)
}

// Where appends a list predicates to the SysDeptUpdate builder.
func (sduo *SysDeptUpdateOne) Where(ps ...predicate.SysDept) *SysDeptUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SysDeptUpdateOne) Select(field string, fields ...string) *SysDeptUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SysDept entity.
func (sduo *SysDeptUpdateOne) Save(ctx context.Context) (*SysDept, error) {
	sduo.defaults()
	return withHooks(ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SysDeptUpdateOne) SaveX(ctx context.Context) *SysDept {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SysDeptUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SysDeptUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SysDeptUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdatedAt(); !ok && !sduo.mutation.UpdatedAtCleared() {
		v := sysdept.UpdateDefaultUpdatedAt()
		sduo.mutation.SetUpdatedAt(v)
	}
	if _, ok := sduo.mutation.DeleteAt(); !ok && !sduo.mutation.DeleteAtCleared() {
		v := sysdept.UpdateDefaultDeleteAt()
		sduo.mutation.SetDeleteAt(v)
	}
}

func (sduo *SysDeptUpdateOne) sqlSave(ctx context.Context) (_node *SysDept, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysdept.Table, sysdept.Columns, sqlgraph.NewFieldSpec(sysdept.FieldID, field.TypeInt64))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysDept.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdept.FieldID)
		for _, f := range fields {
			if !sysdept.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysdept.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sduo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysdept.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdept.FieldUpdatedAt, field.TypeTime, value)
	}
	if sduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysdept.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sduo.mutation.DeleteAt(); ok {
		_spec.SetField(sysdept.FieldDeleteAt, field.TypeTime, value)
	}
	if sduo.mutation.DeleteAtCleared() {
		_spec.ClearField(sysdept.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := sduo.mutation.CreatedBy(); ok {
		_spec.SetField(sysdept.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysdept.FieldCreatedBy, field.TypeInt64, value)
	}
	if sduo.mutation.CreatedByCleared() {
		_spec.ClearField(sysdept.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := sduo.mutation.UpdatedBy(); ok {
		_spec.SetField(sysdept.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysdept.FieldUpdatedBy, field.TypeInt64, value)
	}
	if sduo.mutation.UpdatedByCleared() {
		_spec.ClearField(sysdept.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := sduo.mutation.DeleteBy(); ok {
		_spec.SetField(sysdept.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysdept.FieldDeleteBy, field.TypeInt64, value)
	}
	if sduo.mutation.DeleteByCleared() {
		_spec.ClearField(sysdept.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := sduo.mutation.Remark(); ok {
		_spec.SetField(sysdept.FieldRemark, field.TypeString, value)
	}
	if sduo.mutation.RemarkCleared() {
		_spec.ClearField(sysdept.FieldRemark, field.TypeString)
	}
	if sduo.mutation.StatusCleared() {
		_spec.ClearField(sysdept.FieldStatus, field.TypeInt8)
	}
	if value, ok := sduo.mutation.Sort(); ok {
		_spec.SetField(sysdept.FieldSort, field.TypeInt, value)
	}
	if value, ok := sduo.mutation.AddedSort(); ok {
		_spec.AddField(sysdept.FieldSort, field.TypeInt, value)
	}
	if sduo.mutation.SortCleared() {
		_spec.ClearField(sysdept.FieldSort, field.TypeInt)
	}
	if value, ok := sduo.mutation.ParentID(); ok {
		_spec.SetField(sysdept.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedParentID(); ok {
		_spec.AddField(sysdept.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.Ancestors(); ok {
		_spec.SetField(sysdept.FieldAncestors, field.TypeString, value)
	}
	if sduo.mutation.AncestorsCleared() {
		_spec.ClearField(sysdept.FieldAncestors, field.TypeString)
	}
	if value, ok := sduo.mutation.DeptName(); ok {
		_spec.SetField(sysdept.FieldDeptName, field.TypeString, value)
	}
	if sduo.mutation.DeptNameCleared() {
		_spec.ClearField(sysdept.FieldDeptName, field.TypeString)
	}
	if value, ok := sduo.mutation.DeptCode(); ok {
		_spec.SetField(sysdept.FieldDeptCode, field.TypeString, value)
	}
	if sduo.mutation.DeptCodeCleared() {
		_spec.ClearField(sysdept.FieldDeptCode, field.TypeString)
	}
	if value, ok := sduo.mutation.Leader(); ok {
		_spec.SetField(sysdept.FieldLeader, field.TypeString, value)
	}
	if sduo.mutation.LeaderCleared() {
		_spec.ClearField(sysdept.FieldLeader, field.TypeString)
	}
	if value, ok := sduo.mutation.Phone(); ok {
		_spec.SetField(sysdept.FieldPhone, field.TypeString, value)
	}
	if sduo.mutation.PhoneCleared() {
		_spec.ClearField(sysdept.FieldPhone, field.TypeString)
	}
	if value, ok := sduo.mutation.Email(); ok {
		_spec.SetField(sysdept.FieldEmail, field.TypeString, value)
	}
	if sduo.mutation.EmailCleared() {
		_spec.ClearField(sysdept.FieldEmail, field.TypeString)
	}
	if sduo.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.SysUsersTable,
			Columns: []string{sysdept.SysUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.RemovedSysUsersIDs(); len(nodes) > 0 && !sduo.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.SysUsersTable,
			Columns: []string{sysdept.SysUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.SysUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdept.SysUsersTable,
			Columns: []string{sysdept.SysUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sduo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysdept.RolesTable,
			Columns: sysdept.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !sduo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysdept.RolesTable,
			Columns: sysdept.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysdept.RolesTable,
			Columns: sysdept.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysDept{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdept.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
