// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/syscasbinrule"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysmenu"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysrole"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSysCasbinRule = "SysCasbinRule"
	TypeSysMenu       = "SysMenu"
	TypeSysRole       = "SysRole"
	TypeSysUser       = "SysUser"
)

// SysCasbinRuleMutation represents an operation that mutates the SysCasbinRule nodes in the graph.
type SysCasbinRuleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	ptype         *string
	v0            *string
	v1            *string
	v2            *string
	v3            *string
	v4            *string
	v5            *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysCasbinRule, error)
	predicates    []predicate.SysCasbinRule
}

var _ ent.Mutation = (*SysCasbinRuleMutation)(nil)

// syscasbinruleOption allows management of the mutation configuration using functional options.
type syscasbinruleOption func(*SysCasbinRuleMutation)

// newSysCasbinRuleMutation creates new mutation for the SysCasbinRule entity.
func newSysCasbinRuleMutation(c config, op Op, opts ...syscasbinruleOption) *SysCasbinRuleMutation {
	m := &SysCasbinRuleMutation{
		config:        c,
		op:            op,
		typ:           TypeSysCasbinRule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysCasbinRuleID sets the ID field of the mutation.
func withSysCasbinRuleID(id int) syscasbinruleOption {
	return func(m *SysCasbinRuleMutation) {
		var (
			err   error
			once  sync.Once
			value *SysCasbinRule
		)
		m.oldValue = func(ctx context.Context) (*SysCasbinRule, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysCasbinRule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysCasbinRule sets the old SysCasbinRule of the mutation.
func withSysCasbinRule(node *SysCasbinRule) syscasbinruleOption {
	return func(m *SysCasbinRuleMutation) {
		m.oldValue = func(context.Context) (*SysCasbinRule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysCasbinRuleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysCasbinRuleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysCasbinRuleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysCasbinRuleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysCasbinRule.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPtype sets the "ptype" field.
func (m *SysCasbinRuleMutation) SetPtype(s string) {
	m.ptype = &s
}

// Ptype returns the value of the "ptype" field in the mutation.
func (m *SysCasbinRuleMutation) Ptype() (r string, exists bool) {
	v := m.ptype
	if v == nil {
		return
	}
	return *v, true
}

// OldPtype returns the old "ptype" field's value of the SysCasbinRule entity.
// If the SysCasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysCasbinRuleMutation) OldPtype(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPtype is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPtype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPtype: %w", err)
	}
	return oldValue.Ptype, nil
}

// ClearPtype clears the value of the "ptype" field.
func (m *SysCasbinRuleMutation) ClearPtype() {
	m.ptype = nil
	m.clearedFields[syscasbinrule.FieldPtype] = struct{}{}
}

// PtypeCleared returns if the "ptype" field was cleared in this mutation.
func (m *SysCasbinRuleMutation) PtypeCleared() bool {
	_, ok := m.clearedFields[syscasbinrule.FieldPtype]
	return ok
}

// ResetPtype resets all changes to the "ptype" field.
func (m *SysCasbinRuleMutation) ResetPtype() {
	m.ptype = nil
	delete(m.clearedFields, syscasbinrule.FieldPtype)
}

// SetV0 sets the "v0" field.
func (m *SysCasbinRuleMutation) SetV0(s string) {
	m.v0 = &s
}

// V0 returns the value of the "v0" field in the mutation.
func (m *SysCasbinRuleMutation) V0() (r string, exists bool) {
	v := m.v0
	if v == nil {
		return
	}
	return *v, true
}

// OldV0 returns the old "v0" field's value of the SysCasbinRule entity.
// If the SysCasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysCasbinRuleMutation) OldV0(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV0 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV0 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV0: %w", err)
	}
	return oldValue.V0, nil
}

// ClearV0 clears the value of the "v0" field.
func (m *SysCasbinRuleMutation) ClearV0() {
	m.v0 = nil
	m.clearedFields[syscasbinrule.FieldV0] = struct{}{}
}

// V0Cleared returns if the "v0" field was cleared in this mutation.
func (m *SysCasbinRuleMutation) V0Cleared() bool {
	_, ok := m.clearedFields[syscasbinrule.FieldV0]
	return ok
}

// ResetV0 resets all changes to the "v0" field.
func (m *SysCasbinRuleMutation) ResetV0() {
	m.v0 = nil
	delete(m.clearedFields, syscasbinrule.FieldV0)
}

// SetV1 sets the "v1" field.
func (m *SysCasbinRuleMutation) SetV1(s string) {
	m.v1 = &s
}

// V1 returns the value of the "v1" field in the mutation.
func (m *SysCasbinRuleMutation) V1() (r string, exists bool) {
	v := m.v1
	if v == nil {
		return
	}
	return *v, true
}

// OldV1 returns the old "v1" field's value of the SysCasbinRule entity.
// If the SysCasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysCasbinRuleMutation) OldV1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV1: %w", err)
	}
	return oldValue.V1, nil
}

// ClearV1 clears the value of the "v1" field.
func (m *SysCasbinRuleMutation) ClearV1() {
	m.v1 = nil
	m.clearedFields[syscasbinrule.FieldV1] = struct{}{}
}

// V1Cleared returns if the "v1" field was cleared in this mutation.
func (m *SysCasbinRuleMutation) V1Cleared() bool {
	_, ok := m.clearedFields[syscasbinrule.FieldV1]
	return ok
}

// ResetV1 resets all changes to the "v1" field.
func (m *SysCasbinRuleMutation) ResetV1() {
	m.v1 = nil
	delete(m.clearedFields, syscasbinrule.FieldV1)
}

// SetV2 sets the "v2" field.
func (m *SysCasbinRuleMutation) SetV2(s string) {
	m.v2 = &s
}

// V2 returns the value of the "v2" field in the mutation.
func (m *SysCasbinRuleMutation) V2() (r string, exists bool) {
	v := m.v2
	if v == nil {
		return
	}
	return *v, true
}

// OldV2 returns the old "v2" field's value of the SysCasbinRule entity.
// If the SysCasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysCasbinRuleMutation) OldV2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV2: %w", err)
	}
	return oldValue.V2, nil
}

// ClearV2 clears the value of the "v2" field.
func (m *SysCasbinRuleMutation) ClearV2() {
	m.v2 = nil
	m.clearedFields[syscasbinrule.FieldV2] = struct{}{}
}

// V2Cleared returns if the "v2" field was cleared in this mutation.
func (m *SysCasbinRuleMutation) V2Cleared() bool {
	_, ok := m.clearedFields[syscasbinrule.FieldV2]
	return ok
}

// ResetV2 resets all changes to the "v2" field.
func (m *SysCasbinRuleMutation) ResetV2() {
	m.v2 = nil
	delete(m.clearedFields, syscasbinrule.FieldV2)
}

// SetV3 sets the "v3" field.
func (m *SysCasbinRuleMutation) SetV3(s string) {
	m.v3 = &s
}

// V3 returns the value of the "v3" field in the mutation.
func (m *SysCasbinRuleMutation) V3() (r string, exists bool) {
	v := m.v3
	if v == nil {
		return
	}
	return *v, true
}

// OldV3 returns the old "v3" field's value of the SysCasbinRule entity.
// If the SysCasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysCasbinRuleMutation) OldV3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV3: %w", err)
	}
	return oldValue.V3, nil
}

// ClearV3 clears the value of the "v3" field.
func (m *SysCasbinRuleMutation) ClearV3() {
	m.v3 = nil
	m.clearedFields[syscasbinrule.FieldV3] = struct{}{}
}

// V3Cleared returns if the "v3" field was cleared in this mutation.
func (m *SysCasbinRuleMutation) V3Cleared() bool {
	_, ok := m.clearedFields[syscasbinrule.FieldV3]
	return ok
}

// ResetV3 resets all changes to the "v3" field.
func (m *SysCasbinRuleMutation) ResetV3() {
	m.v3 = nil
	delete(m.clearedFields, syscasbinrule.FieldV3)
}

// SetV4 sets the "v4" field.
func (m *SysCasbinRuleMutation) SetV4(s string) {
	m.v4 = &s
}

// V4 returns the value of the "v4" field in the mutation.
func (m *SysCasbinRuleMutation) V4() (r string, exists bool) {
	v := m.v4
	if v == nil {
		return
	}
	return *v, true
}

// OldV4 returns the old "v4" field's value of the SysCasbinRule entity.
// If the SysCasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysCasbinRuleMutation) OldV4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV4: %w", err)
	}
	return oldValue.V4, nil
}

// ClearV4 clears the value of the "v4" field.
func (m *SysCasbinRuleMutation) ClearV4() {
	m.v4 = nil
	m.clearedFields[syscasbinrule.FieldV4] = struct{}{}
}

// V4Cleared returns if the "v4" field was cleared in this mutation.
func (m *SysCasbinRuleMutation) V4Cleared() bool {
	_, ok := m.clearedFields[syscasbinrule.FieldV4]
	return ok
}

// ResetV4 resets all changes to the "v4" field.
func (m *SysCasbinRuleMutation) ResetV4() {
	m.v4 = nil
	delete(m.clearedFields, syscasbinrule.FieldV4)
}

// SetV5 sets the "v5" field.
func (m *SysCasbinRuleMutation) SetV5(s string) {
	m.v5 = &s
}

// V5 returns the value of the "v5" field in the mutation.
func (m *SysCasbinRuleMutation) V5() (r string, exists bool) {
	v := m.v5
	if v == nil {
		return
	}
	return *v, true
}

// OldV5 returns the old "v5" field's value of the SysCasbinRule entity.
// If the SysCasbinRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysCasbinRuleMutation) OldV5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV5: %w", err)
	}
	return oldValue.V5, nil
}

// ClearV5 clears the value of the "v5" field.
func (m *SysCasbinRuleMutation) ClearV5() {
	m.v5 = nil
	m.clearedFields[syscasbinrule.FieldV5] = struct{}{}
}

// V5Cleared returns if the "v5" field was cleared in this mutation.
func (m *SysCasbinRuleMutation) V5Cleared() bool {
	_, ok := m.clearedFields[syscasbinrule.FieldV5]
	return ok
}

// ResetV5 resets all changes to the "v5" field.
func (m *SysCasbinRuleMutation) ResetV5() {
	m.v5 = nil
	delete(m.clearedFields, syscasbinrule.FieldV5)
}

// Where appends a list predicates to the SysCasbinRuleMutation builder.
func (m *SysCasbinRuleMutation) Where(ps ...predicate.SysCasbinRule) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysCasbinRuleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysCasbinRuleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysCasbinRule, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysCasbinRuleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysCasbinRuleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysCasbinRule).
func (m *SysCasbinRuleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysCasbinRuleMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.ptype != nil {
		fields = append(fields, syscasbinrule.FieldPtype)
	}
	if m.v0 != nil {
		fields = append(fields, syscasbinrule.FieldV0)
	}
	if m.v1 != nil {
		fields = append(fields, syscasbinrule.FieldV1)
	}
	if m.v2 != nil {
		fields = append(fields, syscasbinrule.FieldV2)
	}
	if m.v3 != nil {
		fields = append(fields, syscasbinrule.FieldV3)
	}
	if m.v4 != nil {
		fields = append(fields, syscasbinrule.FieldV4)
	}
	if m.v5 != nil {
		fields = append(fields, syscasbinrule.FieldV5)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysCasbinRuleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syscasbinrule.FieldPtype:
		return m.Ptype()
	case syscasbinrule.FieldV0:
		return m.V0()
	case syscasbinrule.FieldV1:
		return m.V1()
	case syscasbinrule.FieldV2:
		return m.V2()
	case syscasbinrule.FieldV3:
		return m.V3()
	case syscasbinrule.FieldV4:
		return m.V4()
	case syscasbinrule.FieldV5:
		return m.V5()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysCasbinRuleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syscasbinrule.FieldPtype:
		return m.OldPtype(ctx)
	case syscasbinrule.FieldV0:
		return m.OldV0(ctx)
	case syscasbinrule.FieldV1:
		return m.OldV1(ctx)
	case syscasbinrule.FieldV2:
		return m.OldV2(ctx)
	case syscasbinrule.FieldV3:
		return m.OldV3(ctx)
	case syscasbinrule.FieldV4:
		return m.OldV4(ctx)
	case syscasbinrule.FieldV5:
		return m.OldV5(ctx)
	}
	return nil, fmt.Errorf("unknown SysCasbinRule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysCasbinRuleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syscasbinrule.FieldPtype:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPtype(v)
		return nil
	case syscasbinrule.FieldV0:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV0(v)
		return nil
	case syscasbinrule.FieldV1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV1(v)
		return nil
	case syscasbinrule.FieldV2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV2(v)
		return nil
	case syscasbinrule.FieldV3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV3(v)
		return nil
	case syscasbinrule.FieldV4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV4(v)
		return nil
	case syscasbinrule.FieldV5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV5(v)
		return nil
	}
	return fmt.Errorf("unknown SysCasbinRule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysCasbinRuleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysCasbinRuleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysCasbinRuleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysCasbinRule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysCasbinRuleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(syscasbinrule.FieldPtype) {
		fields = append(fields, syscasbinrule.FieldPtype)
	}
	if m.FieldCleared(syscasbinrule.FieldV0) {
		fields = append(fields, syscasbinrule.FieldV0)
	}
	if m.FieldCleared(syscasbinrule.FieldV1) {
		fields = append(fields, syscasbinrule.FieldV1)
	}
	if m.FieldCleared(syscasbinrule.FieldV2) {
		fields = append(fields, syscasbinrule.FieldV2)
	}
	if m.FieldCleared(syscasbinrule.FieldV3) {
		fields = append(fields, syscasbinrule.FieldV3)
	}
	if m.FieldCleared(syscasbinrule.FieldV4) {
		fields = append(fields, syscasbinrule.FieldV4)
	}
	if m.FieldCleared(syscasbinrule.FieldV5) {
		fields = append(fields, syscasbinrule.FieldV5)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysCasbinRuleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysCasbinRuleMutation) ClearField(name string) error {
	switch name {
	case syscasbinrule.FieldPtype:
		m.ClearPtype()
		return nil
	case syscasbinrule.FieldV0:
		m.ClearV0()
		return nil
	case syscasbinrule.FieldV1:
		m.ClearV1()
		return nil
	case syscasbinrule.FieldV2:
		m.ClearV2()
		return nil
	case syscasbinrule.FieldV3:
		m.ClearV3()
		return nil
	case syscasbinrule.FieldV4:
		m.ClearV4()
		return nil
	case syscasbinrule.FieldV5:
		m.ClearV5()
		return nil
	}
	return fmt.Errorf("unknown SysCasbinRule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysCasbinRuleMutation) ResetField(name string) error {
	switch name {
	case syscasbinrule.FieldPtype:
		m.ResetPtype()
		return nil
	case syscasbinrule.FieldV0:
		m.ResetV0()
		return nil
	case syscasbinrule.FieldV1:
		m.ResetV1()
		return nil
	case syscasbinrule.FieldV2:
		m.ResetV2()
		return nil
	case syscasbinrule.FieldV3:
		m.ResetV3()
		return nil
	case syscasbinrule.FieldV4:
		m.ResetV4()
		return nil
	case syscasbinrule.FieldV5:
		m.ResetV5()
		return nil
	}
	return fmt.Errorf("unknown SysCasbinRule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysCasbinRuleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysCasbinRuleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysCasbinRuleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysCasbinRuleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysCasbinRuleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysCasbinRuleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysCasbinRuleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysCasbinRule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysCasbinRuleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysCasbinRule edge %s", name)
}

// SysMenuMutation represents an operation that mutates the SysMenu nodes in the graph.
type SysMenuMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	created_at    *time.Time
	updated_at    *time.Time
	delete_at     *time.Time
	remark        *string
	pid           *int64
	addpid        *int64
	name          *string
	title         *string
	icon          *string
	condition     *string
	menu_type     *int8
	addmenu_type  *int8
	weigh         *int64
	addweigh      *int64
	is_hide       *int8
	addis_hide    *int8
	_path         *string
	component     *string
	is_link       *int8
	addis_link    *int8
	module_type   *string
	model_id      *int64
	addmodel_id   *int64
	is_iframe     *int8
	addis_iframe  *int8
	is_cached     *int8
	addis_cached  *int8
	redirect      *string
	is_affix      *int8
	addis_affix   *int8
	link_url      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysMenu, error)
	predicates    []predicate.SysMenu
}

var _ ent.Mutation = (*SysMenuMutation)(nil)

// sysmenuOption allows management of the mutation configuration using functional options.
type sysmenuOption func(*SysMenuMutation)

// newSysMenuMutation creates new mutation for the SysMenu entity.
func newSysMenuMutation(c config, op Op, opts ...sysmenuOption) *SysMenuMutation {
	m := &SysMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuID sets the ID field of the mutation.
func withSysMenuID(id int64) sysmenuOption {
	return func(m *SysMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenu
		)
		m.oldValue = func(ctx context.Context) (*SysMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenu sets the old SysMenu of the mutation.
func withSysMenu(node *SysMenu) sysmenuOption {
	return func(m *SysMenuMutation) {
		m.oldValue = func(context.Context) (*SysMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysMenu entities.
func (m *SysMenuMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysMenuMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SysMenuMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysMenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysMenuMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysmenu.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysMenuMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysMenuMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysmenu.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysMenuMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysMenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysMenuMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysmenu.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysMenuMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysMenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysmenu.FieldUpdatedAt)
}

// SetDeleteAt sets the "delete_at" field.
func (m *SysMenuMutation) SetDeleteAt(t time.Time) {
	m.delete_at = &t
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *SysMenuMutation) DeleteAt() (r time.Time, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldDeleteAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (m *SysMenuMutation) ClearDeleteAt() {
	m.delete_at = nil
	m.clearedFields[sysmenu.FieldDeleteAt] = struct{}{}
}

// DeleteAtCleared returns if the "delete_at" field was cleared in this mutation.
func (m *SysMenuMutation) DeleteAtCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldDeleteAt]
	return ok
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *SysMenuMutation) ResetDeleteAt() {
	m.delete_at = nil
	delete(m.clearedFields, sysmenu.FieldDeleteAt)
}

// SetRemark sets the "remark" field.
func (m *SysMenuMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysMenuMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysMenuMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysmenu.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysMenuMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysMenuMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysmenu.FieldRemark)
}

// SetPid sets the "pid" field.
func (m *SysMenuMutation) SetPid(i int64) {
	m.pid = &i
	m.addpid = nil
}

// Pid returns the value of the "pid" field in the mutation.
func (m *SysMenuMutation) Pid() (r int64, exists bool) {
	v := m.pid
	if v == nil {
		return
	}
	return *v, true
}

// OldPid returns the old "pid" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldPid(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPid: %w", err)
	}
	return oldValue.Pid, nil
}

// AddPid adds i to the "pid" field.
func (m *SysMenuMutation) AddPid(i int64) {
	if m.addpid != nil {
		*m.addpid += i
	} else {
		m.addpid = &i
	}
}

// AddedPid returns the value that was added to the "pid" field in this mutation.
func (m *SysMenuMutation) AddedPid() (r int64, exists bool) {
	v := m.addpid
	if v == nil {
		return
	}
	return *v, true
}

// ResetPid resets all changes to the "pid" field.
func (m *SysMenuMutation) ResetPid() {
	m.pid = nil
	m.addpid = nil
}

// SetName sets the "name" field.
func (m *SysMenuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysMenuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *SysMenuMutation) ClearName() {
	m.name = nil
	m.clearedFields[sysmenu.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *SysMenuMutation) NameCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *SysMenuMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, sysmenu.FieldName)
}

// SetTitle sets the "title" field.
func (m *SysMenuMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SysMenuMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *SysMenuMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[sysmenu.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *SysMenuMutation) TitleCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *SysMenuMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, sysmenu.FieldTitle)
}

// SetIcon sets the "icon" field.
func (m *SysMenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *SysMenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ClearIcon clears the value of the "icon" field.
func (m *SysMenuMutation) ClearIcon() {
	m.icon = nil
	m.clearedFields[sysmenu.FieldIcon] = struct{}{}
}

// IconCleared returns if the "icon" field was cleared in this mutation.
func (m *SysMenuMutation) IconCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIcon]
	return ok
}

// ResetIcon resets all changes to the "icon" field.
func (m *SysMenuMutation) ResetIcon() {
	m.icon = nil
	delete(m.clearedFields, sysmenu.FieldIcon)
}

// SetCondition sets the "condition" field.
func (m *SysMenuMutation) SetCondition(s string) {
	m.condition = &s
}

// Condition returns the value of the "condition" field in the mutation.
func (m *SysMenuMutation) Condition() (r string, exists bool) {
	v := m.condition
	if v == nil {
		return
	}
	return *v, true
}

// OldCondition returns the old "condition" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldCondition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCondition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCondition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCondition: %w", err)
	}
	return oldValue.Condition, nil
}

// ClearCondition clears the value of the "condition" field.
func (m *SysMenuMutation) ClearCondition() {
	m.condition = nil
	m.clearedFields[sysmenu.FieldCondition] = struct{}{}
}

// ConditionCleared returns if the "condition" field was cleared in this mutation.
func (m *SysMenuMutation) ConditionCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldCondition]
	return ok
}

// ResetCondition resets all changes to the "condition" field.
func (m *SysMenuMutation) ResetCondition() {
	m.condition = nil
	delete(m.clearedFields, sysmenu.FieldCondition)
}

// SetMenuType sets the "menu_type" field.
func (m *SysMenuMutation) SetMenuType(i int8) {
	m.menu_type = &i
	m.addmenu_type = nil
}

// MenuType returns the value of the "menu_type" field in the mutation.
func (m *SysMenuMutation) MenuType() (r int8, exists bool) {
	v := m.menu_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuType returns the old "menu_type" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldMenuType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuType: %w", err)
	}
	return oldValue.MenuType, nil
}

// AddMenuType adds i to the "menu_type" field.
func (m *SysMenuMutation) AddMenuType(i int8) {
	if m.addmenu_type != nil {
		*m.addmenu_type += i
	} else {
		m.addmenu_type = &i
	}
}

// AddedMenuType returns the value that was added to the "menu_type" field in this mutation.
func (m *SysMenuMutation) AddedMenuType() (r int8, exists bool) {
	v := m.addmenu_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearMenuType clears the value of the "menu_type" field.
func (m *SysMenuMutation) ClearMenuType() {
	m.menu_type = nil
	m.addmenu_type = nil
	m.clearedFields[sysmenu.FieldMenuType] = struct{}{}
}

// MenuTypeCleared returns if the "menu_type" field was cleared in this mutation.
func (m *SysMenuMutation) MenuTypeCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldMenuType]
	return ok
}

// ResetMenuType resets all changes to the "menu_type" field.
func (m *SysMenuMutation) ResetMenuType() {
	m.menu_type = nil
	m.addmenu_type = nil
	delete(m.clearedFields, sysmenu.FieldMenuType)
}

// SetWeigh sets the "weigh" field.
func (m *SysMenuMutation) SetWeigh(i int64) {
	m.weigh = &i
	m.addweigh = nil
}

// Weigh returns the value of the "weigh" field in the mutation.
func (m *SysMenuMutation) Weigh() (r int64, exists bool) {
	v := m.weigh
	if v == nil {
		return
	}
	return *v, true
}

// OldWeigh returns the old "weigh" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldWeigh(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeigh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeigh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeigh: %w", err)
	}
	return oldValue.Weigh, nil
}

// AddWeigh adds i to the "weigh" field.
func (m *SysMenuMutation) AddWeigh(i int64) {
	if m.addweigh != nil {
		*m.addweigh += i
	} else {
		m.addweigh = &i
	}
}

// AddedWeigh returns the value that was added to the "weigh" field in this mutation.
func (m *SysMenuMutation) AddedWeigh() (r int64, exists bool) {
	v := m.addweigh
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeigh clears the value of the "weigh" field.
func (m *SysMenuMutation) ClearWeigh() {
	m.weigh = nil
	m.addweigh = nil
	m.clearedFields[sysmenu.FieldWeigh] = struct{}{}
}

// WeighCleared returns if the "weigh" field was cleared in this mutation.
func (m *SysMenuMutation) WeighCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldWeigh]
	return ok
}

// ResetWeigh resets all changes to the "weigh" field.
func (m *SysMenuMutation) ResetWeigh() {
	m.weigh = nil
	m.addweigh = nil
	delete(m.clearedFields, sysmenu.FieldWeigh)
}

// SetIsHide sets the "is_hide" field.
func (m *SysMenuMutation) SetIsHide(i int8) {
	m.is_hide = &i
	m.addis_hide = nil
}

// IsHide returns the value of the "is_hide" field in the mutation.
func (m *SysMenuMutation) IsHide() (r int8, exists bool) {
	v := m.is_hide
	if v == nil {
		return
	}
	return *v, true
}

// OldIsHide returns the old "is_hide" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsHide(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsHide is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsHide requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsHide: %w", err)
	}
	return oldValue.IsHide, nil
}

// AddIsHide adds i to the "is_hide" field.
func (m *SysMenuMutation) AddIsHide(i int8) {
	if m.addis_hide != nil {
		*m.addis_hide += i
	} else {
		m.addis_hide = &i
	}
}

// AddedIsHide returns the value that was added to the "is_hide" field in this mutation.
func (m *SysMenuMutation) AddedIsHide() (r int8, exists bool) {
	v := m.addis_hide
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsHide clears the value of the "is_hide" field.
func (m *SysMenuMutation) ClearIsHide() {
	m.is_hide = nil
	m.addis_hide = nil
	m.clearedFields[sysmenu.FieldIsHide] = struct{}{}
}

// IsHideCleared returns if the "is_hide" field was cleared in this mutation.
func (m *SysMenuMutation) IsHideCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIsHide]
	return ok
}

// ResetIsHide resets all changes to the "is_hide" field.
func (m *SysMenuMutation) ResetIsHide() {
	m.is_hide = nil
	m.addis_hide = nil
	delete(m.clearedFields, sysmenu.FieldIsHide)
}

// SetPath sets the "path" field.
func (m *SysMenuMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *SysMenuMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *SysMenuMutation) ClearPath() {
	m._path = nil
	m.clearedFields[sysmenu.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *SysMenuMutation) PathCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *SysMenuMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, sysmenu.FieldPath)
}

// SetComponent sets the "component" field.
func (m *SysMenuMutation) SetComponent(s string) {
	m.component = &s
}

// Component returns the value of the "component" field in the mutation.
func (m *SysMenuMutation) Component() (r string, exists bool) {
	v := m.component
	if v == nil {
		return
	}
	return *v, true
}

// OldComponent returns the old "component" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldComponent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComponent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComponent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComponent: %w", err)
	}
	return oldValue.Component, nil
}

// ClearComponent clears the value of the "component" field.
func (m *SysMenuMutation) ClearComponent() {
	m.component = nil
	m.clearedFields[sysmenu.FieldComponent] = struct{}{}
}

// ComponentCleared returns if the "component" field was cleared in this mutation.
func (m *SysMenuMutation) ComponentCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldComponent]
	return ok
}

// ResetComponent resets all changes to the "component" field.
func (m *SysMenuMutation) ResetComponent() {
	m.component = nil
	delete(m.clearedFields, sysmenu.FieldComponent)
}

// SetIsLink sets the "is_link" field.
func (m *SysMenuMutation) SetIsLink(i int8) {
	m.is_link = &i
	m.addis_link = nil
}

// IsLink returns the value of the "is_link" field in the mutation.
func (m *SysMenuMutation) IsLink() (r int8, exists bool) {
	v := m.is_link
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLink returns the old "is_link" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsLink(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLink: %w", err)
	}
	return oldValue.IsLink, nil
}

// AddIsLink adds i to the "is_link" field.
func (m *SysMenuMutation) AddIsLink(i int8) {
	if m.addis_link != nil {
		*m.addis_link += i
	} else {
		m.addis_link = &i
	}
}

// AddedIsLink returns the value that was added to the "is_link" field in this mutation.
func (m *SysMenuMutation) AddedIsLink() (r int8, exists bool) {
	v := m.addis_link
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsLink clears the value of the "is_link" field.
func (m *SysMenuMutation) ClearIsLink() {
	m.is_link = nil
	m.addis_link = nil
	m.clearedFields[sysmenu.FieldIsLink] = struct{}{}
}

// IsLinkCleared returns if the "is_link" field was cleared in this mutation.
func (m *SysMenuMutation) IsLinkCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIsLink]
	return ok
}

// ResetIsLink resets all changes to the "is_link" field.
func (m *SysMenuMutation) ResetIsLink() {
	m.is_link = nil
	m.addis_link = nil
	delete(m.clearedFields, sysmenu.FieldIsLink)
}

// SetModuleType sets the "module_type" field.
func (m *SysMenuMutation) SetModuleType(s string) {
	m.module_type = &s
}

// ModuleType returns the value of the "module_type" field in the mutation.
func (m *SysMenuMutation) ModuleType() (r string, exists bool) {
	v := m.module_type
	if v == nil {
		return
	}
	return *v, true
}

// OldModuleType returns the old "module_type" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldModuleType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModuleType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModuleType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModuleType: %w", err)
	}
	return oldValue.ModuleType, nil
}

// ClearModuleType clears the value of the "module_type" field.
func (m *SysMenuMutation) ClearModuleType() {
	m.module_type = nil
	m.clearedFields[sysmenu.FieldModuleType] = struct{}{}
}

// ModuleTypeCleared returns if the "module_type" field was cleared in this mutation.
func (m *SysMenuMutation) ModuleTypeCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldModuleType]
	return ok
}

// ResetModuleType resets all changes to the "module_type" field.
func (m *SysMenuMutation) ResetModuleType() {
	m.module_type = nil
	delete(m.clearedFields, sysmenu.FieldModuleType)
}

// SetModelID sets the "model_id" field.
func (m *SysMenuMutation) SetModelID(i int64) {
	m.model_id = &i
	m.addmodel_id = nil
}

// ModelID returns the value of the "model_id" field in the mutation.
func (m *SysMenuMutation) ModelID() (r int64, exists bool) {
	v := m.model_id
	if v == nil {
		return
	}
	return *v, true
}

// OldModelID returns the old "model_id" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldModelID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModelID: %w", err)
	}
	return oldValue.ModelID, nil
}

// AddModelID adds i to the "model_id" field.
func (m *SysMenuMutation) AddModelID(i int64) {
	if m.addmodel_id != nil {
		*m.addmodel_id += i
	} else {
		m.addmodel_id = &i
	}
}

// AddedModelID returns the value that was added to the "model_id" field in this mutation.
func (m *SysMenuMutation) AddedModelID() (r int64, exists bool) {
	v := m.addmodel_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearModelID clears the value of the "model_id" field.
func (m *SysMenuMutation) ClearModelID() {
	m.model_id = nil
	m.addmodel_id = nil
	m.clearedFields[sysmenu.FieldModelID] = struct{}{}
}

// ModelIDCleared returns if the "model_id" field was cleared in this mutation.
func (m *SysMenuMutation) ModelIDCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldModelID]
	return ok
}

// ResetModelID resets all changes to the "model_id" field.
func (m *SysMenuMutation) ResetModelID() {
	m.model_id = nil
	m.addmodel_id = nil
	delete(m.clearedFields, sysmenu.FieldModelID)
}

// SetIsIframe sets the "is_iframe" field.
func (m *SysMenuMutation) SetIsIframe(i int8) {
	m.is_iframe = &i
	m.addis_iframe = nil
}

// IsIframe returns the value of the "is_iframe" field in the mutation.
func (m *SysMenuMutation) IsIframe() (r int8, exists bool) {
	v := m.is_iframe
	if v == nil {
		return
	}
	return *v, true
}

// OldIsIframe returns the old "is_iframe" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsIframe(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsIframe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsIframe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsIframe: %w", err)
	}
	return oldValue.IsIframe, nil
}

// AddIsIframe adds i to the "is_iframe" field.
func (m *SysMenuMutation) AddIsIframe(i int8) {
	if m.addis_iframe != nil {
		*m.addis_iframe += i
	} else {
		m.addis_iframe = &i
	}
}

// AddedIsIframe returns the value that was added to the "is_iframe" field in this mutation.
func (m *SysMenuMutation) AddedIsIframe() (r int8, exists bool) {
	v := m.addis_iframe
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsIframe clears the value of the "is_iframe" field.
func (m *SysMenuMutation) ClearIsIframe() {
	m.is_iframe = nil
	m.addis_iframe = nil
	m.clearedFields[sysmenu.FieldIsIframe] = struct{}{}
}

// IsIframeCleared returns if the "is_iframe" field was cleared in this mutation.
func (m *SysMenuMutation) IsIframeCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIsIframe]
	return ok
}

// ResetIsIframe resets all changes to the "is_iframe" field.
func (m *SysMenuMutation) ResetIsIframe() {
	m.is_iframe = nil
	m.addis_iframe = nil
	delete(m.clearedFields, sysmenu.FieldIsIframe)
}

// SetIsCached sets the "is_cached" field.
func (m *SysMenuMutation) SetIsCached(i int8) {
	m.is_cached = &i
	m.addis_cached = nil
}

// IsCached returns the value of the "is_cached" field in the mutation.
func (m *SysMenuMutation) IsCached() (r int8, exists bool) {
	v := m.is_cached
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCached returns the old "is_cached" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsCached(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCached is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCached requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCached: %w", err)
	}
	return oldValue.IsCached, nil
}

// AddIsCached adds i to the "is_cached" field.
func (m *SysMenuMutation) AddIsCached(i int8) {
	if m.addis_cached != nil {
		*m.addis_cached += i
	} else {
		m.addis_cached = &i
	}
}

// AddedIsCached returns the value that was added to the "is_cached" field in this mutation.
func (m *SysMenuMutation) AddedIsCached() (r int8, exists bool) {
	v := m.addis_cached
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsCached clears the value of the "is_cached" field.
func (m *SysMenuMutation) ClearIsCached() {
	m.is_cached = nil
	m.addis_cached = nil
	m.clearedFields[sysmenu.FieldIsCached] = struct{}{}
}

// IsCachedCleared returns if the "is_cached" field was cleared in this mutation.
func (m *SysMenuMutation) IsCachedCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIsCached]
	return ok
}

// ResetIsCached resets all changes to the "is_cached" field.
func (m *SysMenuMutation) ResetIsCached() {
	m.is_cached = nil
	m.addis_cached = nil
	delete(m.clearedFields, sysmenu.FieldIsCached)
}

// SetRedirect sets the "redirect" field.
func (m *SysMenuMutation) SetRedirect(s string) {
	m.redirect = &s
}

// Redirect returns the value of the "redirect" field in the mutation.
func (m *SysMenuMutation) Redirect() (r string, exists bool) {
	v := m.redirect
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirect returns the old "redirect" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldRedirect(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirect: %w", err)
	}
	return oldValue.Redirect, nil
}

// ClearRedirect clears the value of the "redirect" field.
func (m *SysMenuMutation) ClearRedirect() {
	m.redirect = nil
	m.clearedFields[sysmenu.FieldRedirect] = struct{}{}
}

// RedirectCleared returns if the "redirect" field was cleared in this mutation.
func (m *SysMenuMutation) RedirectCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldRedirect]
	return ok
}

// ResetRedirect resets all changes to the "redirect" field.
func (m *SysMenuMutation) ResetRedirect() {
	m.redirect = nil
	delete(m.clearedFields, sysmenu.FieldRedirect)
}

// SetIsAffix sets the "is_affix" field.
func (m *SysMenuMutation) SetIsAffix(i int8) {
	m.is_affix = &i
	m.addis_affix = nil
}

// IsAffix returns the value of the "is_affix" field in the mutation.
func (m *SysMenuMutation) IsAffix() (r int8, exists bool) {
	v := m.is_affix
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAffix returns the old "is_affix" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsAffix(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAffix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAffix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAffix: %w", err)
	}
	return oldValue.IsAffix, nil
}

// AddIsAffix adds i to the "is_affix" field.
func (m *SysMenuMutation) AddIsAffix(i int8) {
	if m.addis_affix != nil {
		*m.addis_affix += i
	} else {
		m.addis_affix = &i
	}
}

// AddedIsAffix returns the value that was added to the "is_affix" field in this mutation.
func (m *SysMenuMutation) AddedIsAffix() (r int8, exists bool) {
	v := m.addis_affix
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsAffix clears the value of the "is_affix" field.
func (m *SysMenuMutation) ClearIsAffix() {
	m.is_affix = nil
	m.addis_affix = nil
	m.clearedFields[sysmenu.FieldIsAffix] = struct{}{}
}

// IsAffixCleared returns if the "is_affix" field was cleared in this mutation.
func (m *SysMenuMutation) IsAffixCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIsAffix]
	return ok
}

// ResetIsAffix resets all changes to the "is_affix" field.
func (m *SysMenuMutation) ResetIsAffix() {
	m.is_affix = nil
	m.addis_affix = nil
	delete(m.clearedFields, sysmenu.FieldIsAffix)
}

// SetLinkURL sets the "link_url" field.
func (m *SysMenuMutation) SetLinkURL(s string) {
	m.link_url = &s
}

// LinkURL returns the value of the "link_url" field in the mutation.
func (m *SysMenuMutation) LinkURL() (r string, exists bool) {
	v := m.link_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkURL returns the old "link_url" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldLinkURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkURL: %w", err)
	}
	return oldValue.LinkURL, nil
}

// ClearLinkURL clears the value of the "link_url" field.
func (m *SysMenuMutation) ClearLinkURL() {
	m.link_url = nil
	m.clearedFields[sysmenu.FieldLinkURL] = struct{}{}
}

// LinkURLCleared returns if the "link_url" field was cleared in this mutation.
func (m *SysMenuMutation) LinkURLCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldLinkURL]
	return ok
}

// ResetLinkURL resets all changes to the "link_url" field.
func (m *SysMenuMutation) ResetLinkURL() {
	m.link_url = nil
	delete(m.clearedFields, sysmenu.FieldLinkURL)
}

// Where appends a list predicates to the SysMenuMutation builder.
func (m *SysMenuMutation) Where(ps ...predicate.SysMenu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysMenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysMenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysMenu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysMenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysMenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysMenu).
func (m *SysMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m.created_at != nil {
		fields = append(fields, sysmenu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysmenu.FieldUpdatedAt)
	}
	if m.delete_at != nil {
		fields = append(fields, sysmenu.FieldDeleteAt)
	}
	if m.remark != nil {
		fields = append(fields, sysmenu.FieldRemark)
	}
	if m.pid != nil {
		fields = append(fields, sysmenu.FieldPid)
	}
	if m.name != nil {
		fields = append(fields, sysmenu.FieldName)
	}
	if m.title != nil {
		fields = append(fields, sysmenu.FieldTitle)
	}
	if m.icon != nil {
		fields = append(fields, sysmenu.FieldIcon)
	}
	if m.condition != nil {
		fields = append(fields, sysmenu.FieldCondition)
	}
	if m.menu_type != nil {
		fields = append(fields, sysmenu.FieldMenuType)
	}
	if m.weigh != nil {
		fields = append(fields, sysmenu.FieldWeigh)
	}
	if m.is_hide != nil {
		fields = append(fields, sysmenu.FieldIsHide)
	}
	if m._path != nil {
		fields = append(fields, sysmenu.FieldPath)
	}
	if m.component != nil {
		fields = append(fields, sysmenu.FieldComponent)
	}
	if m.is_link != nil {
		fields = append(fields, sysmenu.FieldIsLink)
	}
	if m.module_type != nil {
		fields = append(fields, sysmenu.FieldModuleType)
	}
	if m.model_id != nil {
		fields = append(fields, sysmenu.FieldModelID)
	}
	if m.is_iframe != nil {
		fields = append(fields, sysmenu.FieldIsIframe)
	}
	if m.is_cached != nil {
		fields = append(fields, sysmenu.FieldIsCached)
	}
	if m.redirect != nil {
		fields = append(fields, sysmenu.FieldRedirect)
	}
	if m.is_affix != nil {
		fields = append(fields, sysmenu.FieldIsAffix)
	}
	if m.link_url != nil {
		fields = append(fields, sysmenu.FieldLinkURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldCreatedAt:
		return m.CreatedAt()
	case sysmenu.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysmenu.FieldDeleteAt:
		return m.DeleteAt()
	case sysmenu.FieldRemark:
		return m.Remark()
	case sysmenu.FieldPid:
		return m.Pid()
	case sysmenu.FieldName:
		return m.Name()
	case sysmenu.FieldTitle:
		return m.Title()
	case sysmenu.FieldIcon:
		return m.Icon()
	case sysmenu.FieldCondition:
		return m.Condition()
	case sysmenu.FieldMenuType:
		return m.MenuType()
	case sysmenu.FieldWeigh:
		return m.Weigh()
	case sysmenu.FieldIsHide:
		return m.IsHide()
	case sysmenu.FieldPath:
		return m.Path()
	case sysmenu.FieldComponent:
		return m.Component()
	case sysmenu.FieldIsLink:
		return m.IsLink()
	case sysmenu.FieldModuleType:
		return m.ModuleType()
	case sysmenu.FieldModelID:
		return m.ModelID()
	case sysmenu.FieldIsIframe:
		return m.IsIframe()
	case sysmenu.FieldIsCached:
		return m.IsCached()
	case sysmenu.FieldRedirect:
		return m.Redirect()
	case sysmenu.FieldIsAffix:
		return m.IsAffix()
	case sysmenu.FieldLinkURL:
		return m.LinkURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysmenu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysmenu.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case sysmenu.FieldRemark:
		return m.OldRemark(ctx)
	case sysmenu.FieldPid:
		return m.OldPid(ctx)
	case sysmenu.FieldName:
		return m.OldName(ctx)
	case sysmenu.FieldTitle:
		return m.OldTitle(ctx)
	case sysmenu.FieldIcon:
		return m.OldIcon(ctx)
	case sysmenu.FieldCondition:
		return m.OldCondition(ctx)
	case sysmenu.FieldMenuType:
		return m.OldMenuType(ctx)
	case sysmenu.FieldWeigh:
		return m.OldWeigh(ctx)
	case sysmenu.FieldIsHide:
		return m.OldIsHide(ctx)
	case sysmenu.FieldPath:
		return m.OldPath(ctx)
	case sysmenu.FieldComponent:
		return m.OldComponent(ctx)
	case sysmenu.FieldIsLink:
		return m.OldIsLink(ctx)
	case sysmenu.FieldModuleType:
		return m.OldModuleType(ctx)
	case sysmenu.FieldModelID:
		return m.OldModelID(ctx)
	case sysmenu.FieldIsIframe:
		return m.OldIsIframe(ctx)
	case sysmenu.FieldIsCached:
		return m.OldIsCached(ctx)
	case sysmenu.FieldRedirect:
		return m.OldRedirect(ctx)
	case sysmenu.FieldIsAffix:
		return m.OldIsAffix(ctx)
	case sysmenu.FieldLinkURL:
		return m.OldLinkURL(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysmenu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysmenu.FieldDeleteAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case sysmenu.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysmenu.FieldPid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPid(v)
		return nil
	case sysmenu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sysmenu.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case sysmenu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case sysmenu.FieldCondition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCondition(v)
		return nil
	case sysmenu.FieldMenuType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuType(v)
		return nil
	case sysmenu.FieldWeigh:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeigh(v)
		return nil
	case sysmenu.FieldIsHide:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsHide(v)
		return nil
	case sysmenu.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case sysmenu.FieldComponent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComponent(v)
		return nil
	case sysmenu.FieldIsLink:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLink(v)
		return nil
	case sysmenu.FieldModuleType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModuleType(v)
		return nil
	case sysmenu.FieldModelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModelID(v)
		return nil
	case sysmenu.FieldIsIframe:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsIframe(v)
		return nil
	case sysmenu.FieldIsCached:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCached(v)
		return nil
	case sysmenu.FieldRedirect:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirect(v)
		return nil
	case sysmenu.FieldIsAffix:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAffix(v)
		return nil
	case sysmenu.FieldLinkURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkURL(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuMutation) AddedFields() []string {
	var fields []string
	if m.addpid != nil {
		fields = append(fields, sysmenu.FieldPid)
	}
	if m.addmenu_type != nil {
		fields = append(fields, sysmenu.FieldMenuType)
	}
	if m.addweigh != nil {
		fields = append(fields, sysmenu.FieldWeigh)
	}
	if m.addis_hide != nil {
		fields = append(fields, sysmenu.FieldIsHide)
	}
	if m.addis_link != nil {
		fields = append(fields, sysmenu.FieldIsLink)
	}
	if m.addmodel_id != nil {
		fields = append(fields, sysmenu.FieldModelID)
	}
	if m.addis_iframe != nil {
		fields = append(fields, sysmenu.FieldIsIframe)
	}
	if m.addis_cached != nil {
		fields = append(fields, sysmenu.FieldIsCached)
	}
	if m.addis_affix != nil {
		fields = append(fields, sysmenu.FieldIsAffix)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldPid:
		return m.AddedPid()
	case sysmenu.FieldMenuType:
		return m.AddedMenuType()
	case sysmenu.FieldWeigh:
		return m.AddedWeigh()
	case sysmenu.FieldIsHide:
		return m.AddedIsHide()
	case sysmenu.FieldIsLink:
		return m.AddedIsLink()
	case sysmenu.FieldModelID:
		return m.AddedModelID()
	case sysmenu.FieldIsIframe:
		return m.AddedIsIframe()
	case sysmenu.FieldIsCached:
		return m.AddedIsCached()
	case sysmenu.FieldIsAffix:
		return m.AddedIsAffix()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldPid:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPid(v)
		return nil
	case sysmenu.FieldMenuType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMenuType(v)
		return nil
	case sysmenu.FieldWeigh:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeigh(v)
		return nil
	case sysmenu.FieldIsHide:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsHide(v)
		return nil
	case sysmenu.FieldIsLink:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsLink(v)
		return nil
	case sysmenu.FieldModelID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModelID(v)
		return nil
	case sysmenu.FieldIsIframe:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsIframe(v)
		return nil
	case sysmenu.FieldIsCached:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsCached(v)
		return nil
	case sysmenu.FieldIsAffix:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsAffix(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenu.FieldCreatedAt) {
		fields = append(fields, sysmenu.FieldCreatedAt)
	}
	if m.FieldCleared(sysmenu.FieldUpdatedAt) {
		fields = append(fields, sysmenu.FieldUpdatedAt)
	}
	if m.FieldCleared(sysmenu.FieldDeleteAt) {
		fields = append(fields, sysmenu.FieldDeleteAt)
	}
	if m.FieldCleared(sysmenu.FieldRemark) {
		fields = append(fields, sysmenu.FieldRemark)
	}
	if m.FieldCleared(sysmenu.FieldName) {
		fields = append(fields, sysmenu.FieldName)
	}
	if m.FieldCleared(sysmenu.FieldTitle) {
		fields = append(fields, sysmenu.FieldTitle)
	}
	if m.FieldCleared(sysmenu.FieldIcon) {
		fields = append(fields, sysmenu.FieldIcon)
	}
	if m.FieldCleared(sysmenu.FieldCondition) {
		fields = append(fields, sysmenu.FieldCondition)
	}
	if m.FieldCleared(sysmenu.FieldMenuType) {
		fields = append(fields, sysmenu.FieldMenuType)
	}
	if m.FieldCleared(sysmenu.FieldWeigh) {
		fields = append(fields, sysmenu.FieldWeigh)
	}
	if m.FieldCleared(sysmenu.FieldIsHide) {
		fields = append(fields, sysmenu.FieldIsHide)
	}
	if m.FieldCleared(sysmenu.FieldPath) {
		fields = append(fields, sysmenu.FieldPath)
	}
	if m.FieldCleared(sysmenu.FieldComponent) {
		fields = append(fields, sysmenu.FieldComponent)
	}
	if m.FieldCleared(sysmenu.FieldIsLink) {
		fields = append(fields, sysmenu.FieldIsLink)
	}
	if m.FieldCleared(sysmenu.FieldModuleType) {
		fields = append(fields, sysmenu.FieldModuleType)
	}
	if m.FieldCleared(sysmenu.FieldModelID) {
		fields = append(fields, sysmenu.FieldModelID)
	}
	if m.FieldCleared(sysmenu.FieldIsIframe) {
		fields = append(fields, sysmenu.FieldIsIframe)
	}
	if m.FieldCleared(sysmenu.FieldIsCached) {
		fields = append(fields, sysmenu.FieldIsCached)
	}
	if m.FieldCleared(sysmenu.FieldRedirect) {
		fields = append(fields, sysmenu.FieldRedirect)
	}
	if m.FieldCleared(sysmenu.FieldIsAffix) {
		fields = append(fields, sysmenu.FieldIsAffix)
	}
	if m.FieldCleared(sysmenu.FieldLinkURL) {
		fields = append(fields, sysmenu.FieldLinkURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuMutation) ClearField(name string) error {
	switch name {
	case sysmenu.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysmenu.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysmenu.FieldDeleteAt:
		m.ClearDeleteAt()
		return nil
	case sysmenu.FieldRemark:
		m.ClearRemark()
		return nil
	case sysmenu.FieldName:
		m.ClearName()
		return nil
	case sysmenu.FieldTitle:
		m.ClearTitle()
		return nil
	case sysmenu.FieldIcon:
		m.ClearIcon()
		return nil
	case sysmenu.FieldCondition:
		m.ClearCondition()
		return nil
	case sysmenu.FieldMenuType:
		m.ClearMenuType()
		return nil
	case sysmenu.FieldWeigh:
		m.ClearWeigh()
		return nil
	case sysmenu.FieldIsHide:
		m.ClearIsHide()
		return nil
	case sysmenu.FieldPath:
		m.ClearPath()
		return nil
	case sysmenu.FieldComponent:
		m.ClearComponent()
		return nil
	case sysmenu.FieldIsLink:
		m.ClearIsLink()
		return nil
	case sysmenu.FieldModuleType:
		m.ClearModuleType()
		return nil
	case sysmenu.FieldModelID:
		m.ClearModelID()
		return nil
	case sysmenu.FieldIsIframe:
		m.ClearIsIframe()
		return nil
	case sysmenu.FieldIsCached:
		m.ClearIsCached()
		return nil
	case sysmenu.FieldRedirect:
		m.ClearRedirect()
		return nil
	case sysmenu.FieldIsAffix:
		m.ClearIsAffix()
		return nil
	case sysmenu.FieldLinkURL:
		m.ClearLinkURL()
		return nil
	}
	return fmt.Errorf("unknown SysMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuMutation) ResetField(name string) error {
	switch name {
	case sysmenu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysmenu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysmenu.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case sysmenu.FieldRemark:
		m.ResetRemark()
		return nil
	case sysmenu.FieldPid:
		m.ResetPid()
		return nil
	case sysmenu.FieldName:
		m.ResetName()
		return nil
	case sysmenu.FieldTitle:
		m.ResetTitle()
		return nil
	case sysmenu.FieldIcon:
		m.ResetIcon()
		return nil
	case sysmenu.FieldCondition:
		m.ResetCondition()
		return nil
	case sysmenu.FieldMenuType:
		m.ResetMenuType()
		return nil
	case sysmenu.FieldWeigh:
		m.ResetWeigh()
		return nil
	case sysmenu.FieldIsHide:
		m.ResetIsHide()
		return nil
	case sysmenu.FieldPath:
		m.ResetPath()
		return nil
	case sysmenu.FieldComponent:
		m.ResetComponent()
		return nil
	case sysmenu.FieldIsLink:
		m.ResetIsLink()
		return nil
	case sysmenu.FieldModuleType:
		m.ResetModuleType()
		return nil
	case sysmenu.FieldModelID:
		m.ResetModelID()
		return nil
	case sysmenu.FieldIsIframe:
		m.ResetIsIframe()
		return nil
	case sysmenu.FieldIsCached:
		m.ResetIsCached()
		return nil
	case sysmenu.FieldRedirect:
		m.ResetRedirect()
		return nil
	case sysmenu.FieldIsAffix:
		m.ResetIsAffix()
		return nil
	case sysmenu.FieldLinkURL:
		m.ResetLinkURL()
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysMenu edge %s", name)
}

// SysRoleMutation represents an operation that mutates the SysRole nodes in the graph.
type SysRoleMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	created_at    *time.Time
	updated_at    *time.Time
	delete_at     *time.Time
	status        *int8
	addstatus     *int8
	remark        *string
	list_order    *int64
	addlist_order *int64
	name          *string
	data_scope    *int8
	adddata_scope *int8
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysRole, error)
	predicates    []predicate.SysRole
}

var _ ent.Mutation = (*SysRoleMutation)(nil)

// sysroleOption allows management of the mutation configuration using functional options.
type sysroleOption func(*SysRoleMutation)

// newSysRoleMutation creates new mutation for the SysRole entity.
func newSysRoleMutation(c config, op Op, opts ...sysroleOption) *SysRoleMutation {
	m := &SysRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRoleID sets the ID field of the mutation.
func withSysRoleID(id int64) sysroleOption {
	return func(m *SysRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRole
		)
		m.oldValue = func(ctx context.Context) (*SysRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRole sets the old SysRole of the mutation.
func withSysRole(node *SysRole) sysroleOption {
	return func(m *SysRoleMutation) {
		m.oldValue = func(context.Context) (*SysRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRole entities.
func (m *SysRoleMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRoleMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRoleMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SysRoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysRoleMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysrole.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysRoleMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysRoleMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysrole.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysRoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysRoleMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysrole.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysRoleMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysRoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysrole.FieldUpdatedAt)
}

// SetDeleteAt sets the "delete_at" field.
func (m *SysRoleMutation) SetDeleteAt(t time.Time) {
	m.delete_at = &t
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *SysRoleMutation) DeleteAt() (r time.Time, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldDeleteAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (m *SysRoleMutation) ClearDeleteAt() {
	m.delete_at = nil
	m.clearedFields[sysrole.FieldDeleteAt] = struct{}{}
}

// DeleteAtCleared returns if the "delete_at" field was cleared in this mutation.
func (m *SysRoleMutation) DeleteAtCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldDeleteAt]
	return ok
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *SysRoleMutation) ResetDeleteAt() {
	m.delete_at = nil
	delete(m.clearedFields, sysrole.FieldDeleteAt)
}

// SetStatus sets the "status" field.
func (m *SysRoleMutation) SetStatus(i int8) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SysRoleMutation) Status() (r int8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *SysRoleMutation) AddStatus(i int8) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SysRoleMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *SysRoleMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[sysrole.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *SysRoleMutation) StatusCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *SysRoleMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, sysrole.FieldStatus)
}

// SetRemark sets the "remark" field.
func (m *SysRoleMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysRoleMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysRoleMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysrole.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysRoleMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysRoleMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysrole.FieldRemark)
}

// SetListOrder sets the "list_order" field.
func (m *SysRoleMutation) SetListOrder(i int64) {
	m.list_order = &i
	m.addlist_order = nil
}

// ListOrder returns the value of the "list_order" field in the mutation.
func (m *SysRoleMutation) ListOrder() (r int64, exists bool) {
	v := m.list_order
	if v == nil {
		return
	}
	return *v, true
}

// OldListOrder returns the old "list_order" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldListOrder(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldListOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldListOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldListOrder: %w", err)
	}
	return oldValue.ListOrder, nil
}

// AddListOrder adds i to the "list_order" field.
func (m *SysRoleMutation) AddListOrder(i int64) {
	if m.addlist_order != nil {
		*m.addlist_order += i
	} else {
		m.addlist_order = &i
	}
}

// AddedListOrder returns the value that was added to the "list_order" field in this mutation.
func (m *SysRoleMutation) AddedListOrder() (r int64, exists bool) {
	v := m.addlist_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearListOrder clears the value of the "list_order" field.
func (m *SysRoleMutation) ClearListOrder() {
	m.list_order = nil
	m.addlist_order = nil
	m.clearedFields[sysrole.FieldListOrder] = struct{}{}
}

// ListOrderCleared returns if the "list_order" field was cleared in this mutation.
func (m *SysRoleMutation) ListOrderCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldListOrder]
	return ok
}

// ResetListOrder resets all changes to the "list_order" field.
func (m *SysRoleMutation) ResetListOrder() {
	m.list_order = nil
	m.addlist_order = nil
	delete(m.clearedFields, sysrole.FieldListOrder)
}

// SetName sets the "name" field.
func (m *SysRoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysRoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *SysRoleMutation) ClearName() {
	m.name = nil
	m.clearedFields[sysrole.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *SysRoleMutation) NameCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *SysRoleMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, sysrole.FieldName)
}

// SetDataScope sets the "data_scope" field.
func (m *SysRoleMutation) SetDataScope(i int8) {
	m.data_scope = &i
	m.adddata_scope = nil
}

// DataScope returns the value of the "data_scope" field in the mutation.
func (m *SysRoleMutation) DataScope() (r int8, exists bool) {
	v := m.data_scope
	if v == nil {
		return
	}
	return *v, true
}

// OldDataScope returns the old "data_scope" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldDataScope(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataScope is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataScope requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataScope: %w", err)
	}
	return oldValue.DataScope, nil
}

// AddDataScope adds i to the "data_scope" field.
func (m *SysRoleMutation) AddDataScope(i int8) {
	if m.adddata_scope != nil {
		*m.adddata_scope += i
	} else {
		m.adddata_scope = &i
	}
}

// AddedDataScope returns the value that was added to the "data_scope" field in this mutation.
func (m *SysRoleMutation) AddedDataScope() (r int8, exists bool) {
	v := m.adddata_scope
	if v == nil {
		return
	}
	return *v, true
}

// ClearDataScope clears the value of the "data_scope" field.
func (m *SysRoleMutation) ClearDataScope() {
	m.data_scope = nil
	m.adddata_scope = nil
	m.clearedFields[sysrole.FieldDataScope] = struct{}{}
}

// DataScopeCleared returns if the "data_scope" field was cleared in this mutation.
func (m *SysRoleMutation) DataScopeCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldDataScope]
	return ok
}

// ResetDataScope resets all changes to the "data_scope" field.
func (m *SysRoleMutation) ResetDataScope() {
	m.data_scope = nil
	m.adddata_scope = nil
	delete(m.clearedFields, sysrole.FieldDataScope)
}

// Where appends a list predicates to the SysRoleMutation builder.
func (m *SysRoleMutation) Where(ps ...predicate.SysRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysRole).
func (m *SysRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRoleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, sysrole.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysrole.FieldUpdatedAt)
	}
	if m.delete_at != nil {
		fields = append(fields, sysrole.FieldDeleteAt)
	}
	if m.status != nil {
		fields = append(fields, sysrole.FieldStatus)
	}
	if m.remark != nil {
		fields = append(fields, sysrole.FieldRemark)
	}
	if m.list_order != nil {
		fields = append(fields, sysrole.FieldListOrder)
	}
	if m.name != nil {
		fields = append(fields, sysrole.FieldName)
	}
	if m.data_scope != nil {
		fields = append(fields, sysrole.FieldDataScope)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysrole.FieldCreatedAt:
		return m.CreatedAt()
	case sysrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysrole.FieldDeleteAt:
		return m.DeleteAt()
	case sysrole.FieldStatus:
		return m.Status()
	case sysrole.FieldRemark:
		return m.Remark()
	case sysrole.FieldListOrder:
		return m.ListOrder()
	case sysrole.FieldName:
		return m.Name()
	case sysrole.FieldDataScope:
		return m.DataScope()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysrole.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case sysrole.FieldStatus:
		return m.OldStatus(ctx)
	case sysrole.FieldRemark:
		return m.OldRemark(ctx)
	case sysrole.FieldListOrder:
		return m.OldListOrder(ctx)
	case sysrole.FieldName:
		return m.OldName(ctx)
	case sysrole.FieldDataScope:
		return m.OldDataScope(ctx)
	}
	return nil, fmt.Errorf("unknown SysRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysrole.FieldDeleteAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case sysrole.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case sysrole.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysrole.FieldListOrder:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetListOrder(v)
		return nil
	case sysrole.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sysrole.FieldDataScope:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataScope(v)
		return nil
	}
	return fmt.Errorf("unknown SysRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRoleMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, sysrole.FieldStatus)
	}
	if m.addlist_order != nil {
		fields = append(fields, sysrole.FieldListOrder)
	}
	if m.adddata_scope != nil {
		fields = append(fields, sysrole.FieldDataScope)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysrole.FieldStatus:
		return m.AddedStatus()
	case sysrole.FieldListOrder:
		return m.AddedListOrder()
	case sysrole.FieldDataScope:
		return m.AddedDataScope()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysrole.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case sysrole.FieldListOrder:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddListOrder(v)
		return nil
	case sysrole.FieldDataScope:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDataScope(v)
		return nil
	}
	return fmt.Errorf("unknown SysRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysrole.FieldCreatedAt) {
		fields = append(fields, sysrole.FieldCreatedAt)
	}
	if m.FieldCleared(sysrole.FieldUpdatedAt) {
		fields = append(fields, sysrole.FieldUpdatedAt)
	}
	if m.FieldCleared(sysrole.FieldDeleteAt) {
		fields = append(fields, sysrole.FieldDeleteAt)
	}
	if m.FieldCleared(sysrole.FieldStatus) {
		fields = append(fields, sysrole.FieldStatus)
	}
	if m.FieldCleared(sysrole.FieldRemark) {
		fields = append(fields, sysrole.FieldRemark)
	}
	if m.FieldCleared(sysrole.FieldListOrder) {
		fields = append(fields, sysrole.FieldListOrder)
	}
	if m.FieldCleared(sysrole.FieldName) {
		fields = append(fields, sysrole.FieldName)
	}
	if m.FieldCleared(sysrole.FieldDataScope) {
		fields = append(fields, sysrole.FieldDataScope)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRoleMutation) ClearField(name string) error {
	switch name {
	case sysrole.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysrole.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysrole.FieldDeleteAt:
		m.ClearDeleteAt()
		return nil
	case sysrole.FieldStatus:
		m.ClearStatus()
		return nil
	case sysrole.FieldRemark:
		m.ClearRemark()
		return nil
	case sysrole.FieldListOrder:
		m.ClearListOrder()
		return nil
	case sysrole.FieldName:
		m.ClearName()
		return nil
	case sysrole.FieldDataScope:
		m.ClearDataScope()
		return nil
	}
	return fmt.Errorf("unknown SysRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRoleMutation) ResetField(name string) error {
	switch name {
	case sysrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysrole.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case sysrole.FieldStatus:
		m.ResetStatus()
		return nil
	case sysrole.FieldRemark:
		m.ResetRemark()
		return nil
	case sysrole.FieldListOrder:
		m.ResetListOrder()
		return nil
	case sysrole.FieldName:
		m.ResetName()
		return nil
	case sysrole.FieldDataScope:
		m.ResetDataScope()
		return nil
	}
	return fmt.Errorf("unknown SysRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRole edge %s", name)
}

// SysUserMutation represents an operation that mutates the SysUser nodes in the graph.
type SysUserMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	created_at      *time.Time
	updated_at      *time.Time
	delete_at       *time.Time
	remark          *string
	user_name       *string
	user_nickname   *string
	mobile          *string
	birthday        *string
	user_password   *string
	user_salt       *string
	user_email      *string
	sex             *int8
	addsex          *int8
	avatar          *string
	is_admin        *int8
	addis_admin     *int8
	user_status     *int8
	adduser_status  *int8
	dept_id         *int64
	adddept_id      *int64
	address         *string
	describe        *string
	last_login_ip   *string
	last_login_time *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*SysUser, error)
	predicates      []predicate.SysUser
}

var _ ent.Mutation = (*SysUserMutation)(nil)

// sysuserOption allows management of the mutation configuration using functional options.
type sysuserOption func(*SysUserMutation)

// newSysUserMutation creates new mutation for the SysUser entity.
func newSysUserMutation(c config, op Op, opts ...sysuserOption) *SysUserMutation {
	m := &SysUserMutation{
		config:        c,
		op:            op,
		typ:           TypeSysUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysUserID sets the ID field of the mutation.
func withSysUserID(id int64) sysuserOption {
	return func(m *SysUserMutation) {
		var (
			err   error
			once  sync.Once
			value *SysUser
		)
		m.oldValue = func(ctx context.Context) (*SysUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysUser sets the old SysUser of the mutation.
func withSysUser(node *SysUser) sysuserOption {
	return func(m *SysUserMutation) {
		m.oldValue = func(context.Context) (*SysUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysUser entities.
func (m *SysUserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysUserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysUserMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SysUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysUserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysuser.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysUserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysUserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysuser.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysUserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysuser.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysUserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysuser.FieldUpdatedAt)
}

// SetDeleteAt sets the "delete_at" field.
func (m *SysUserMutation) SetDeleteAt(t time.Time) {
	m.delete_at = &t
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *SysUserMutation) DeleteAt() (r time.Time, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldDeleteAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (m *SysUserMutation) ClearDeleteAt() {
	m.delete_at = nil
	m.clearedFields[sysuser.FieldDeleteAt] = struct{}{}
}

// DeleteAtCleared returns if the "delete_at" field was cleared in this mutation.
func (m *SysUserMutation) DeleteAtCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldDeleteAt]
	return ok
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *SysUserMutation) ResetDeleteAt() {
	m.delete_at = nil
	delete(m.clearedFields, sysuser.FieldDeleteAt)
}

// SetRemark sets the "remark" field.
func (m *SysUserMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SysUserMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SysUserMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[sysuser.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SysUserMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SysUserMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, sysuser.FieldRemark)
}

// SetUserName sets the "user_name" field.
func (m *SysUserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *SysUserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *SysUserMutation) ResetUserName() {
	m.user_name = nil
}

// SetUserNickname sets the "user_nickname" field.
func (m *SysUserMutation) SetUserNickname(s string) {
	m.user_nickname = &s
}

// UserNickname returns the value of the "user_nickname" field in the mutation.
func (m *SysUserMutation) UserNickname() (r string, exists bool) {
	v := m.user_nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldUserNickname returns the old "user_nickname" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserNickname: %w", err)
	}
	return oldValue.UserNickname, nil
}

// ClearUserNickname clears the value of the "user_nickname" field.
func (m *SysUserMutation) ClearUserNickname() {
	m.user_nickname = nil
	m.clearedFields[sysuser.FieldUserNickname] = struct{}{}
}

// UserNicknameCleared returns if the "user_nickname" field was cleared in this mutation.
func (m *SysUserMutation) UserNicknameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUserNickname]
	return ok
}

// ResetUserNickname resets all changes to the "user_nickname" field.
func (m *SysUserMutation) ResetUserNickname() {
	m.user_nickname = nil
	delete(m.clearedFields, sysuser.FieldUserNickname)
}

// SetMobile sets the "mobile" field.
func (m *SysUserMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *SysUserMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *SysUserMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[sysuser.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *SysUserMutation) MobileCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *SysUserMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, sysuser.FieldMobile)
}

// SetBirthday sets the "birthday" field.
func (m *SysUserMutation) SetBirthday(s string) {
	m.birthday = &s
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *SysUserMutation) Birthday() (r string, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldBirthday(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ClearBirthday clears the value of the "birthday" field.
func (m *SysUserMutation) ClearBirthday() {
	m.birthday = nil
	m.clearedFields[sysuser.FieldBirthday] = struct{}{}
}

// BirthdayCleared returns if the "birthday" field was cleared in this mutation.
func (m *SysUserMutation) BirthdayCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldBirthday]
	return ok
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *SysUserMutation) ResetBirthday() {
	m.birthday = nil
	delete(m.clearedFields, sysuser.FieldBirthday)
}

// SetUserPassword sets the "user_password" field.
func (m *SysUserMutation) SetUserPassword(s string) {
	m.user_password = &s
}

// UserPassword returns the value of the "user_password" field in the mutation.
func (m *SysUserMutation) UserPassword() (r string, exists bool) {
	v := m.user_password
	if v == nil {
		return
	}
	return *v, true
}

// OldUserPassword returns the old "user_password" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserPassword: %w", err)
	}
	return oldValue.UserPassword, nil
}

// ClearUserPassword clears the value of the "user_password" field.
func (m *SysUserMutation) ClearUserPassword() {
	m.user_password = nil
	m.clearedFields[sysuser.FieldUserPassword] = struct{}{}
}

// UserPasswordCleared returns if the "user_password" field was cleared in this mutation.
func (m *SysUserMutation) UserPasswordCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUserPassword]
	return ok
}

// ResetUserPassword resets all changes to the "user_password" field.
func (m *SysUserMutation) ResetUserPassword() {
	m.user_password = nil
	delete(m.clearedFields, sysuser.FieldUserPassword)
}

// SetUserSalt sets the "user_salt" field.
func (m *SysUserMutation) SetUserSalt(s string) {
	m.user_salt = &s
}

// UserSalt returns the value of the "user_salt" field in the mutation.
func (m *SysUserMutation) UserSalt() (r string, exists bool) {
	v := m.user_salt
	if v == nil {
		return
	}
	return *v, true
}

// OldUserSalt returns the old "user_salt" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserSalt: %w", err)
	}
	return oldValue.UserSalt, nil
}

// ClearUserSalt clears the value of the "user_salt" field.
func (m *SysUserMutation) ClearUserSalt() {
	m.user_salt = nil
	m.clearedFields[sysuser.FieldUserSalt] = struct{}{}
}

// UserSaltCleared returns if the "user_salt" field was cleared in this mutation.
func (m *SysUserMutation) UserSaltCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUserSalt]
	return ok
}

// ResetUserSalt resets all changes to the "user_salt" field.
func (m *SysUserMutation) ResetUserSalt() {
	m.user_salt = nil
	delete(m.clearedFields, sysuser.FieldUserSalt)
}

// SetUserEmail sets the "user_email" field.
func (m *SysUserMutation) SetUserEmail(s string) {
	m.user_email = &s
}

// UserEmail returns the value of the "user_email" field in the mutation.
func (m *SysUserMutation) UserEmail() (r string, exists bool) {
	v := m.user_email
	if v == nil {
		return
	}
	return *v, true
}

// OldUserEmail returns the old "user_email" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserEmail: %w", err)
	}
	return oldValue.UserEmail, nil
}

// ClearUserEmail clears the value of the "user_email" field.
func (m *SysUserMutation) ClearUserEmail() {
	m.user_email = nil
	m.clearedFields[sysuser.FieldUserEmail] = struct{}{}
}

// UserEmailCleared returns if the "user_email" field was cleared in this mutation.
func (m *SysUserMutation) UserEmailCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUserEmail]
	return ok
}

// ResetUserEmail resets all changes to the "user_email" field.
func (m *SysUserMutation) ResetUserEmail() {
	m.user_email = nil
	delete(m.clearedFields, sysuser.FieldUserEmail)
}

// SetSex sets the "sex" field.
func (m *SysUserMutation) SetSex(i int8) {
	m.sex = &i
	m.addsex = nil
}

// Sex returns the value of the "sex" field in the mutation.
func (m *SysUserMutation) Sex() (r int8, exists bool) {
	v := m.sex
	if v == nil {
		return
	}
	return *v, true
}

// OldSex returns the old "sex" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldSex(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSex: %w", err)
	}
	return oldValue.Sex, nil
}

// AddSex adds i to the "sex" field.
func (m *SysUserMutation) AddSex(i int8) {
	if m.addsex != nil {
		*m.addsex += i
	} else {
		m.addsex = &i
	}
}

// AddedSex returns the value that was added to the "sex" field in this mutation.
func (m *SysUserMutation) AddedSex() (r int8, exists bool) {
	v := m.addsex
	if v == nil {
		return
	}
	return *v, true
}

// ClearSex clears the value of the "sex" field.
func (m *SysUserMutation) ClearSex() {
	m.sex = nil
	m.addsex = nil
	m.clearedFields[sysuser.FieldSex] = struct{}{}
}

// SexCleared returns if the "sex" field was cleared in this mutation.
func (m *SysUserMutation) SexCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldSex]
	return ok
}

// ResetSex resets all changes to the "sex" field.
func (m *SysUserMutation) ResetSex() {
	m.sex = nil
	m.addsex = nil
	delete(m.clearedFields, sysuser.FieldSex)
}

// SetAvatar sets the "avatar" field.
func (m *SysUserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *SysUserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *SysUserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[sysuser.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *SysUserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *SysUserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, sysuser.FieldAvatar)
}

// SetIsAdmin sets the "is_admin" field.
func (m *SysUserMutation) SetIsAdmin(i int8) {
	m.is_admin = &i
	m.addis_admin = nil
}

// IsAdmin returns the value of the "is_admin" field in the mutation.
func (m *SysUserMutation) IsAdmin() (r int8, exists bool) {
	v := m.is_admin
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAdmin returns the old "is_admin" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldIsAdmin(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAdmin: %w", err)
	}
	return oldValue.IsAdmin, nil
}

// AddIsAdmin adds i to the "is_admin" field.
func (m *SysUserMutation) AddIsAdmin(i int8) {
	if m.addis_admin != nil {
		*m.addis_admin += i
	} else {
		m.addis_admin = &i
	}
}

// AddedIsAdmin returns the value that was added to the "is_admin" field in this mutation.
func (m *SysUserMutation) AddedIsAdmin() (r int8, exists bool) {
	v := m.addis_admin
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsAdmin clears the value of the "is_admin" field.
func (m *SysUserMutation) ClearIsAdmin() {
	m.is_admin = nil
	m.addis_admin = nil
	m.clearedFields[sysuser.FieldIsAdmin] = struct{}{}
}

// IsAdminCleared returns if the "is_admin" field was cleared in this mutation.
func (m *SysUserMutation) IsAdminCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldIsAdmin]
	return ok
}

// ResetIsAdmin resets all changes to the "is_admin" field.
func (m *SysUserMutation) ResetIsAdmin() {
	m.is_admin = nil
	m.addis_admin = nil
	delete(m.clearedFields, sysuser.FieldIsAdmin)
}

// SetUserStatus sets the "user_status" field.
func (m *SysUserMutation) SetUserStatus(i int8) {
	m.user_status = &i
	m.adduser_status = nil
}

// UserStatus returns the value of the "user_status" field in the mutation.
func (m *SysUserMutation) UserStatus() (r int8, exists bool) {
	v := m.user_status
	if v == nil {
		return
	}
	return *v, true
}

// OldUserStatus returns the old "user_status" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserStatus: %w", err)
	}
	return oldValue.UserStatus, nil
}

// AddUserStatus adds i to the "user_status" field.
func (m *SysUserMutation) AddUserStatus(i int8) {
	if m.adduser_status != nil {
		*m.adduser_status += i
	} else {
		m.adduser_status = &i
	}
}

// AddedUserStatus returns the value that was added to the "user_status" field in this mutation.
func (m *SysUserMutation) AddedUserStatus() (r int8, exists bool) {
	v := m.adduser_status
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserStatus clears the value of the "user_status" field.
func (m *SysUserMutation) ClearUserStatus() {
	m.user_status = nil
	m.adduser_status = nil
	m.clearedFields[sysuser.FieldUserStatus] = struct{}{}
}

// UserStatusCleared returns if the "user_status" field was cleared in this mutation.
func (m *SysUserMutation) UserStatusCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUserStatus]
	return ok
}

// ResetUserStatus resets all changes to the "user_status" field.
func (m *SysUserMutation) ResetUserStatus() {
	m.user_status = nil
	m.adduser_status = nil
	delete(m.clearedFields, sysuser.FieldUserStatus)
}

// SetDeptID sets the "dept_id" field.
func (m *SysUserMutation) SetDeptID(i int64) {
	m.dept_id = &i
	m.adddept_id = nil
}

// DeptID returns the value of the "dept_id" field in the mutation.
func (m *SysUserMutation) DeptID() (r int64, exists bool) {
	v := m.dept_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptID returns the old "dept_id" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldDeptID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptID: %w", err)
	}
	return oldValue.DeptID, nil
}

// AddDeptID adds i to the "dept_id" field.
func (m *SysUserMutation) AddDeptID(i int64) {
	if m.adddept_id != nil {
		*m.adddept_id += i
	} else {
		m.adddept_id = &i
	}
}

// AddedDeptID returns the value that was added to the "dept_id" field in this mutation.
func (m *SysUserMutation) AddedDeptID() (r int64, exists bool) {
	v := m.adddept_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeptID clears the value of the "dept_id" field.
func (m *SysUserMutation) ClearDeptID() {
	m.dept_id = nil
	m.adddept_id = nil
	m.clearedFields[sysuser.FieldDeptID] = struct{}{}
}

// DeptIDCleared returns if the "dept_id" field was cleared in this mutation.
func (m *SysUserMutation) DeptIDCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldDeptID]
	return ok
}

// ResetDeptID resets all changes to the "dept_id" field.
func (m *SysUserMutation) ResetDeptID() {
	m.dept_id = nil
	m.adddept_id = nil
	delete(m.clearedFields, sysuser.FieldDeptID)
}

// SetAddress sets the "address" field.
func (m *SysUserMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *SysUserMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *SysUserMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[sysuser.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *SysUserMutation) AddressCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *SysUserMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, sysuser.FieldAddress)
}

// SetDescribe sets the "describe" field.
func (m *SysUserMutation) SetDescribe(s string) {
	m.describe = &s
}

// Describe returns the value of the "describe" field in the mutation.
func (m *SysUserMutation) Describe() (r string, exists bool) {
	v := m.describe
	if v == nil {
		return
	}
	return *v, true
}

// OldDescribe returns the old "describe" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldDescribe(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescribe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescribe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescribe: %w", err)
	}
	return oldValue.Describe, nil
}

// ClearDescribe clears the value of the "describe" field.
func (m *SysUserMutation) ClearDescribe() {
	m.describe = nil
	m.clearedFields[sysuser.FieldDescribe] = struct{}{}
}

// DescribeCleared returns if the "describe" field was cleared in this mutation.
func (m *SysUserMutation) DescribeCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldDescribe]
	return ok
}

// ResetDescribe resets all changes to the "describe" field.
func (m *SysUserMutation) ResetDescribe() {
	m.describe = nil
	delete(m.clearedFields, sysuser.FieldDescribe)
}

// SetLastLoginIP sets the "last_login_ip" field.
func (m *SysUserMutation) SetLastLoginIP(s string) {
	m.last_login_ip = &s
}

// LastLoginIP returns the value of the "last_login_ip" field in the mutation.
func (m *SysUserMutation) LastLoginIP() (r string, exists bool) {
	v := m.last_login_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginIP returns the old "last_login_ip" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldLastLoginIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginIP: %w", err)
	}
	return oldValue.LastLoginIP, nil
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (m *SysUserMutation) ClearLastLoginIP() {
	m.last_login_ip = nil
	m.clearedFields[sysuser.FieldLastLoginIP] = struct{}{}
}

// LastLoginIPCleared returns if the "last_login_ip" field was cleared in this mutation.
func (m *SysUserMutation) LastLoginIPCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldLastLoginIP]
	return ok
}

// ResetLastLoginIP resets all changes to the "last_login_ip" field.
func (m *SysUserMutation) ResetLastLoginIP() {
	m.last_login_ip = nil
	delete(m.clearedFields, sysuser.FieldLastLoginIP)
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *SysUserMutation) SetLastLoginTime(s string) {
	m.last_login_time = &s
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *SysUserMutation) LastLoginTime() (r string, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldLastLoginTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (m *SysUserMutation) ClearLastLoginTime() {
	m.last_login_time = nil
	m.clearedFields[sysuser.FieldLastLoginTime] = struct{}{}
}

// LastLoginTimeCleared returns if the "last_login_time" field was cleared in this mutation.
func (m *SysUserMutation) LastLoginTimeCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldLastLoginTime]
	return ok
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *SysUserMutation) ResetLastLoginTime() {
	m.last_login_time = nil
	delete(m.clearedFields, sysuser.FieldLastLoginTime)
}

// Where appends a list predicates to the SysUserMutation builder.
func (m *SysUserMutation) Where(ps ...predicate.SysUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysUser).
func (m *SysUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysUserMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.created_at != nil {
		fields = append(fields, sysuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysuser.FieldUpdatedAt)
	}
	if m.delete_at != nil {
		fields = append(fields, sysuser.FieldDeleteAt)
	}
	if m.remark != nil {
		fields = append(fields, sysuser.FieldRemark)
	}
	if m.user_name != nil {
		fields = append(fields, sysuser.FieldUserName)
	}
	if m.user_nickname != nil {
		fields = append(fields, sysuser.FieldUserNickname)
	}
	if m.mobile != nil {
		fields = append(fields, sysuser.FieldMobile)
	}
	if m.birthday != nil {
		fields = append(fields, sysuser.FieldBirthday)
	}
	if m.user_password != nil {
		fields = append(fields, sysuser.FieldUserPassword)
	}
	if m.user_salt != nil {
		fields = append(fields, sysuser.FieldUserSalt)
	}
	if m.user_email != nil {
		fields = append(fields, sysuser.FieldUserEmail)
	}
	if m.sex != nil {
		fields = append(fields, sysuser.FieldSex)
	}
	if m.avatar != nil {
		fields = append(fields, sysuser.FieldAvatar)
	}
	if m.is_admin != nil {
		fields = append(fields, sysuser.FieldIsAdmin)
	}
	if m.user_status != nil {
		fields = append(fields, sysuser.FieldUserStatus)
	}
	if m.dept_id != nil {
		fields = append(fields, sysuser.FieldDeptID)
	}
	if m.address != nil {
		fields = append(fields, sysuser.FieldAddress)
	}
	if m.describe != nil {
		fields = append(fields, sysuser.FieldDescribe)
	}
	if m.last_login_ip != nil {
		fields = append(fields, sysuser.FieldLastLoginIP)
	}
	if m.last_login_time != nil {
		fields = append(fields, sysuser.FieldLastLoginTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldCreatedAt:
		return m.CreatedAt()
	case sysuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysuser.FieldDeleteAt:
		return m.DeleteAt()
	case sysuser.FieldRemark:
		return m.Remark()
	case sysuser.FieldUserName:
		return m.UserName()
	case sysuser.FieldUserNickname:
		return m.UserNickname()
	case sysuser.FieldMobile:
		return m.Mobile()
	case sysuser.FieldBirthday:
		return m.Birthday()
	case sysuser.FieldUserPassword:
		return m.UserPassword()
	case sysuser.FieldUserSalt:
		return m.UserSalt()
	case sysuser.FieldUserEmail:
		return m.UserEmail()
	case sysuser.FieldSex:
		return m.Sex()
	case sysuser.FieldAvatar:
		return m.Avatar()
	case sysuser.FieldIsAdmin:
		return m.IsAdmin()
	case sysuser.FieldUserStatus:
		return m.UserStatus()
	case sysuser.FieldDeptID:
		return m.DeptID()
	case sysuser.FieldAddress:
		return m.Address()
	case sysuser.FieldDescribe:
		return m.Describe()
	case sysuser.FieldLastLoginIP:
		return m.LastLoginIP()
	case sysuser.FieldLastLoginTime:
		return m.LastLoginTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysuser.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case sysuser.FieldRemark:
		return m.OldRemark(ctx)
	case sysuser.FieldUserName:
		return m.OldUserName(ctx)
	case sysuser.FieldUserNickname:
		return m.OldUserNickname(ctx)
	case sysuser.FieldMobile:
		return m.OldMobile(ctx)
	case sysuser.FieldBirthday:
		return m.OldBirthday(ctx)
	case sysuser.FieldUserPassword:
		return m.OldUserPassword(ctx)
	case sysuser.FieldUserSalt:
		return m.OldUserSalt(ctx)
	case sysuser.FieldUserEmail:
		return m.OldUserEmail(ctx)
	case sysuser.FieldSex:
		return m.OldSex(ctx)
	case sysuser.FieldAvatar:
		return m.OldAvatar(ctx)
	case sysuser.FieldIsAdmin:
		return m.OldIsAdmin(ctx)
	case sysuser.FieldUserStatus:
		return m.OldUserStatus(ctx)
	case sysuser.FieldDeptID:
		return m.OldDeptID(ctx)
	case sysuser.FieldAddress:
		return m.OldAddress(ctx)
	case sysuser.FieldDescribe:
		return m.OldDescribe(ctx)
	case sysuser.FieldLastLoginIP:
		return m.OldLastLoginIP(ctx)
	case sysuser.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	}
	return nil, fmt.Errorf("unknown SysUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysuser.FieldDeleteAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case sysuser.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case sysuser.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case sysuser.FieldUserNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserNickname(v)
		return nil
	case sysuser.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case sysuser.FieldBirthday:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case sysuser.FieldUserPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserPassword(v)
		return nil
	case sysuser.FieldUserSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserSalt(v)
		return nil
	case sysuser.FieldUserEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserEmail(v)
		return nil
	case sysuser.FieldSex:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSex(v)
		return nil
	case sysuser.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case sysuser.FieldIsAdmin:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAdmin(v)
		return nil
	case sysuser.FieldUserStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserStatus(v)
		return nil
	case sysuser.FieldDeptID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptID(v)
		return nil
	case sysuser.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case sysuser.FieldDescribe:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescribe(v)
		return nil
	case sysuser.FieldLastLoginIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginIP(v)
		return nil
	case sysuser.FieldLastLoginTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysUserMutation) AddedFields() []string {
	var fields []string
	if m.addsex != nil {
		fields = append(fields, sysuser.FieldSex)
	}
	if m.addis_admin != nil {
		fields = append(fields, sysuser.FieldIsAdmin)
	}
	if m.adduser_status != nil {
		fields = append(fields, sysuser.FieldUserStatus)
	}
	if m.adddept_id != nil {
		fields = append(fields, sysuser.FieldDeptID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldSex:
		return m.AddedSex()
	case sysuser.FieldIsAdmin:
		return m.AddedIsAdmin()
	case sysuser.FieldUserStatus:
		return m.AddedUserStatus()
	case sysuser.FieldDeptID:
		return m.AddedDeptID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldSex:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSex(v)
		return nil
	case sysuser.FieldIsAdmin:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsAdmin(v)
		return nil
	case sysuser.FieldUserStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserStatus(v)
		return nil
	case sysuser.FieldDeptID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeptID(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysuser.FieldCreatedAt) {
		fields = append(fields, sysuser.FieldCreatedAt)
	}
	if m.FieldCleared(sysuser.FieldUpdatedAt) {
		fields = append(fields, sysuser.FieldUpdatedAt)
	}
	if m.FieldCleared(sysuser.FieldDeleteAt) {
		fields = append(fields, sysuser.FieldDeleteAt)
	}
	if m.FieldCleared(sysuser.FieldRemark) {
		fields = append(fields, sysuser.FieldRemark)
	}
	if m.FieldCleared(sysuser.FieldUserNickname) {
		fields = append(fields, sysuser.FieldUserNickname)
	}
	if m.FieldCleared(sysuser.FieldMobile) {
		fields = append(fields, sysuser.FieldMobile)
	}
	if m.FieldCleared(sysuser.FieldBirthday) {
		fields = append(fields, sysuser.FieldBirthday)
	}
	if m.FieldCleared(sysuser.FieldUserPassword) {
		fields = append(fields, sysuser.FieldUserPassword)
	}
	if m.FieldCleared(sysuser.FieldUserSalt) {
		fields = append(fields, sysuser.FieldUserSalt)
	}
	if m.FieldCleared(sysuser.FieldUserEmail) {
		fields = append(fields, sysuser.FieldUserEmail)
	}
	if m.FieldCleared(sysuser.FieldSex) {
		fields = append(fields, sysuser.FieldSex)
	}
	if m.FieldCleared(sysuser.FieldAvatar) {
		fields = append(fields, sysuser.FieldAvatar)
	}
	if m.FieldCleared(sysuser.FieldIsAdmin) {
		fields = append(fields, sysuser.FieldIsAdmin)
	}
	if m.FieldCleared(sysuser.FieldUserStatus) {
		fields = append(fields, sysuser.FieldUserStatus)
	}
	if m.FieldCleared(sysuser.FieldDeptID) {
		fields = append(fields, sysuser.FieldDeptID)
	}
	if m.FieldCleared(sysuser.FieldAddress) {
		fields = append(fields, sysuser.FieldAddress)
	}
	if m.FieldCleared(sysuser.FieldDescribe) {
		fields = append(fields, sysuser.FieldDescribe)
	}
	if m.FieldCleared(sysuser.FieldLastLoginIP) {
		fields = append(fields, sysuser.FieldLastLoginIP)
	}
	if m.FieldCleared(sysuser.FieldLastLoginTime) {
		fields = append(fields, sysuser.FieldLastLoginTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysUserMutation) ClearField(name string) error {
	switch name {
	case sysuser.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysuser.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysuser.FieldDeleteAt:
		m.ClearDeleteAt()
		return nil
	case sysuser.FieldRemark:
		m.ClearRemark()
		return nil
	case sysuser.FieldUserNickname:
		m.ClearUserNickname()
		return nil
	case sysuser.FieldMobile:
		m.ClearMobile()
		return nil
	case sysuser.FieldBirthday:
		m.ClearBirthday()
		return nil
	case sysuser.FieldUserPassword:
		m.ClearUserPassword()
		return nil
	case sysuser.FieldUserSalt:
		m.ClearUserSalt()
		return nil
	case sysuser.FieldUserEmail:
		m.ClearUserEmail()
		return nil
	case sysuser.FieldSex:
		m.ClearSex()
		return nil
	case sysuser.FieldAvatar:
		m.ClearAvatar()
		return nil
	case sysuser.FieldIsAdmin:
		m.ClearIsAdmin()
		return nil
	case sysuser.FieldUserStatus:
		m.ClearUserStatus()
		return nil
	case sysuser.FieldDeptID:
		m.ClearDeptID()
		return nil
	case sysuser.FieldAddress:
		m.ClearAddress()
		return nil
	case sysuser.FieldDescribe:
		m.ClearDescribe()
		return nil
	case sysuser.FieldLastLoginIP:
		m.ClearLastLoginIP()
		return nil
	case sysuser.FieldLastLoginTime:
		m.ClearLastLoginTime()
		return nil
	}
	return fmt.Errorf("unknown SysUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysUserMutation) ResetField(name string) error {
	switch name {
	case sysuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysuser.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case sysuser.FieldRemark:
		m.ResetRemark()
		return nil
	case sysuser.FieldUserName:
		m.ResetUserName()
		return nil
	case sysuser.FieldUserNickname:
		m.ResetUserNickname()
		return nil
	case sysuser.FieldMobile:
		m.ResetMobile()
		return nil
	case sysuser.FieldBirthday:
		m.ResetBirthday()
		return nil
	case sysuser.FieldUserPassword:
		m.ResetUserPassword()
		return nil
	case sysuser.FieldUserSalt:
		m.ResetUserSalt()
		return nil
	case sysuser.FieldUserEmail:
		m.ResetUserEmail()
		return nil
	case sysuser.FieldSex:
		m.ResetSex()
		return nil
	case sysuser.FieldAvatar:
		m.ResetAvatar()
		return nil
	case sysuser.FieldIsAdmin:
		m.ResetIsAdmin()
		return nil
	case sysuser.FieldUserStatus:
		m.ResetUserStatus()
		return nil
	case sysuser.FieldDeptID:
		m.ResetDeptID()
		return nil
	case sysuser.FieldAddress:
		m.ResetAddress()
		return nil
	case sysuser.FieldDescribe:
		m.ResetDescribe()
		return nil
	case sysuser.FieldLastLoginIP:
		m.ResetLastLoginIP()
		return nil
	case sysuser.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysUser edge %s", name)
}
