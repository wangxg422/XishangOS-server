// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysrole"
)

// 系统角色表
type SysRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"delete_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int64 `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// DeleteBy holds the value of the "delete_by" field.
	DeleteBy int64 `json:"delete_by,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort int `json:"sort,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// DelFlag holds the value of the "del_flag" field.
	DelFlag int8 `json:"del_flag,omitempty"`
	// 角色名称
	RoleName string `json:"role_name,omitempty"`
	// 数据权限范围(1全部数据权限 2自定数据权限 3本部门数据权限 4本部门及以下数据权限)
	DataScope int8 `json:"data_scope,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysRoleQuery when eager-loading is set.
	Edges        SysRoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SysRoleEdges holds the relations/edges for other nodes in the graph.
type SysRoleEdges struct {
	// SysDepts holds the value of the sysDepts edge.
	SysDepts []*SysDept `json:"sysDepts,omitempty"`
	// SysUsers holds the value of the sysUsers edge.
	SysUsers []*SysUser `json:"sysUsers,omitempty"`
	// SysMenus holds the value of the sysMenus edge.
	SysMenus []*SysMenu `json:"sysMenus,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SysDeptsOrErr returns the SysDepts value or an error if the edge
// was not loaded in eager-loading.
func (e SysRoleEdges) SysDeptsOrErr() ([]*SysDept, error) {
	if e.loadedTypes[0] {
		return e.SysDepts, nil
	}
	return nil, &NotLoadedError{edge: "sysDepts"}
}

// SysUsersOrErr returns the SysUsers value or an error if the edge
// was not loaded in eager-loading.
func (e SysRoleEdges) SysUsersOrErr() ([]*SysUser, error) {
	if e.loadedTypes[1] {
		return e.SysUsers, nil
	}
	return nil, &NotLoadedError{edge: "sysUsers"}
}

// SysMenusOrErr returns the SysMenus value or an error if the edge
// was not loaded in eager-loading.
func (e SysRoleEdges) SysMenusOrErr() ([]*SysMenu, error) {
	if e.loadedTypes[2] {
		return e.SysMenus, nil
	}
	return nil, &NotLoadedError{edge: "sysMenus"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysrole.FieldID, sysrole.FieldCreatedBy, sysrole.FieldUpdatedBy, sysrole.FieldDeleteBy, sysrole.FieldStatus, sysrole.FieldSort, sysrole.FieldDelFlag, sysrole.FieldDataScope:
			values[i] = new(sql.NullInt64)
		case sysrole.FieldRemark, sysrole.FieldRoleName:
			values[i] = new(sql.NullString)
		case sysrole.FieldCreatedAt, sysrole.FieldUpdatedAt, sysrole.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysRole fields.
func (sr *SysRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int64(value.Int64)
		case sysrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case sysrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		case sysrole.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				sr.DeleteAt = value.Time
			}
		case sysrole.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sr.CreatedBy = value.Int64
			}
		case sysrole.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sr.UpdatedBy = value.Int64
			}
		case sysrole.FieldDeleteBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_by", values[i])
			} else if value.Valid {
				sr.DeleteBy = value.Int64
			}
		case sysrole.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sr.Status = int8(value.Int64)
			}
		case sysrole.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sr.Sort = int(value.Int64)
			}
		case sysrole.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sr.Remark = value.String
			}
		case sysrole.FieldDelFlag:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field del_flag", values[i])
			} else if value.Valid {
				sr.DelFlag = int8(value.Int64)
			}
		case sysrole.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_name", values[i])
			} else if value.Valid {
				sr.RoleName = value.String
			}
		case sysrole.FieldDataScope:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field data_scope", values[i])
			} else if value.Valid {
				sr.DataScope = int8(value.Int64)
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysRole.
// This includes values selected through modifiers, order, etc.
func (sr *SysRole) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// QuerySysDepts queries the "sysDepts" edge of the SysRole entity.
func (sr *SysRole) QuerySysDepts() *SysDeptQuery {
	return NewSysRoleClient(sr.config).QuerySysDepts(sr)
}

// QuerySysUsers queries the "sysUsers" edge of the SysRole entity.
func (sr *SysRole) QuerySysUsers() *SysUserQuery {
	return NewSysRoleClient(sr.config).QuerySysUsers(sr)
}

// QuerySysMenus queries the "sysMenus" edge of the SysRole entity.
func (sr *SysRole) QuerySysMenus() *SysMenuQuery {
	return NewSysRoleClient(sr.config).QuerySysMenus(sr)
}

// Update returns a builder for updating this SysRole.
// Note that you need to call SysRole.Unwrap() before calling this method if this SysRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SysRole) Update() *SysRoleUpdateOne {
	return NewSysRoleClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the SysRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SysRole) Unwrap() *SysRole {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("codegen: SysRole is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SysRole) String() string {
	var builder strings.Builder
	builder.WriteString("SysRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(sr.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", sr.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", sr.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("delete_by=")
	builder.WriteString(fmt.Sprintf("%v", sr.DeleteBy))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sr.Status))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", sr.Sort))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(sr.Remark)
	builder.WriteString(", ")
	builder.WriteString("del_flag=")
	builder.WriteString(fmt.Sprintf("%v", sr.DelFlag))
	builder.WriteString(", ")
	builder.WriteString("role_name=")
	builder.WriteString(sr.RoleName)
	builder.WriteString(", ")
	builder.WriteString("data_scope=")
	builder.WriteString(fmt.Sprintf("%v", sr.DataScope))
	builder.WriteByte(')')
	return builder.String()
}

// SysRoles is a parsable slice of SysRole.
type SysRoles []*SysRole
