// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdictdata"
)

// SysDictDataDelete is the builder for deleting a SysDictData entity.
type SysDictDataDelete struct {
	config
	hooks    []Hook
	mutation *SysDictDataMutation
}

// Where appends a list predicates to the SysDictDataDelete builder.
func (sddd *SysDictDataDelete) Where(ps ...predicate.SysDictData) *SysDictDataDelete {
	sddd.mutation.Where(ps...)
	return sddd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sddd *SysDictDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sddd.sqlExec, sddd.mutation, sddd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sddd *SysDictDataDelete) ExecX(ctx context.Context) int {
	n, err := sddd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sddd *SysDictDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysdictdata.Table, sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64))
	if ps := sddd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sddd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sddd.mutation.done = true
	return affected, err
}

// SysDictDataDeleteOne is the builder for deleting a single SysDictData entity.
type SysDictDataDeleteOne struct {
	sddd *SysDictDataDelete
}

// Where appends a list predicates to the SysDictDataDelete builder.
func (sdddo *SysDictDataDeleteOne) Where(ps ...predicate.SysDictData) *SysDictDataDeleteOne {
	sdddo.sddd.mutation.Where(ps...)
	return sdddo
}

// Exec executes the deletion query.
func (sdddo *SysDictDataDeleteOne) Exec(ctx context.Context) error {
	n, err := sdddo.sddd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysdictdata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sdddo *SysDictDataDeleteOne) ExecX(ctx context.Context) {
	if err := sdddo.Exec(ctx); err != nil {
		panic(err)
	}
}
