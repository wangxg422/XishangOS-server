// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/syscasbinrule"
)

// SysCasbinRuleDelete is the builder for deleting a SysCasbinRule entity.
type SysCasbinRuleDelete struct {
	config
	hooks    []Hook
	mutation *SysCasbinRuleMutation
}

// Where appends a list predicates to the SysCasbinRuleDelete builder.
func (scrd *SysCasbinRuleDelete) Where(ps ...predicate.SysCasbinRule) *SysCasbinRuleDelete {
	scrd.mutation.Where(ps...)
	return scrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (scrd *SysCasbinRuleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, scrd.sqlExec, scrd.mutation, scrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (scrd *SysCasbinRuleDelete) ExecX(ctx context.Context) int {
	n, err := scrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (scrd *SysCasbinRuleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(syscasbinrule.Table, sqlgraph.NewFieldSpec(syscasbinrule.FieldID, field.TypeInt))
	if ps := scrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, scrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	scrd.mutation.done = true
	return affected, err
}

// SysCasbinRuleDeleteOne is the builder for deleting a single SysCasbinRule entity.
type SysCasbinRuleDeleteOne struct {
	scrd *SysCasbinRuleDelete
}

// Where appends a list predicates to the SysCasbinRuleDelete builder.
func (scrdo *SysCasbinRuleDeleteOne) Where(ps ...predicate.SysCasbinRule) *SysCasbinRuleDeleteOne {
	scrdo.scrd.mutation.Where(ps...)
	return scrdo
}

// Exec executes the deletion query.
func (scrdo *SysCasbinRuleDeleteOne) Exec(ctx context.Context) error {
	n, err := scrdo.scrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{syscasbinrule.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (scrdo *SysCasbinRuleDeleteOne) ExecX(ctx context.Context) {
	if err := scrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
