// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdept"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
)

// 系统用户表
type SysUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"delete_at,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty"`
	// 用户昵称
	UserNickname string `json:"user_nickname,omitempty"`
	// Mobile holds the value of the "mobile" field.
	Mobile string `json:"mobile,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday string `json:"birthday,omitempty"`
	// UserPassword holds the value of the "user_password" field.
	UserPassword string `json:"user_password,omitempty"`
	// UserSalt holds the value of the "user_salt" field.
	UserSalt string `json:"user_salt,omitempty"`
	// UserEmail holds the value of the "user_email" field.
	UserEmail string `json:"user_email,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex int8 `json:"sex,omitempty"`
	// 用户头像地址
	Avatar string `json:"avatar,omitempty"`
	// IsAdmin holds the value of the "is_admin" field.
	IsAdmin int8 `json:"is_admin,omitempty"`
	// 用户状态(0禁用,1正常,2未知)
	UserStatus int8 `json:"user_status,omitempty"`
	// 用户所属部门
	DeptID int64 `json:"dept_id,omitempty"`
	// 用户联系地址
	Address string `json:"address,omitempty"`
	// Describe holds the value of the "describe" field.
	Describe string `json:"describe,omitempty"`
	// LastLoginIP holds the value of the "last_login_ip" field.
	LastLoginIP string `json:"last_login_ip,omitempty"`
	// LastLoginTime holds the value of the "last_login_time" field.
	LastLoginTime string `json:"last_login_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysUserQuery when eager-loading is set.
	Edges             SysUserEdges `json:"edges"`
	sys_dept_sys_user *int64
	selectValues      sql.SelectValues
}

// SysUserEdges holds the relations/edges for other nodes in the graph.
type SysUserEdges struct {
	// BelongTo holds the value of the belongTo edge.
	BelongTo *SysDept `json:"belongTo,omitempty"`
	// Posts holds the value of the posts edge.
	Posts []*SysPost `json:"posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BelongToOrErr returns the BelongTo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysUserEdges) BelongToOrErr() (*SysDept, error) {
	if e.loadedTypes[0] {
		if e.BelongTo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sysdept.Label}
		}
		return e.BelongTo, nil
	}
	return nil, &NotLoadedError{edge: "belongTo"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e SysUserEdges) PostsOrErr() ([]*SysPost, error) {
	if e.loadedTypes[1] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID, sysuser.FieldSex, sysuser.FieldIsAdmin, sysuser.FieldUserStatus, sysuser.FieldDeptID:
			values[i] = new(sql.NullInt64)
		case sysuser.FieldRemark, sysuser.FieldUserName, sysuser.FieldUserNickname, sysuser.FieldMobile, sysuser.FieldBirthday, sysuser.FieldUserPassword, sysuser.FieldUserSalt, sysuser.FieldUserEmail, sysuser.FieldAvatar, sysuser.FieldAddress, sysuser.FieldDescribe, sysuser.FieldLastLoginIP, sysuser.FieldLastLoginTime:
			values[i] = new(sql.NullString)
		case sysuser.FieldCreatedAt, sysuser.FieldUpdatedAt, sysuser.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		case sysuser.ForeignKeys[0]: // sys_dept_sys_user
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysUser fields.
func (su *SysUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			su.ID = int64(value.Int64)
		case sysuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				su.CreatedAt = value.Time
			}
		case sysuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				su.UpdatedAt = value.Time
			}
		case sysuser.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				su.DeleteAt = value.Time
			}
		case sysuser.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				su.Remark = value.String
			}
		case sysuser.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				su.UserName = value.String
			}
		case sysuser.FieldUserNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_nickname", values[i])
			} else if value.Valid {
				su.UserNickname = value.String
			}
		case sysuser.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				su.Mobile = value.String
			}
		case sysuser.FieldBirthday:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				su.Birthday = value.String
			}
		case sysuser.FieldUserPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_password", values[i])
			} else if value.Valid {
				su.UserPassword = value.String
			}
		case sysuser.FieldUserSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_salt", values[i])
			} else if value.Valid {
				su.UserSalt = value.String
			}
		case sysuser.FieldUserEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_email", values[i])
			} else if value.Valid {
				su.UserEmail = value.String
			}
		case sysuser.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				su.Sex = int8(value.Int64)
			}
		case sysuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				su.Avatar = value.String
			}
		case sysuser.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_admin", values[i])
			} else if value.Valid {
				su.IsAdmin = int8(value.Int64)
			}
		case sysuser.FieldUserStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_status", values[i])
			} else if value.Valid {
				su.UserStatus = int8(value.Int64)
			}
		case sysuser.FieldDeptID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dept_id", values[i])
			} else if value.Valid {
				su.DeptID = value.Int64
			}
		case sysuser.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				su.Address = value.String
			}
		case sysuser.FieldDescribe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field describe", values[i])
			} else if value.Valid {
				su.Describe = value.String
			}
		case sysuser.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				su.LastLoginIP = value.String
			}
		case sysuser.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_time", values[i])
			} else if value.Valid {
				su.LastLoginTime = value.String
			}
		case sysuser.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sys_dept_sys_user", value)
			} else if value.Valid {
				su.sys_dept_sys_user = new(int64)
				*su.sys_dept_sys_user = int64(value.Int64)
			}
		default:
			su.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysUser.
// This includes values selected through modifiers, order, etc.
func (su *SysUser) Value(name string) (ent.Value, error) {
	return su.selectValues.Get(name)
}

// QueryBelongTo queries the "belongTo" edge of the SysUser entity.
func (su *SysUser) QueryBelongTo() *SysDeptQuery {
	return NewSysUserClient(su.config).QueryBelongTo(su)
}

// QueryPosts queries the "posts" edge of the SysUser entity.
func (su *SysUser) QueryPosts() *SysPostQuery {
	return NewSysUserClient(su.config).QueryPosts(su)
}

// Update returns a builder for updating this SysUser.
// Note that you need to call SysUser.Unwrap() before calling this method if this SysUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (su *SysUser) Update() *SysUserUpdateOne {
	return NewSysUserClient(su.config).UpdateOne(su)
}

// Unwrap unwraps the SysUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (su *SysUser) Unwrap() *SysUser {
	_tx, ok := su.config.driver.(*txDriver)
	if !ok {
		panic("codegen: SysUser is not a transactional entity")
	}
	su.config.driver = _tx.drv
	return su
}

// String implements the fmt.Stringer.
func (su *SysUser) String() string {
	var builder strings.Builder
	builder.WriteString("SysUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", su.ID))
	builder.WriteString("created_at=")
	builder.WriteString(su.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(su.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(su.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(su.Remark)
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(su.UserName)
	builder.WriteString(", ")
	builder.WriteString("user_nickname=")
	builder.WriteString(su.UserNickname)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(su.Mobile)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(su.Birthday)
	builder.WriteString(", ")
	builder.WriteString("user_password=")
	builder.WriteString(su.UserPassword)
	builder.WriteString(", ")
	builder.WriteString("user_salt=")
	builder.WriteString(su.UserSalt)
	builder.WriteString(", ")
	builder.WriteString("user_email=")
	builder.WriteString(su.UserEmail)
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", su.Sex))
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(su.Avatar)
	builder.WriteString(", ")
	builder.WriteString("is_admin=")
	builder.WriteString(fmt.Sprintf("%v", su.IsAdmin))
	builder.WriteString(", ")
	builder.WriteString("user_status=")
	builder.WriteString(fmt.Sprintf("%v", su.UserStatus))
	builder.WriteString(", ")
	builder.WriteString("dept_id=")
	builder.WriteString(fmt.Sprintf("%v", su.DeptID))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(su.Address)
	builder.WriteString(", ")
	builder.WriteString("describe=")
	builder.WriteString(su.Describe)
	builder.WriteString(", ")
	builder.WriteString("last_login_ip=")
	builder.WriteString(su.LastLoginIP)
	builder.WriteString(", ")
	builder.WriteString("last_login_time=")
	builder.WriteString(su.LastLoginTime)
	builder.WriteByte(')')
	return builder.String()
}

// SysUsers is a parsable slice of SysUser.
type SysUsers []*SysUser
