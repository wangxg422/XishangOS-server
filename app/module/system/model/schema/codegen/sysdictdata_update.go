// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdictdata"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdicttype"
)

// SysDictDataUpdate is the builder for updating SysDictData entities.
type SysDictDataUpdate struct {
	config
	hooks    []Hook
	mutation *SysDictDataMutation
}

// Where appends a list predicates to the SysDictDataUpdate builder.
func (sddu *SysDictDataUpdate) Where(ps ...predicate.SysDictData) *SysDictDataUpdate {
	sddu.mutation.Where(ps...)
	return sddu
}

// SetUpdatedAt sets the "updated_at" field.
func (sddu *SysDictDataUpdate) SetUpdatedAt(t time.Time) *SysDictDataUpdate {
	sddu.mutation.SetUpdatedAt(t)
	return sddu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sddu *SysDictDataUpdate) ClearUpdatedAt() *SysDictDataUpdate {
	sddu.mutation.ClearUpdatedAt()
	return sddu
}

// SetDeleteAt sets the "delete_at" field.
func (sddu *SysDictDataUpdate) SetDeleteAt(t time.Time) *SysDictDataUpdate {
	sddu.mutation.SetDeleteAt(t)
	return sddu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (sddu *SysDictDataUpdate) ClearDeleteAt() *SysDictDataUpdate {
	sddu.mutation.ClearDeleteAt()
	return sddu
}

// SetCreatedBy sets the "created_by" field.
func (sddu *SysDictDataUpdate) SetCreatedBy(i int64) *SysDictDataUpdate {
	sddu.mutation.ResetCreatedBy()
	sddu.mutation.SetCreatedBy(i)
	return sddu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableCreatedBy(i *int64) *SysDictDataUpdate {
	if i != nil {
		sddu.SetCreatedBy(*i)
	}
	return sddu
}

// AddCreatedBy adds i to the "created_by" field.
func (sddu *SysDictDataUpdate) AddCreatedBy(i int64) *SysDictDataUpdate {
	sddu.mutation.AddCreatedBy(i)
	return sddu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sddu *SysDictDataUpdate) ClearCreatedBy() *SysDictDataUpdate {
	sddu.mutation.ClearCreatedBy()
	return sddu
}

// SetUpdatedBy sets the "updated_by" field.
func (sddu *SysDictDataUpdate) SetUpdatedBy(i int64) *SysDictDataUpdate {
	sddu.mutation.ResetUpdatedBy()
	sddu.mutation.SetUpdatedBy(i)
	return sddu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableUpdatedBy(i *int64) *SysDictDataUpdate {
	if i != nil {
		sddu.SetUpdatedBy(*i)
	}
	return sddu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (sddu *SysDictDataUpdate) AddUpdatedBy(i int64) *SysDictDataUpdate {
	sddu.mutation.AddUpdatedBy(i)
	return sddu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sddu *SysDictDataUpdate) ClearUpdatedBy() *SysDictDataUpdate {
	sddu.mutation.ClearUpdatedBy()
	return sddu
}

// SetDeleteBy sets the "delete_by" field.
func (sddu *SysDictDataUpdate) SetDeleteBy(i int64) *SysDictDataUpdate {
	sddu.mutation.ResetDeleteBy()
	sddu.mutation.SetDeleteBy(i)
	return sddu
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableDeleteBy(i *int64) *SysDictDataUpdate {
	if i != nil {
		sddu.SetDeleteBy(*i)
	}
	return sddu
}

// AddDeleteBy adds i to the "delete_by" field.
func (sddu *SysDictDataUpdate) AddDeleteBy(i int64) *SysDictDataUpdate {
	sddu.mutation.AddDeleteBy(i)
	return sddu
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (sddu *SysDictDataUpdate) ClearDeleteBy() *SysDictDataUpdate {
	sddu.mutation.ClearDeleteBy()
	return sddu
}

// SetRemark sets the "remark" field.
func (sddu *SysDictDataUpdate) SetRemark(s string) *SysDictDataUpdate {
	sddu.mutation.SetRemark(s)
	return sddu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableRemark(s *string) *SysDictDataUpdate {
	if s != nil {
		sddu.SetRemark(*s)
	}
	return sddu
}

// ClearRemark clears the value of the "remark" field.
func (sddu *SysDictDataUpdate) ClearRemark() *SysDictDataUpdate {
	sddu.mutation.ClearRemark()
	return sddu
}

// SetSort sets the "sort" field.
func (sddu *SysDictDataUpdate) SetSort(i int) *SysDictDataUpdate {
	sddu.mutation.ResetSort()
	sddu.mutation.SetSort(i)
	return sddu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableSort(i *int) *SysDictDataUpdate {
	if i != nil {
		sddu.SetSort(*i)
	}
	return sddu
}

// AddSort adds i to the "sort" field.
func (sddu *SysDictDataUpdate) AddSort(i int) *SysDictDataUpdate {
	sddu.mutation.AddSort(i)
	return sddu
}

// ClearSort clears the value of the "sort" field.
func (sddu *SysDictDataUpdate) ClearSort() *SysDictDataUpdate {
	sddu.mutation.ClearSort()
	return sddu
}

// SetDelFlag sets the "del_flag" field.
func (sddu *SysDictDataUpdate) SetDelFlag(i int8) *SysDictDataUpdate {
	sddu.mutation.ResetDelFlag()
	sddu.mutation.SetDelFlag(i)
	return sddu
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableDelFlag(i *int8) *SysDictDataUpdate {
	if i != nil {
		sddu.SetDelFlag(*i)
	}
	return sddu
}

// AddDelFlag adds i to the "del_flag" field.
func (sddu *SysDictDataUpdate) AddDelFlag(i int8) *SysDictDataUpdate {
	sddu.mutation.AddDelFlag(i)
	return sddu
}

// ClearDelFlag clears the value of the "del_flag" field.
func (sddu *SysDictDataUpdate) ClearDelFlag() *SysDictDataUpdate {
	sddu.mutation.ClearDelFlag()
	return sddu
}

// SetDictLabel sets the "dict_label" field.
func (sddu *SysDictDataUpdate) SetDictLabel(s string) *SysDictDataUpdate {
	sddu.mutation.SetDictLabel(s)
	return sddu
}

// SetNillableDictLabel sets the "dict_label" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableDictLabel(s *string) *SysDictDataUpdate {
	if s != nil {
		sddu.SetDictLabel(*s)
	}
	return sddu
}

// ClearDictLabel clears the value of the "dict_label" field.
func (sddu *SysDictDataUpdate) ClearDictLabel() *SysDictDataUpdate {
	sddu.mutation.ClearDictLabel()
	return sddu
}

// SetDictValue sets the "dict_value" field.
func (sddu *SysDictDataUpdate) SetDictValue(s string) *SysDictDataUpdate {
	sddu.mutation.SetDictValue(s)
	return sddu
}

// SetNillableDictValue sets the "dict_value" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableDictValue(s *string) *SysDictDataUpdate {
	if s != nil {
		sddu.SetDictValue(*s)
	}
	return sddu
}

// ClearDictValue clears the value of the "dict_value" field.
func (sddu *SysDictDataUpdate) ClearDictValue() *SysDictDataUpdate {
	sddu.mutation.ClearDictValue()
	return sddu
}

// SetDictTypeID sets the "dict_type_id" field.
func (sddu *SysDictDataUpdate) SetDictTypeID(i int64) *SysDictDataUpdate {
	sddu.mutation.SetDictTypeID(i)
	return sddu
}

// SetNillableDictTypeID sets the "dict_type_id" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableDictTypeID(i *int64) *SysDictDataUpdate {
	if i != nil {
		sddu.SetDictTypeID(*i)
	}
	return sddu
}

// ClearDictTypeID clears the value of the "dict_type_id" field.
func (sddu *SysDictDataUpdate) ClearDictTypeID() *SysDictDataUpdate {
	sddu.mutation.ClearDictTypeID()
	return sddu
}

// SetCSSClass sets the "css_class" field.
func (sddu *SysDictDataUpdate) SetCSSClass(s string) *SysDictDataUpdate {
	sddu.mutation.SetCSSClass(s)
	return sddu
}

// SetNillableCSSClass sets the "css_class" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableCSSClass(s *string) *SysDictDataUpdate {
	if s != nil {
		sddu.SetCSSClass(*s)
	}
	return sddu
}

// ClearCSSClass clears the value of the "css_class" field.
func (sddu *SysDictDataUpdate) ClearCSSClass() *SysDictDataUpdate {
	sddu.mutation.ClearCSSClass()
	return sddu
}

// SetListClass sets the "list_class" field.
func (sddu *SysDictDataUpdate) SetListClass(s string) *SysDictDataUpdate {
	sddu.mutation.SetListClass(s)
	return sddu
}

// SetNillableListClass sets the "list_class" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableListClass(s *string) *SysDictDataUpdate {
	if s != nil {
		sddu.SetListClass(*s)
	}
	return sddu
}

// ClearListClass clears the value of the "list_class" field.
func (sddu *SysDictDataUpdate) ClearListClass() *SysDictDataUpdate {
	sddu.mutation.ClearListClass()
	return sddu
}

// SetIsDefault sets the "is_default" field.
func (sddu *SysDictDataUpdate) SetIsDefault(i int8) *SysDictDataUpdate {
	sddu.mutation.ResetIsDefault()
	sddu.mutation.SetIsDefault(i)
	return sddu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableIsDefault(i *int8) *SysDictDataUpdate {
	if i != nil {
		sddu.SetIsDefault(*i)
	}
	return sddu
}

// AddIsDefault adds i to the "is_default" field.
func (sddu *SysDictDataUpdate) AddIsDefault(i int8) *SysDictDataUpdate {
	sddu.mutation.AddIsDefault(i)
	return sddu
}

// ClearIsDefault clears the value of the "is_default" field.
func (sddu *SysDictDataUpdate) ClearIsDefault() *SysDictDataUpdate {
	sddu.mutation.ClearIsDefault()
	return sddu
}

// SetSysDictTypeID sets the "sysDictType" edge to the SysDictType entity by ID.
func (sddu *SysDictDataUpdate) SetSysDictTypeID(id int64) *SysDictDataUpdate {
	sddu.mutation.SetSysDictTypeID(id)
	return sddu
}

// SetNillableSysDictTypeID sets the "sysDictType" edge to the SysDictType entity by ID if the given value is not nil.
func (sddu *SysDictDataUpdate) SetNillableSysDictTypeID(id *int64) *SysDictDataUpdate {
	if id != nil {
		sddu = sddu.SetSysDictTypeID(*id)
	}
	return sddu
}

// SetSysDictType sets the "sysDictType" edge to the SysDictType entity.
func (sddu *SysDictDataUpdate) SetSysDictType(s *SysDictType) *SysDictDataUpdate {
	return sddu.SetSysDictTypeID(s.ID)
}

// Mutation returns the SysDictDataMutation object of the builder.
func (sddu *SysDictDataUpdate) Mutation() *SysDictDataMutation {
	return sddu.mutation
}

// ClearSysDictType clears the "sysDictType" edge to the SysDictType entity.
func (sddu *SysDictDataUpdate) ClearSysDictType() *SysDictDataUpdate {
	sddu.mutation.ClearSysDictType()
	return sddu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sddu *SysDictDataUpdate) Save(ctx context.Context) (int, error) {
	if err := sddu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sddu.sqlSave, sddu.mutation, sddu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sddu *SysDictDataUpdate) SaveX(ctx context.Context) int {
	affected, err := sddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sddu *SysDictDataUpdate) Exec(ctx context.Context) error {
	_, err := sddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sddu *SysDictDataUpdate) ExecX(ctx context.Context) {
	if err := sddu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sddu *SysDictDataUpdate) defaults() error {
	if _, ok := sddu.mutation.UpdatedAt(); !ok && !sddu.mutation.UpdatedAtCleared() {
		if sysdictdata.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdictdata.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysdictdata.UpdateDefaultUpdatedAt()
		sddu.mutation.SetUpdatedAt(v)
	}
	if _, ok := sddu.mutation.DeleteAt(); !ok && !sddu.mutation.DeleteAtCleared() {
		if sysdictdata.UpdateDefaultDeleteAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdictdata.UpdateDefaultDeleteAt (forgotten import codegen/runtime?)")
		}
		v := sysdictdata.UpdateDefaultDeleteAt()
		sddu.mutation.SetDeleteAt(v)
	}
	return nil
}

func (sddu *SysDictDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysdictdata.Table, sysdictdata.Columns, sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64))
	if ps := sddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sddu.mutation.CreatedAtCleared() {
		_spec.ClearField(sysdictdata.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sddu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdictdata.FieldUpdatedAt, field.TypeTime, value)
	}
	if sddu.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysdictdata.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sddu.mutation.DeleteAt(); ok {
		_spec.SetField(sysdictdata.FieldDeleteAt, field.TypeTime, value)
	}
	if sddu.mutation.DeleteAtCleared() {
		_spec.ClearField(sysdictdata.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := sddu.mutation.CreatedBy(); ok {
		_spec.SetField(sysdictdata.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := sddu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysdictdata.FieldCreatedBy, field.TypeInt64, value)
	}
	if sddu.mutation.CreatedByCleared() {
		_spec.ClearField(sysdictdata.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := sddu.mutation.UpdatedBy(); ok {
		_spec.SetField(sysdictdata.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := sddu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysdictdata.FieldUpdatedBy, field.TypeInt64, value)
	}
	if sddu.mutation.UpdatedByCleared() {
		_spec.ClearField(sysdictdata.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := sddu.mutation.DeleteBy(); ok {
		_spec.SetField(sysdictdata.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := sddu.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysdictdata.FieldDeleteBy, field.TypeInt64, value)
	}
	if sddu.mutation.DeleteByCleared() {
		_spec.ClearField(sysdictdata.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := sddu.mutation.Remark(); ok {
		_spec.SetField(sysdictdata.FieldRemark, field.TypeString, value)
	}
	if sddu.mutation.RemarkCleared() {
		_spec.ClearField(sysdictdata.FieldRemark, field.TypeString)
	}
	if sddu.mutation.StatusCleared() {
		_spec.ClearField(sysdictdata.FieldStatus, field.TypeInt8)
	}
	if value, ok := sddu.mutation.Sort(); ok {
		_spec.SetField(sysdictdata.FieldSort, field.TypeInt, value)
	}
	if value, ok := sddu.mutation.AddedSort(); ok {
		_spec.AddField(sysdictdata.FieldSort, field.TypeInt, value)
	}
	if sddu.mutation.SortCleared() {
		_spec.ClearField(sysdictdata.FieldSort, field.TypeInt)
	}
	if value, ok := sddu.mutation.DelFlag(); ok {
		_spec.SetField(sysdictdata.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := sddu.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysdictdata.FieldDelFlag, field.TypeInt8, value)
	}
	if sddu.mutation.DelFlagCleared() {
		_spec.ClearField(sysdictdata.FieldDelFlag, field.TypeInt8)
	}
	if value, ok := sddu.mutation.DictLabel(); ok {
		_spec.SetField(sysdictdata.FieldDictLabel, field.TypeString, value)
	}
	if sddu.mutation.DictLabelCleared() {
		_spec.ClearField(sysdictdata.FieldDictLabel, field.TypeString)
	}
	if value, ok := sddu.mutation.DictValue(); ok {
		_spec.SetField(sysdictdata.FieldDictValue, field.TypeString, value)
	}
	if sddu.mutation.DictValueCleared() {
		_spec.ClearField(sysdictdata.FieldDictValue, field.TypeString)
	}
	if value, ok := sddu.mutation.CSSClass(); ok {
		_spec.SetField(sysdictdata.FieldCSSClass, field.TypeString, value)
	}
	if sddu.mutation.CSSClassCleared() {
		_spec.ClearField(sysdictdata.FieldCSSClass, field.TypeString)
	}
	if value, ok := sddu.mutation.ListClass(); ok {
		_spec.SetField(sysdictdata.FieldListClass, field.TypeString, value)
	}
	if sddu.mutation.ListClassCleared() {
		_spec.ClearField(sysdictdata.FieldListClass, field.TypeString)
	}
	if value, ok := sddu.mutation.IsDefault(); ok {
		_spec.SetField(sysdictdata.FieldIsDefault, field.TypeInt8, value)
	}
	if value, ok := sddu.mutation.AddedIsDefault(); ok {
		_spec.AddField(sysdictdata.FieldIsDefault, field.TypeInt8, value)
	}
	if sddu.mutation.IsDefaultCleared() {
		_spec.ClearField(sysdictdata.FieldIsDefault, field.TypeInt8)
	}
	if sddu.mutation.SysDictTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdictdata.SysDictTypeTable,
			Columns: []string{sysdictdata.SysDictTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdicttype.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sddu.mutation.SysDictTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdictdata.SysDictTypeTable,
			Columns: []string{sysdictdata.SysDictTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdicttype.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdictdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sddu.mutation.done = true
	return n, nil
}

// SysDictDataUpdateOne is the builder for updating a single SysDictData entity.
type SysDictDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysDictDataMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sdduo *SysDictDataUpdateOne) SetUpdatedAt(t time.Time) *SysDictDataUpdateOne {
	sdduo.mutation.SetUpdatedAt(t)
	return sdduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sdduo *SysDictDataUpdateOne) ClearUpdatedAt() *SysDictDataUpdateOne {
	sdduo.mutation.ClearUpdatedAt()
	return sdduo
}

// SetDeleteAt sets the "delete_at" field.
func (sdduo *SysDictDataUpdateOne) SetDeleteAt(t time.Time) *SysDictDataUpdateOne {
	sdduo.mutation.SetDeleteAt(t)
	return sdduo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (sdduo *SysDictDataUpdateOne) ClearDeleteAt() *SysDictDataUpdateOne {
	sdduo.mutation.ClearDeleteAt()
	return sdduo
}

// SetCreatedBy sets the "created_by" field.
func (sdduo *SysDictDataUpdateOne) SetCreatedBy(i int64) *SysDictDataUpdateOne {
	sdduo.mutation.ResetCreatedBy()
	sdduo.mutation.SetCreatedBy(i)
	return sdduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableCreatedBy(i *int64) *SysDictDataUpdateOne {
	if i != nil {
		sdduo.SetCreatedBy(*i)
	}
	return sdduo
}

// AddCreatedBy adds i to the "created_by" field.
func (sdduo *SysDictDataUpdateOne) AddCreatedBy(i int64) *SysDictDataUpdateOne {
	sdduo.mutation.AddCreatedBy(i)
	return sdduo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sdduo *SysDictDataUpdateOne) ClearCreatedBy() *SysDictDataUpdateOne {
	sdduo.mutation.ClearCreatedBy()
	return sdduo
}

// SetUpdatedBy sets the "updated_by" field.
func (sdduo *SysDictDataUpdateOne) SetUpdatedBy(i int64) *SysDictDataUpdateOne {
	sdduo.mutation.ResetUpdatedBy()
	sdduo.mutation.SetUpdatedBy(i)
	return sdduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableUpdatedBy(i *int64) *SysDictDataUpdateOne {
	if i != nil {
		sdduo.SetUpdatedBy(*i)
	}
	return sdduo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (sdduo *SysDictDataUpdateOne) AddUpdatedBy(i int64) *SysDictDataUpdateOne {
	sdduo.mutation.AddUpdatedBy(i)
	return sdduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sdduo *SysDictDataUpdateOne) ClearUpdatedBy() *SysDictDataUpdateOne {
	sdduo.mutation.ClearUpdatedBy()
	return sdduo
}

// SetDeleteBy sets the "delete_by" field.
func (sdduo *SysDictDataUpdateOne) SetDeleteBy(i int64) *SysDictDataUpdateOne {
	sdduo.mutation.ResetDeleteBy()
	sdduo.mutation.SetDeleteBy(i)
	return sdduo
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableDeleteBy(i *int64) *SysDictDataUpdateOne {
	if i != nil {
		sdduo.SetDeleteBy(*i)
	}
	return sdduo
}

// AddDeleteBy adds i to the "delete_by" field.
func (sdduo *SysDictDataUpdateOne) AddDeleteBy(i int64) *SysDictDataUpdateOne {
	sdduo.mutation.AddDeleteBy(i)
	return sdduo
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (sdduo *SysDictDataUpdateOne) ClearDeleteBy() *SysDictDataUpdateOne {
	sdduo.mutation.ClearDeleteBy()
	return sdduo
}

// SetRemark sets the "remark" field.
func (sdduo *SysDictDataUpdateOne) SetRemark(s string) *SysDictDataUpdateOne {
	sdduo.mutation.SetRemark(s)
	return sdduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableRemark(s *string) *SysDictDataUpdateOne {
	if s != nil {
		sdduo.SetRemark(*s)
	}
	return sdduo
}

// ClearRemark clears the value of the "remark" field.
func (sdduo *SysDictDataUpdateOne) ClearRemark() *SysDictDataUpdateOne {
	sdduo.mutation.ClearRemark()
	return sdduo
}

// SetSort sets the "sort" field.
func (sdduo *SysDictDataUpdateOne) SetSort(i int) *SysDictDataUpdateOne {
	sdduo.mutation.ResetSort()
	sdduo.mutation.SetSort(i)
	return sdduo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableSort(i *int) *SysDictDataUpdateOne {
	if i != nil {
		sdduo.SetSort(*i)
	}
	return sdduo
}

// AddSort adds i to the "sort" field.
func (sdduo *SysDictDataUpdateOne) AddSort(i int) *SysDictDataUpdateOne {
	sdduo.mutation.AddSort(i)
	return sdduo
}

// ClearSort clears the value of the "sort" field.
func (sdduo *SysDictDataUpdateOne) ClearSort() *SysDictDataUpdateOne {
	sdduo.mutation.ClearSort()
	return sdduo
}

// SetDelFlag sets the "del_flag" field.
func (sdduo *SysDictDataUpdateOne) SetDelFlag(i int8) *SysDictDataUpdateOne {
	sdduo.mutation.ResetDelFlag()
	sdduo.mutation.SetDelFlag(i)
	return sdduo
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableDelFlag(i *int8) *SysDictDataUpdateOne {
	if i != nil {
		sdduo.SetDelFlag(*i)
	}
	return sdduo
}

// AddDelFlag adds i to the "del_flag" field.
func (sdduo *SysDictDataUpdateOne) AddDelFlag(i int8) *SysDictDataUpdateOne {
	sdduo.mutation.AddDelFlag(i)
	return sdduo
}

// ClearDelFlag clears the value of the "del_flag" field.
func (sdduo *SysDictDataUpdateOne) ClearDelFlag() *SysDictDataUpdateOne {
	sdduo.mutation.ClearDelFlag()
	return sdduo
}

// SetDictLabel sets the "dict_label" field.
func (sdduo *SysDictDataUpdateOne) SetDictLabel(s string) *SysDictDataUpdateOne {
	sdduo.mutation.SetDictLabel(s)
	return sdduo
}

// SetNillableDictLabel sets the "dict_label" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableDictLabel(s *string) *SysDictDataUpdateOne {
	if s != nil {
		sdduo.SetDictLabel(*s)
	}
	return sdduo
}

// ClearDictLabel clears the value of the "dict_label" field.
func (sdduo *SysDictDataUpdateOne) ClearDictLabel() *SysDictDataUpdateOne {
	sdduo.mutation.ClearDictLabel()
	return sdduo
}

// SetDictValue sets the "dict_value" field.
func (sdduo *SysDictDataUpdateOne) SetDictValue(s string) *SysDictDataUpdateOne {
	sdduo.mutation.SetDictValue(s)
	return sdduo
}

// SetNillableDictValue sets the "dict_value" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableDictValue(s *string) *SysDictDataUpdateOne {
	if s != nil {
		sdduo.SetDictValue(*s)
	}
	return sdduo
}

// ClearDictValue clears the value of the "dict_value" field.
func (sdduo *SysDictDataUpdateOne) ClearDictValue() *SysDictDataUpdateOne {
	sdduo.mutation.ClearDictValue()
	return sdduo
}

// SetDictTypeID sets the "dict_type_id" field.
func (sdduo *SysDictDataUpdateOne) SetDictTypeID(i int64) *SysDictDataUpdateOne {
	sdduo.mutation.SetDictTypeID(i)
	return sdduo
}

// SetNillableDictTypeID sets the "dict_type_id" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableDictTypeID(i *int64) *SysDictDataUpdateOne {
	if i != nil {
		sdduo.SetDictTypeID(*i)
	}
	return sdduo
}

// ClearDictTypeID clears the value of the "dict_type_id" field.
func (sdduo *SysDictDataUpdateOne) ClearDictTypeID() *SysDictDataUpdateOne {
	sdduo.mutation.ClearDictTypeID()
	return sdduo
}

// SetCSSClass sets the "css_class" field.
func (sdduo *SysDictDataUpdateOne) SetCSSClass(s string) *SysDictDataUpdateOne {
	sdduo.mutation.SetCSSClass(s)
	return sdduo
}

// SetNillableCSSClass sets the "css_class" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableCSSClass(s *string) *SysDictDataUpdateOne {
	if s != nil {
		sdduo.SetCSSClass(*s)
	}
	return sdduo
}

// ClearCSSClass clears the value of the "css_class" field.
func (sdduo *SysDictDataUpdateOne) ClearCSSClass() *SysDictDataUpdateOne {
	sdduo.mutation.ClearCSSClass()
	return sdduo
}

// SetListClass sets the "list_class" field.
func (sdduo *SysDictDataUpdateOne) SetListClass(s string) *SysDictDataUpdateOne {
	sdduo.mutation.SetListClass(s)
	return sdduo
}

// SetNillableListClass sets the "list_class" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableListClass(s *string) *SysDictDataUpdateOne {
	if s != nil {
		sdduo.SetListClass(*s)
	}
	return sdduo
}

// ClearListClass clears the value of the "list_class" field.
func (sdduo *SysDictDataUpdateOne) ClearListClass() *SysDictDataUpdateOne {
	sdduo.mutation.ClearListClass()
	return sdduo
}

// SetIsDefault sets the "is_default" field.
func (sdduo *SysDictDataUpdateOne) SetIsDefault(i int8) *SysDictDataUpdateOne {
	sdduo.mutation.ResetIsDefault()
	sdduo.mutation.SetIsDefault(i)
	return sdduo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableIsDefault(i *int8) *SysDictDataUpdateOne {
	if i != nil {
		sdduo.SetIsDefault(*i)
	}
	return sdduo
}

// AddIsDefault adds i to the "is_default" field.
func (sdduo *SysDictDataUpdateOne) AddIsDefault(i int8) *SysDictDataUpdateOne {
	sdduo.mutation.AddIsDefault(i)
	return sdduo
}

// ClearIsDefault clears the value of the "is_default" field.
func (sdduo *SysDictDataUpdateOne) ClearIsDefault() *SysDictDataUpdateOne {
	sdduo.mutation.ClearIsDefault()
	return sdduo
}

// SetSysDictTypeID sets the "sysDictType" edge to the SysDictType entity by ID.
func (sdduo *SysDictDataUpdateOne) SetSysDictTypeID(id int64) *SysDictDataUpdateOne {
	sdduo.mutation.SetSysDictTypeID(id)
	return sdduo
}

// SetNillableSysDictTypeID sets the "sysDictType" edge to the SysDictType entity by ID if the given value is not nil.
func (sdduo *SysDictDataUpdateOne) SetNillableSysDictTypeID(id *int64) *SysDictDataUpdateOne {
	if id != nil {
		sdduo = sdduo.SetSysDictTypeID(*id)
	}
	return sdduo
}

// SetSysDictType sets the "sysDictType" edge to the SysDictType entity.
func (sdduo *SysDictDataUpdateOne) SetSysDictType(s *SysDictType) *SysDictDataUpdateOne {
	return sdduo.SetSysDictTypeID(s.ID)
}

// Mutation returns the SysDictDataMutation object of the builder.
func (sdduo *SysDictDataUpdateOne) Mutation() *SysDictDataMutation {
	return sdduo.mutation
}

// ClearSysDictType clears the "sysDictType" edge to the SysDictType entity.
func (sdduo *SysDictDataUpdateOne) ClearSysDictType() *SysDictDataUpdateOne {
	sdduo.mutation.ClearSysDictType()
	return sdduo
}

// Where appends a list predicates to the SysDictDataUpdate builder.
func (sdduo *SysDictDataUpdateOne) Where(ps ...predicate.SysDictData) *SysDictDataUpdateOne {
	sdduo.mutation.Where(ps...)
	return sdduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sdduo *SysDictDataUpdateOne) Select(field string, fields ...string) *SysDictDataUpdateOne {
	sdduo.fields = append([]string{field}, fields...)
	return sdduo
}

// Save executes the query and returns the updated SysDictData entity.
func (sdduo *SysDictDataUpdateOne) Save(ctx context.Context) (*SysDictData, error) {
	if err := sdduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sdduo.sqlSave, sdduo.mutation, sdduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdduo *SysDictDataUpdateOne) SaveX(ctx context.Context) *SysDictData {
	node, err := sdduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sdduo *SysDictDataUpdateOne) Exec(ctx context.Context) error {
	_, err := sdduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdduo *SysDictDataUpdateOne) ExecX(ctx context.Context) {
	if err := sdduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdduo *SysDictDataUpdateOne) defaults() error {
	if _, ok := sdduo.mutation.UpdatedAt(); !ok && !sdduo.mutation.UpdatedAtCleared() {
		if sysdictdata.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdictdata.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysdictdata.UpdateDefaultUpdatedAt()
		sdduo.mutation.SetUpdatedAt(v)
	}
	if _, ok := sdduo.mutation.DeleteAt(); !ok && !sdduo.mutation.DeleteAtCleared() {
		if sysdictdata.UpdateDefaultDeleteAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdictdata.UpdateDefaultDeleteAt (forgotten import codegen/runtime?)")
		}
		v := sysdictdata.UpdateDefaultDeleteAt()
		sdduo.mutation.SetDeleteAt(v)
	}
	return nil
}

func (sdduo *SysDictDataUpdateOne) sqlSave(ctx context.Context) (_node *SysDictData, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysdictdata.Table, sysdictdata.Columns, sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64))
	id, ok := sdduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysDictData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sdduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdictdata.FieldID)
		for _, f := range fields {
			if !sysdictdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysdictdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sdduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sdduo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysdictdata.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sdduo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdictdata.FieldUpdatedAt, field.TypeTime, value)
	}
	if sdduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysdictdata.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sdduo.mutation.DeleteAt(); ok {
		_spec.SetField(sysdictdata.FieldDeleteAt, field.TypeTime, value)
	}
	if sdduo.mutation.DeleteAtCleared() {
		_spec.ClearField(sysdictdata.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := sdduo.mutation.CreatedBy(); ok {
		_spec.SetField(sysdictdata.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := sdduo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysdictdata.FieldCreatedBy, field.TypeInt64, value)
	}
	if sdduo.mutation.CreatedByCleared() {
		_spec.ClearField(sysdictdata.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := sdduo.mutation.UpdatedBy(); ok {
		_spec.SetField(sysdictdata.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := sdduo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysdictdata.FieldUpdatedBy, field.TypeInt64, value)
	}
	if sdduo.mutation.UpdatedByCleared() {
		_spec.ClearField(sysdictdata.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := sdduo.mutation.DeleteBy(); ok {
		_spec.SetField(sysdictdata.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := sdduo.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysdictdata.FieldDeleteBy, field.TypeInt64, value)
	}
	if sdduo.mutation.DeleteByCleared() {
		_spec.ClearField(sysdictdata.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := sdduo.mutation.Remark(); ok {
		_spec.SetField(sysdictdata.FieldRemark, field.TypeString, value)
	}
	if sdduo.mutation.RemarkCleared() {
		_spec.ClearField(sysdictdata.FieldRemark, field.TypeString)
	}
	if sdduo.mutation.StatusCleared() {
		_spec.ClearField(sysdictdata.FieldStatus, field.TypeInt8)
	}
	if value, ok := sdduo.mutation.Sort(); ok {
		_spec.SetField(sysdictdata.FieldSort, field.TypeInt, value)
	}
	if value, ok := sdduo.mutation.AddedSort(); ok {
		_spec.AddField(sysdictdata.FieldSort, field.TypeInt, value)
	}
	if sdduo.mutation.SortCleared() {
		_spec.ClearField(sysdictdata.FieldSort, field.TypeInt)
	}
	if value, ok := sdduo.mutation.DelFlag(); ok {
		_spec.SetField(sysdictdata.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := sdduo.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysdictdata.FieldDelFlag, field.TypeInt8, value)
	}
	if sdduo.mutation.DelFlagCleared() {
		_spec.ClearField(sysdictdata.FieldDelFlag, field.TypeInt8)
	}
	if value, ok := sdduo.mutation.DictLabel(); ok {
		_spec.SetField(sysdictdata.FieldDictLabel, field.TypeString, value)
	}
	if sdduo.mutation.DictLabelCleared() {
		_spec.ClearField(sysdictdata.FieldDictLabel, field.TypeString)
	}
	if value, ok := sdduo.mutation.DictValue(); ok {
		_spec.SetField(sysdictdata.FieldDictValue, field.TypeString, value)
	}
	if sdduo.mutation.DictValueCleared() {
		_spec.ClearField(sysdictdata.FieldDictValue, field.TypeString)
	}
	if value, ok := sdduo.mutation.CSSClass(); ok {
		_spec.SetField(sysdictdata.FieldCSSClass, field.TypeString, value)
	}
	if sdduo.mutation.CSSClassCleared() {
		_spec.ClearField(sysdictdata.FieldCSSClass, field.TypeString)
	}
	if value, ok := sdduo.mutation.ListClass(); ok {
		_spec.SetField(sysdictdata.FieldListClass, field.TypeString, value)
	}
	if sdduo.mutation.ListClassCleared() {
		_spec.ClearField(sysdictdata.FieldListClass, field.TypeString)
	}
	if value, ok := sdduo.mutation.IsDefault(); ok {
		_spec.SetField(sysdictdata.FieldIsDefault, field.TypeInt8, value)
	}
	if value, ok := sdduo.mutation.AddedIsDefault(); ok {
		_spec.AddField(sysdictdata.FieldIsDefault, field.TypeInt8, value)
	}
	if sdduo.mutation.IsDefaultCleared() {
		_spec.ClearField(sysdictdata.FieldIsDefault, field.TypeInt8)
	}
	if sdduo.mutation.SysDictTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdictdata.SysDictTypeTable,
			Columns: []string{sysdictdata.SysDictTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdicttype.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdduo.mutation.SysDictTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdictdata.SysDictTypeTable,
			Columns: []string{sysdictdata.SysDictTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdicttype.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysDictData{config: sdduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sdduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdictdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sdduo.mutation.done = true
	return _node, nil
}
