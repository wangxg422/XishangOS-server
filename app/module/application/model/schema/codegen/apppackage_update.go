// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/appinstance"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/apppackage"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/predicate"
)

// AppPackageUpdate is the builder for updating AppPackage entities.
type AppPackageUpdate struct {
	config
	hooks    []Hook
	mutation *AppPackageMutation
}

// Where appends a list predicates to the AppPackageUpdate builder.
func (apu *AppPackageUpdate) Where(ps ...predicate.AppPackage) *AppPackageUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *AppPackageUpdate) SetUpdatedAt(t time.Time) *AppPackageUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apu *AppPackageUpdate) ClearUpdatedAt() *AppPackageUpdate {
	apu.mutation.ClearUpdatedAt()
	return apu
}

// SetDeleteAt sets the "delete_at" field.
func (apu *AppPackageUpdate) SetDeleteAt(t time.Time) *AppPackageUpdate {
	apu.mutation.SetDeleteAt(t)
	return apu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (apu *AppPackageUpdate) ClearDeleteAt() *AppPackageUpdate {
	apu.mutation.ClearDeleteAt()
	return apu
}

// SetPkgName sets the "pkg_name" field.
func (apu *AppPackageUpdate) SetPkgName(s string) *AppPackageUpdate {
	apu.mutation.SetPkgName(s)
	return apu
}

// SetNillablePkgName sets the "pkg_name" field if the given value is not nil.
func (apu *AppPackageUpdate) SetNillablePkgName(s *string) *AppPackageUpdate {
	if s != nil {
		apu.SetPkgName(*s)
	}
	return apu
}

// SetPkgCode sets the "pkg_code" field.
func (apu *AppPackageUpdate) SetPkgCode(s string) *AppPackageUpdate {
	apu.mutation.SetPkgCode(s)
	return apu
}

// SetNillablePkgCode sets the "pkg_code" field if the given value is not nil.
func (apu *AppPackageUpdate) SetNillablePkgCode(s *string) *AppPackageUpdate {
	if s != nil {
		apu.SetPkgCode(*s)
	}
	return apu
}

// SetPkgVersion sets the "pkg_version" field.
func (apu *AppPackageUpdate) SetPkgVersion(s string) *AppPackageUpdate {
	apu.mutation.SetPkgVersion(s)
	return apu
}

// SetNillablePkgVersion sets the "pkg_version" field if the given value is not nil.
func (apu *AppPackageUpdate) SetNillablePkgVersion(s *string) *AppPackageUpdate {
	if s != nil {
		apu.SetPkgVersion(*s)
	}
	return apu
}

// ClearPkgVersion clears the value of the "pkg_version" field.
func (apu *AppPackageUpdate) ClearPkgVersion() *AppPackageUpdate {
	apu.mutation.ClearPkgVersion()
	return apu
}

// SetPkgType sets the "pkg_type" field.
func (apu *AppPackageUpdate) SetPkgType(i int8) *AppPackageUpdate {
	apu.mutation.ResetPkgType()
	apu.mutation.SetPkgType(i)
	return apu
}

// SetNillablePkgType sets the "pkg_type" field if the given value is not nil.
func (apu *AppPackageUpdate) SetNillablePkgType(i *int8) *AppPackageUpdate {
	if i != nil {
		apu.SetPkgType(*i)
	}
	return apu
}

// AddPkgType adds i to the "pkg_type" field.
func (apu *AppPackageUpdate) AddPkgType(i int8) *AppPackageUpdate {
	apu.mutation.AddPkgType(i)
	return apu
}

// ClearPkgType clears the value of the "pkg_type" field.
func (apu *AppPackageUpdate) ClearPkgType() *AppPackageUpdate {
	apu.mutation.ClearPkgType()
	return apu
}

// SetPkgKind sets the "pkg_kind" field.
func (apu *AppPackageUpdate) SetPkgKind(i int8) *AppPackageUpdate {
	apu.mutation.ResetPkgKind()
	apu.mutation.SetPkgKind(i)
	return apu
}

// SetNillablePkgKind sets the "pkg_kind" field if the given value is not nil.
func (apu *AppPackageUpdate) SetNillablePkgKind(i *int8) *AppPackageUpdate {
	if i != nil {
		apu.SetPkgKind(*i)
	}
	return apu
}

// AddPkgKind adds i to the "pkg_kind" field.
func (apu *AppPackageUpdate) AddPkgKind(i int8) *AppPackageUpdate {
	apu.mutation.AddPkgKind(i)
	return apu
}

// ClearPkgKind clears the value of the "pkg_kind" field.
func (apu *AppPackageUpdate) ClearPkgKind() *AppPackageUpdate {
	apu.mutation.ClearPkgKind()
	return apu
}

// SetUploader sets the "uploader" field.
func (apu *AppPackageUpdate) SetUploader(i int64) *AppPackageUpdate {
	apu.mutation.ResetUploader()
	apu.mutation.SetUploader(i)
	return apu
}

// SetNillableUploader sets the "uploader" field if the given value is not nil.
func (apu *AppPackageUpdate) SetNillableUploader(i *int64) *AppPackageUpdate {
	if i != nil {
		apu.SetUploader(*i)
	}
	return apu
}

// AddUploader adds i to the "uploader" field.
func (apu *AppPackageUpdate) AddUploader(i int64) *AppPackageUpdate {
	apu.mutation.AddUploader(i)
	return apu
}

// ClearUploader clears the value of the "uploader" field.
func (apu *AppPackageUpdate) ClearUploader() *AppPackageUpdate {
	apu.mutation.ClearUploader()
	return apu
}

// SetDesc sets the "desc" field.
func (apu *AppPackageUpdate) SetDesc(s string) *AppPackageUpdate {
	apu.mutation.SetDesc(s)
	return apu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (apu *AppPackageUpdate) SetNillableDesc(s *string) *AppPackageUpdate {
	if s != nil {
		apu.SetDesc(*s)
	}
	return apu
}

// ClearDesc clears the value of the "desc" field.
func (apu *AppPackageUpdate) ClearDesc() *AppPackageUpdate {
	apu.mutation.ClearDesc()
	return apu
}

// SetRemark sets the "remark" field.
func (apu *AppPackageUpdate) SetRemark(s string) *AppPackageUpdate {
	apu.mutation.SetRemark(s)
	return apu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (apu *AppPackageUpdate) SetNillableRemark(s *string) *AppPackageUpdate {
	if s != nil {
		apu.SetRemark(*s)
	}
	return apu
}

// ClearRemark clears the value of the "remark" field.
func (apu *AppPackageUpdate) ClearRemark() *AppPackageUpdate {
	apu.mutation.ClearRemark()
	return apu
}

// AddAppInstanceIDs adds the "app_instance" edge to the AppInstance entity by IDs.
func (apu *AppPackageUpdate) AddAppInstanceIDs(ids ...int64) *AppPackageUpdate {
	apu.mutation.AddAppInstanceIDs(ids...)
	return apu
}

// AddAppInstance adds the "app_instance" edges to the AppInstance entity.
func (apu *AppPackageUpdate) AddAppInstance(a ...*AppInstance) *AppPackageUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddAppInstanceIDs(ids...)
}

// Mutation returns the AppPackageMutation object of the builder.
func (apu *AppPackageUpdate) Mutation() *AppPackageMutation {
	return apu.mutation
}

// ClearAppInstance clears all "app_instance" edges to the AppInstance entity.
func (apu *AppPackageUpdate) ClearAppInstance() *AppPackageUpdate {
	apu.mutation.ClearAppInstance()
	return apu
}

// RemoveAppInstanceIDs removes the "app_instance" edge to AppInstance entities by IDs.
func (apu *AppPackageUpdate) RemoveAppInstanceIDs(ids ...int64) *AppPackageUpdate {
	apu.mutation.RemoveAppInstanceIDs(ids...)
	return apu
}

// RemoveAppInstance removes "app_instance" edges to AppInstance entities.
func (apu *AppPackageUpdate) RemoveAppInstance(a ...*AppInstance) *AppPackageUpdate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveAppInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AppPackageUpdate) Save(ctx context.Context) (int, error) {
	apu.defaults()
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AppPackageUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AppPackageUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AppPackageUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AppPackageUpdate) defaults() {
	if _, ok := apu.mutation.UpdatedAt(); !ok && !apu.mutation.UpdatedAtCleared() {
		v := apppackage.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
	if _, ok := apu.mutation.DeleteAt(); !ok && !apu.mutation.DeleteAtCleared() {
		v := apppackage.UpdateDefaultDeleteAt()
		apu.mutation.SetDeleteAt(v)
	}
}

func (apu *AppPackageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apppackage.Table, apppackage.Columns, sqlgraph.NewFieldSpec(apppackage.FieldID, field.TypeInt64))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if apu.mutation.CreatedAtCleared() {
		_spec.ClearField(apppackage.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(apppackage.FieldUpdatedAt, field.TypeTime, value)
	}
	if apu.mutation.UpdatedAtCleared() {
		_spec.ClearField(apppackage.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.DeleteAt(); ok {
		_spec.SetField(apppackage.FieldDeleteAt, field.TypeTime, value)
	}
	if apu.mutation.DeleteAtCleared() {
		_spec.ClearField(apppackage.FieldDeleteAt, field.TypeTime)
	}
	if apu.mutation.StatusCleared() {
		_spec.ClearField(apppackage.FieldStatus, field.TypeInt8)
	}
	if value, ok := apu.mutation.PkgName(); ok {
		_spec.SetField(apppackage.FieldPkgName, field.TypeString, value)
	}
	if value, ok := apu.mutation.PkgCode(); ok {
		_spec.SetField(apppackage.FieldPkgCode, field.TypeString, value)
	}
	if value, ok := apu.mutation.PkgVersion(); ok {
		_spec.SetField(apppackage.FieldPkgVersion, field.TypeString, value)
	}
	if apu.mutation.PkgVersionCleared() {
		_spec.ClearField(apppackage.FieldPkgVersion, field.TypeString)
	}
	if value, ok := apu.mutation.PkgType(); ok {
		_spec.SetField(apppackage.FieldPkgType, field.TypeInt8, value)
	}
	if value, ok := apu.mutation.AddedPkgType(); ok {
		_spec.AddField(apppackage.FieldPkgType, field.TypeInt8, value)
	}
	if apu.mutation.PkgTypeCleared() {
		_spec.ClearField(apppackage.FieldPkgType, field.TypeInt8)
	}
	if value, ok := apu.mutation.PkgKind(); ok {
		_spec.SetField(apppackage.FieldPkgKind, field.TypeInt8, value)
	}
	if value, ok := apu.mutation.AddedPkgKind(); ok {
		_spec.AddField(apppackage.FieldPkgKind, field.TypeInt8, value)
	}
	if apu.mutation.PkgKindCleared() {
		_spec.ClearField(apppackage.FieldPkgKind, field.TypeInt8)
	}
	if value, ok := apu.mutation.Uploader(); ok {
		_spec.SetField(apppackage.FieldUploader, field.TypeInt64, value)
	}
	if value, ok := apu.mutation.AddedUploader(); ok {
		_spec.AddField(apppackage.FieldUploader, field.TypeInt64, value)
	}
	if apu.mutation.UploaderCleared() {
		_spec.ClearField(apppackage.FieldUploader, field.TypeInt64)
	}
	if value, ok := apu.mutation.Desc(); ok {
		_spec.SetField(apppackage.FieldDesc, field.TypeString, value)
	}
	if apu.mutation.DescCleared() {
		_spec.ClearField(apppackage.FieldDesc, field.TypeString)
	}
	if value, ok := apu.mutation.Remark(); ok {
		_spec.SetField(apppackage.FieldRemark, field.TypeString, value)
	}
	if apu.mutation.RemarkCleared() {
		_spec.ClearField(apppackage.FieldRemark, field.TypeString)
	}
	if apu.mutation.AppInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppackage.AppInstanceTable,
			Columns: []string{apppackage.AppInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinstance.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedAppInstanceIDs(); len(nodes) > 0 && !apu.mutation.AppInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppackage.AppInstanceTable,
			Columns: []string{apppackage.AppInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinstance.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AppInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppackage.AppInstanceTable,
			Columns: []string{apppackage.AppInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinstance.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AppPackageUpdateOne is the builder for updating a single AppPackage entity.
type AppPackageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppPackageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *AppPackageUpdateOne) SetUpdatedAt(t time.Time) *AppPackageUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apuo *AppPackageUpdateOne) ClearUpdatedAt() *AppPackageUpdateOne {
	apuo.mutation.ClearUpdatedAt()
	return apuo
}

// SetDeleteAt sets the "delete_at" field.
func (apuo *AppPackageUpdateOne) SetDeleteAt(t time.Time) *AppPackageUpdateOne {
	apuo.mutation.SetDeleteAt(t)
	return apuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (apuo *AppPackageUpdateOne) ClearDeleteAt() *AppPackageUpdateOne {
	apuo.mutation.ClearDeleteAt()
	return apuo
}

// SetPkgName sets the "pkg_name" field.
func (apuo *AppPackageUpdateOne) SetPkgName(s string) *AppPackageUpdateOne {
	apuo.mutation.SetPkgName(s)
	return apuo
}

// SetNillablePkgName sets the "pkg_name" field if the given value is not nil.
func (apuo *AppPackageUpdateOne) SetNillablePkgName(s *string) *AppPackageUpdateOne {
	if s != nil {
		apuo.SetPkgName(*s)
	}
	return apuo
}

// SetPkgCode sets the "pkg_code" field.
func (apuo *AppPackageUpdateOne) SetPkgCode(s string) *AppPackageUpdateOne {
	apuo.mutation.SetPkgCode(s)
	return apuo
}

// SetNillablePkgCode sets the "pkg_code" field if the given value is not nil.
func (apuo *AppPackageUpdateOne) SetNillablePkgCode(s *string) *AppPackageUpdateOne {
	if s != nil {
		apuo.SetPkgCode(*s)
	}
	return apuo
}

// SetPkgVersion sets the "pkg_version" field.
func (apuo *AppPackageUpdateOne) SetPkgVersion(s string) *AppPackageUpdateOne {
	apuo.mutation.SetPkgVersion(s)
	return apuo
}

// SetNillablePkgVersion sets the "pkg_version" field if the given value is not nil.
func (apuo *AppPackageUpdateOne) SetNillablePkgVersion(s *string) *AppPackageUpdateOne {
	if s != nil {
		apuo.SetPkgVersion(*s)
	}
	return apuo
}

// ClearPkgVersion clears the value of the "pkg_version" field.
func (apuo *AppPackageUpdateOne) ClearPkgVersion() *AppPackageUpdateOne {
	apuo.mutation.ClearPkgVersion()
	return apuo
}

// SetPkgType sets the "pkg_type" field.
func (apuo *AppPackageUpdateOne) SetPkgType(i int8) *AppPackageUpdateOne {
	apuo.mutation.ResetPkgType()
	apuo.mutation.SetPkgType(i)
	return apuo
}

// SetNillablePkgType sets the "pkg_type" field if the given value is not nil.
func (apuo *AppPackageUpdateOne) SetNillablePkgType(i *int8) *AppPackageUpdateOne {
	if i != nil {
		apuo.SetPkgType(*i)
	}
	return apuo
}

// AddPkgType adds i to the "pkg_type" field.
func (apuo *AppPackageUpdateOne) AddPkgType(i int8) *AppPackageUpdateOne {
	apuo.mutation.AddPkgType(i)
	return apuo
}

// ClearPkgType clears the value of the "pkg_type" field.
func (apuo *AppPackageUpdateOne) ClearPkgType() *AppPackageUpdateOne {
	apuo.mutation.ClearPkgType()
	return apuo
}

// SetPkgKind sets the "pkg_kind" field.
func (apuo *AppPackageUpdateOne) SetPkgKind(i int8) *AppPackageUpdateOne {
	apuo.mutation.ResetPkgKind()
	apuo.mutation.SetPkgKind(i)
	return apuo
}

// SetNillablePkgKind sets the "pkg_kind" field if the given value is not nil.
func (apuo *AppPackageUpdateOne) SetNillablePkgKind(i *int8) *AppPackageUpdateOne {
	if i != nil {
		apuo.SetPkgKind(*i)
	}
	return apuo
}

// AddPkgKind adds i to the "pkg_kind" field.
func (apuo *AppPackageUpdateOne) AddPkgKind(i int8) *AppPackageUpdateOne {
	apuo.mutation.AddPkgKind(i)
	return apuo
}

// ClearPkgKind clears the value of the "pkg_kind" field.
func (apuo *AppPackageUpdateOne) ClearPkgKind() *AppPackageUpdateOne {
	apuo.mutation.ClearPkgKind()
	return apuo
}

// SetUploader sets the "uploader" field.
func (apuo *AppPackageUpdateOne) SetUploader(i int64) *AppPackageUpdateOne {
	apuo.mutation.ResetUploader()
	apuo.mutation.SetUploader(i)
	return apuo
}

// SetNillableUploader sets the "uploader" field if the given value is not nil.
func (apuo *AppPackageUpdateOne) SetNillableUploader(i *int64) *AppPackageUpdateOne {
	if i != nil {
		apuo.SetUploader(*i)
	}
	return apuo
}

// AddUploader adds i to the "uploader" field.
func (apuo *AppPackageUpdateOne) AddUploader(i int64) *AppPackageUpdateOne {
	apuo.mutation.AddUploader(i)
	return apuo
}

// ClearUploader clears the value of the "uploader" field.
func (apuo *AppPackageUpdateOne) ClearUploader() *AppPackageUpdateOne {
	apuo.mutation.ClearUploader()
	return apuo
}

// SetDesc sets the "desc" field.
func (apuo *AppPackageUpdateOne) SetDesc(s string) *AppPackageUpdateOne {
	apuo.mutation.SetDesc(s)
	return apuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (apuo *AppPackageUpdateOne) SetNillableDesc(s *string) *AppPackageUpdateOne {
	if s != nil {
		apuo.SetDesc(*s)
	}
	return apuo
}

// ClearDesc clears the value of the "desc" field.
func (apuo *AppPackageUpdateOne) ClearDesc() *AppPackageUpdateOne {
	apuo.mutation.ClearDesc()
	return apuo
}

// SetRemark sets the "remark" field.
func (apuo *AppPackageUpdateOne) SetRemark(s string) *AppPackageUpdateOne {
	apuo.mutation.SetRemark(s)
	return apuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (apuo *AppPackageUpdateOne) SetNillableRemark(s *string) *AppPackageUpdateOne {
	if s != nil {
		apuo.SetRemark(*s)
	}
	return apuo
}

// ClearRemark clears the value of the "remark" field.
func (apuo *AppPackageUpdateOne) ClearRemark() *AppPackageUpdateOne {
	apuo.mutation.ClearRemark()
	return apuo
}

// AddAppInstanceIDs adds the "app_instance" edge to the AppInstance entity by IDs.
func (apuo *AppPackageUpdateOne) AddAppInstanceIDs(ids ...int64) *AppPackageUpdateOne {
	apuo.mutation.AddAppInstanceIDs(ids...)
	return apuo
}

// AddAppInstance adds the "app_instance" edges to the AppInstance entity.
func (apuo *AppPackageUpdateOne) AddAppInstance(a ...*AppInstance) *AppPackageUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddAppInstanceIDs(ids...)
}

// Mutation returns the AppPackageMutation object of the builder.
func (apuo *AppPackageUpdateOne) Mutation() *AppPackageMutation {
	return apuo.mutation
}

// ClearAppInstance clears all "app_instance" edges to the AppInstance entity.
func (apuo *AppPackageUpdateOne) ClearAppInstance() *AppPackageUpdateOne {
	apuo.mutation.ClearAppInstance()
	return apuo
}

// RemoveAppInstanceIDs removes the "app_instance" edge to AppInstance entities by IDs.
func (apuo *AppPackageUpdateOne) RemoveAppInstanceIDs(ids ...int64) *AppPackageUpdateOne {
	apuo.mutation.RemoveAppInstanceIDs(ids...)
	return apuo
}

// RemoveAppInstance removes "app_instance" edges to AppInstance entities.
func (apuo *AppPackageUpdateOne) RemoveAppInstance(a ...*AppInstance) *AppPackageUpdateOne {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveAppInstanceIDs(ids...)
}

// Where appends a list predicates to the AppPackageUpdate builder.
func (apuo *AppPackageUpdateOne) Where(ps ...predicate.AppPackage) *AppPackageUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AppPackageUpdateOne) Select(field string, fields ...string) *AppPackageUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AppPackage entity.
func (apuo *AppPackageUpdateOne) Save(ctx context.Context) (*AppPackage, error) {
	apuo.defaults()
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AppPackageUpdateOne) SaveX(ctx context.Context) *AppPackage {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AppPackageUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AppPackageUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AppPackageUpdateOne) defaults() {
	if _, ok := apuo.mutation.UpdatedAt(); !ok && !apuo.mutation.UpdatedAtCleared() {
		v := apppackage.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := apuo.mutation.DeleteAt(); !ok && !apuo.mutation.DeleteAtCleared() {
		v := apppackage.UpdateDefaultDeleteAt()
		apuo.mutation.SetDeleteAt(v)
	}
}

func (apuo *AppPackageUpdateOne) sqlSave(ctx context.Context) (_node *AppPackage, err error) {
	_spec := sqlgraph.NewUpdateSpec(apppackage.Table, apppackage.Columns, sqlgraph.NewFieldSpec(apppackage.FieldID, field.TypeInt64))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "AppPackage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apppackage.FieldID)
		for _, f := range fields {
			if !apppackage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != apppackage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if apuo.mutation.CreatedAtCleared() {
		_spec.ClearField(apppackage.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(apppackage.FieldUpdatedAt, field.TypeTime, value)
	}
	if apuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(apppackage.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.DeleteAt(); ok {
		_spec.SetField(apppackage.FieldDeleteAt, field.TypeTime, value)
	}
	if apuo.mutation.DeleteAtCleared() {
		_spec.ClearField(apppackage.FieldDeleteAt, field.TypeTime)
	}
	if apuo.mutation.StatusCleared() {
		_spec.ClearField(apppackage.FieldStatus, field.TypeInt8)
	}
	if value, ok := apuo.mutation.PkgName(); ok {
		_spec.SetField(apppackage.FieldPkgName, field.TypeString, value)
	}
	if value, ok := apuo.mutation.PkgCode(); ok {
		_spec.SetField(apppackage.FieldPkgCode, field.TypeString, value)
	}
	if value, ok := apuo.mutation.PkgVersion(); ok {
		_spec.SetField(apppackage.FieldPkgVersion, field.TypeString, value)
	}
	if apuo.mutation.PkgVersionCleared() {
		_spec.ClearField(apppackage.FieldPkgVersion, field.TypeString)
	}
	if value, ok := apuo.mutation.PkgType(); ok {
		_spec.SetField(apppackage.FieldPkgType, field.TypeInt8, value)
	}
	if value, ok := apuo.mutation.AddedPkgType(); ok {
		_spec.AddField(apppackage.FieldPkgType, field.TypeInt8, value)
	}
	if apuo.mutation.PkgTypeCleared() {
		_spec.ClearField(apppackage.FieldPkgType, field.TypeInt8)
	}
	if value, ok := apuo.mutation.PkgKind(); ok {
		_spec.SetField(apppackage.FieldPkgKind, field.TypeInt8, value)
	}
	if value, ok := apuo.mutation.AddedPkgKind(); ok {
		_spec.AddField(apppackage.FieldPkgKind, field.TypeInt8, value)
	}
	if apuo.mutation.PkgKindCleared() {
		_spec.ClearField(apppackage.FieldPkgKind, field.TypeInt8)
	}
	if value, ok := apuo.mutation.Uploader(); ok {
		_spec.SetField(apppackage.FieldUploader, field.TypeInt64, value)
	}
	if value, ok := apuo.mutation.AddedUploader(); ok {
		_spec.AddField(apppackage.FieldUploader, field.TypeInt64, value)
	}
	if apuo.mutation.UploaderCleared() {
		_spec.ClearField(apppackage.FieldUploader, field.TypeInt64)
	}
	if value, ok := apuo.mutation.Desc(); ok {
		_spec.SetField(apppackage.FieldDesc, field.TypeString, value)
	}
	if apuo.mutation.DescCleared() {
		_spec.ClearField(apppackage.FieldDesc, field.TypeString)
	}
	if value, ok := apuo.mutation.Remark(); ok {
		_spec.SetField(apppackage.FieldRemark, field.TypeString, value)
	}
	if apuo.mutation.RemarkCleared() {
		_spec.ClearField(apppackage.FieldRemark, field.TypeString)
	}
	if apuo.mutation.AppInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppackage.AppInstanceTable,
			Columns: []string{apppackage.AppInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinstance.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedAppInstanceIDs(); len(nodes) > 0 && !apuo.mutation.AppInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppackage.AppInstanceTable,
			Columns: []string{apppackage.AppInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinstance.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AppInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppackage.AppInstanceTable,
			Columns: []string{apppackage.AppInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinstance.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppPackage{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apppackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
