// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysconfig"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdept"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdictdata"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdicttype"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysloginlog"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysmenu"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysoperlog"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/syspost"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysrole"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuseronline"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next codegen.Querier) codegen.Querier {
	return codegen.QuerierFunc(func(ctx context.Context, q codegen.Query) (codegen.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q codegen.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The SysConfigFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysConfigFunc func(context.Context, *codegen.SysConfigQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysConfigFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysConfigQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysConfigQuery", q)
}

// The TraverseSysConfig type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysConfig func(context.Context, *codegen.SysConfigQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysConfig) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysConfig) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysConfigQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysConfigQuery", q)
}

// The SysDeptFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDeptFunc func(context.Context, *codegen.SysDeptQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysDeptFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysDeptQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysDeptQuery", q)
}

// The TraverseSysDept type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDept func(context.Context, *codegen.SysDeptQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDept) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDept) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysDeptQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysDeptQuery", q)
}

// The SysDictDataFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDictDataFunc func(context.Context, *codegen.SysDictDataQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysDictDataFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysDictDataQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysDictDataQuery", q)
}

// The TraverseSysDictData type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDictData func(context.Context, *codegen.SysDictDataQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDictData) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDictData) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysDictDataQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysDictDataQuery", q)
}

// The SysDictTypeFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDictTypeFunc func(context.Context, *codegen.SysDictTypeQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysDictTypeFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysDictTypeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysDictTypeQuery", q)
}

// The TraverseSysDictType type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDictType func(context.Context, *codegen.SysDictTypeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDictType) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDictType) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysDictTypeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysDictTypeQuery", q)
}

// The SysLoginLogFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysLoginLogFunc func(context.Context, *codegen.SysLoginLogQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysLoginLogFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysLoginLogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysLoginLogQuery", q)
}

// The TraverseSysLoginLog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysLoginLog func(context.Context, *codegen.SysLoginLogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysLoginLog) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysLoginLog) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysLoginLogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysLoginLogQuery", q)
}

// The SysMenuFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysMenuFunc func(context.Context, *codegen.SysMenuQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysMenuFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysMenuQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysMenuQuery", q)
}

// The TraverseSysMenu type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysMenu func(context.Context, *codegen.SysMenuQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysMenu) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysMenu) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysMenuQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysMenuQuery", q)
}

// The SysOperLogFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysOperLogFunc func(context.Context, *codegen.SysOperLogQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysOperLogFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysOperLogQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysOperLogQuery", q)
}

// The TraverseSysOperLog type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysOperLog func(context.Context, *codegen.SysOperLogQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysOperLog) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysOperLog) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysOperLogQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysOperLogQuery", q)
}

// The SysPostFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysPostFunc func(context.Context, *codegen.SysPostQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysPostFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysPostQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysPostQuery", q)
}

// The TraverseSysPost type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysPost func(context.Context, *codegen.SysPostQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysPost) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysPost) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysPostQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysPostQuery", q)
}

// The SysRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysRoleFunc func(context.Context, *codegen.SysRoleQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysRoleFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysRoleQuery", q)
}

// The TraverseSysRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysRole func(context.Context, *codegen.SysRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysRole) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysRole) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysRoleQuery", q)
}

// The SysUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysUserFunc func(context.Context, *codegen.SysUserQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysUserFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysUserQuery", q)
}

// The TraverseSysUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysUser func(context.Context, *codegen.SysUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysUser) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysUser) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysUserQuery", q)
}

// The SysUserOnlineFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysUserOnlineFunc func(context.Context, *codegen.SysUserOnlineQuery) (codegen.Value, error)

// Query calls f(ctx, q).
func (f SysUserOnlineFunc) Query(ctx context.Context, q codegen.Query) (codegen.Value, error) {
	if q, ok := q.(*codegen.SysUserOnlineQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *codegen.SysUserOnlineQuery", q)
}

// The TraverseSysUserOnline type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysUserOnline func(context.Context, *codegen.SysUserOnlineQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysUserOnline) Intercept(next codegen.Querier) codegen.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysUserOnline) Traverse(ctx context.Context, q codegen.Query) error {
	if q, ok := q.(*codegen.SysUserOnlineQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *codegen.SysUserOnlineQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q codegen.Query) (Query, error) {
	switch q := q.(type) {
	case *codegen.SysConfigQuery:
		return &query[*codegen.SysConfigQuery, predicate.SysConfig, sysconfig.OrderOption]{typ: codegen.TypeSysConfig, tq: q}, nil
	case *codegen.SysDeptQuery:
		return &query[*codegen.SysDeptQuery, predicate.SysDept, sysdept.OrderOption]{typ: codegen.TypeSysDept, tq: q}, nil
	case *codegen.SysDictDataQuery:
		return &query[*codegen.SysDictDataQuery, predicate.SysDictData, sysdictdata.OrderOption]{typ: codegen.TypeSysDictData, tq: q}, nil
	case *codegen.SysDictTypeQuery:
		return &query[*codegen.SysDictTypeQuery, predicate.SysDictType, sysdicttype.OrderOption]{typ: codegen.TypeSysDictType, tq: q}, nil
	case *codegen.SysLoginLogQuery:
		return &query[*codegen.SysLoginLogQuery, predicate.SysLoginLog, sysloginlog.OrderOption]{typ: codegen.TypeSysLoginLog, tq: q}, nil
	case *codegen.SysMenuQuery:
		return &query[*codegen.SysMenuQuery, predicate.SysMenu, sysmenu.OrderOption]{typ: codegen.TypeSysMenu, tq: q}, nil
	case *codegen.SysOperLogQuery:
		return &query[*codegen.SysOperLogQuery, predicate.SysOperLog, sysoperlog.OrderOption]{typ: codegen.TypeSysOperLog, tq: q}, nil
	case *codegen.SysPostQuery:
		return &query[*codegen.SysPostQuery, predicate.SysPost, syspost.OrderOption]{typ: codegen.TypeSysPost, tq: q}, nil
	case *codegen.SysRoleQuery:
		return &query[*codegen.SysRoleQuery, predicate.SysRole, sysrole.OrderOption]{typ: codegen.TypeSysRole, tq: q}, nil
	case *codegen.SysUserQuery:
		return &query[*codegen.SysUserQuery, predicate.SysUser, sysuser.OrderOption]{typ: codegen.TypeSysUser, tq: q}, nil
	case *codegen.SysUserOnlineQuery:
		return &query[*codegen.SysUserOnlineQuery, predicate.SysUserOnline, sysuseronline.OrderOption]{typ: codegen.TypeSysUserOnline, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
