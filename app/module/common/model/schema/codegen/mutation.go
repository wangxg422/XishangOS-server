// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/common/model/schema/codegen/commonconfig"
	"github.com/wangxg422/XishangOS-backend/app/module/common/model/schema/codegen/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCommonConfig = "CommonConfig"
)

// CommonConfigMutation represents an operation that mutates the CommonConfig nodes in the graph.
type CommonConfigMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	created_at     *time.Time
	updated_at     *time.Time
	delete_at      *time.Time
	status         *int8
	addstatus      *int8
	created_by     *int64
	addcreated_by  *int64
	updated_by     *int64
	addupdated_by  *int64
	delete_by      *int64
	adddelete_by   *int64
	remark         *string
	del_flag       *int8
	adddel_flag    *int8
	config_name    *string
	config_key     *string
	config_value   *string
	config_type    *int8
	addconfig_type *int8
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*CommonConfig, error)
	predicates     []predicate.CommonConfig
}

var _ ent.Mutation = (*CommonConfigMutation)(nil)

// commonconfigOption allows management of the mutation configuration using functional options.
type commonconfigOption func(*CommonConfigMutation)

// newCommonConfigMutation creates new mutation for the CommonConfig entity.
func newCommonConfigMutation(c config, op Op, opts ...commonconfigOption) *CommonConfigMutation {
	m := &CommonConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeCommonConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommonConfigID sets the ID field of the mutation.
func withCommonConfigID(id int64) commonconfigOption {
	return func(m *CommonConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *CommonConfig
		)
		m.oldValue = func(ctx context.Context) (*CommonConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CommonConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommonConfig sets the old CommonConfig of the mutation.
func withCommonConfig(node *CommonConfig) commonconfigOption {
	return func(m *CommonConfigMutation) {
		m.oldValue = func(context.Context) (*CommonConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommonConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommonConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("codegen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CommonConfig entities.
func (m *CommonConfigMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommonConfigMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommonConfigMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CommonConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CommonConfigMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommonConfigMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *CommonConfigMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[commonconfig.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *CommonConfigMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommonConfigMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, commonconfig.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CommonConfigMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CommonConfigMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *CommonConfigMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[commonconfig.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *CommonConfigMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CommonConfigMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, commonconfig.FieldUpdatedAt)
}

// SetDeleteAt sets the "delete_at" field.
func (m *CommonConfigMutation) SetDeleteAt(t time.Time) {
	m.delete_at = &t
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CommonConfigMutation) DeleteAt() (r time.Time, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldDeleteAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (m *CommonConfigMutation) ClearDeleteAt() {
	m.delete_at = nil
	m.clearedFields[commonconfig.FieldDeleteAt] = struct{}{}
}

// DeleteAtCleared returns if the "delete_at" field was cleared in this mutation.
func (m *CommonConfigMutation) DeleteAtCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldDeleteAt]
	return ok
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CommonConfigMutation) ResetDeleteAt() {
	m.delete_at = nil
	delete(m.clearedFields, commonconfig.FieldDeleteAt)
}

// SetStatus sets the "status" field.
func (m *CommonConfigMutation) SetStatus(i int8) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *CommonConfigMutation) Status() (r int8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldStatus(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *CommonConfigMutation) AddStatus(i int8) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *CommonConfigMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *CommonConfigMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *CommonConfigMutation) SetCreatedBy(i int64) {
	m.created_by = &i
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *CommonConfigMutation) CreatedBy() (r int64, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldCreatedBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds i to the "created_by" field.
func (m *CommonConfigMutation) AddCreatedBy(i int64) {
	if m.addcreated_by != nil {
		*m.addcreated_by += i
	} else {
		m.addcreated_by = &i
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *CommonConfigMutation) AddedCreatedBy() (r int64, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *CommonConfigMutation) ClearCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	m.clearedFields[commonconfig.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *CommonConfigMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *CommonConfigMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
	delete(m.clearedFields, commonconfig.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *CommonConfigMutation) SetUpdatedBy(i int64) {
	m.updated_by = &i
	m.addupdated_by = nil
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *CommonConfigMutation) UpdatedBy() (r int64, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldUpdatedBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// AddUpdatedBy adds i to the "updated_by" field.
func (m *CommonConfigMutation) AddUpdatedBy(i int64) {
	if m.addupdated_by != nil {
		*m.addupdated_by += i
	} else {
		m.addupdated_by = &i
	}
}

// AddedUpdatedBy returns the value that was added to the "updated_by" field in this mutation.
func (m *CommonConfigMutation) AddedUpdatedBy() (r int64, exists bool) {
	v := m.addupdated_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *CommonConfigMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	m.clearedFields[commonconfig.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *CommonConfigMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *CommonConfigMutation) ResetUpdatedBy() {
	m.updated_by = nil
	m.addupdated_by = nil
	delete(m.clearedFields, commonconfig.FieldUpdatedBy)
}

// SetDeleteBy sets the "delete_by" field.
func (m *CommonConfigMutation) SetDeleteBy(i int64) {
	m.delete_by = &i
	m.adddelete_by = nil
}

// DeleteBy returns the value of the "delete_by" field in the mutation.
func (m *CommonConfigMutation) DeleteBy() (r int64, exists bool) {
	v := m.delete_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteBy returns the old "delete_by" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldDeleteBy(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteBy: %w", err)
	}
	return oldValue.DeleteBy, nil
}

// AddDeleteBy adds i to the "delete_by" field.
func (m *CommonConfigMutation) AddDeleteBy(i int64) {
	if m.adddelete_by != nil {
		*m.adddelete_by += i
	} else {
		m.adddelete_by = &i
	}
}

// AddedDeleteBy returns the value that was added to the "delete_by" field in this mutation.
func (m *CommonConfigMutation) AddedDeleteBy() (r int64, exists bool) {
	v := m.adddelete_by
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (m *CommonConfigMutation) ClearDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	m.clearedFields[commonconfig.FieldDeleteBy] = struct{}{}
}

// DeleteByCleared returns if the "delete_by" field was cleared in this mutation.
func (m *CommonConfigMutation) DeleteByCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldDeleteBy]
	return ok
}

// ResetDeleteBy resets all changes to the "delete_by" field.
func (m *CommonConfigMutation) ResetDeleteBy() {
	m.delete_by = nil
	m.adddelete_by = nil
	delete(m.clearedFields, commonconfig.FieldDeleteBy)
}

// SetRemark sets the "remark" field.
func (m *CommonConfigMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CommonConfigMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *CommonConfigMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[commonconfig.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *CommonConfigMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *CommonConfigMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, commonconfig.FieldRemark)
}

// SetDelFlag sets the "del_flag" field.
func (m *CommonConfigMutation) SetDelFlag(i int8) {
	m.del_flag = &i
	m.adddel_flag = nil
}

// DelFlag returns the value of the "del_flag" field in the mutation.
func (m *CommonConfigMutation) DelFlag() (r int8, exists bool) {
	v := m.del_flag
	if v == nil {
		return
	}
	return *v, true
}

// OldDelFlag returns the old "del_flag" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldDelFlag(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDelFlag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDelFlag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDelFlag: %w", err)
	}
	return oldValue.DelFlag, nil
}

// AddDelFlag adds i to the "del_flag" field.
func (m *CommonConfigMutation) AddDelFlag(i int8) {
	if m.adddel_flag != nil {
		*m.adddel_flag += i
	} else {
		m.adddel_flag = &i
	}
}

// AddedDelFlag returns the value that was added to the "del_flag" field in this mutation.
func (m *CommonConfigMutation) AddedDelFlag() (r int8, exists bool) {
	v := m.adddel_flag
	if v == nil {
		return
	}
	return *v, true
}

// ResetDelFlag resets all changes to the "del_flag" field.
func (m *CommonConfigMutation) ResetDelFlag() {
	m.del_flag = nil
	m.adddel_flag = nil
}

// SetConfigName sets the "config_name" field.
func (m *CommonConfigMutation) SetConfigName(s string) {
	m.config_name = &s
}

// ConfigName returns the value of the "config_name" field in the mutation.
func (m *CommonConfigMutation) ConfigName() (r string, exists bool) {
	v := m.config_name
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigName returns the old "config_name" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldConfigName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigName: %w", err)
	}
	return oldValue.ConfigName, nil
}

// ClearConfigName clears the value of the "config_name" field.
func (m *CommonConfigMutation) ClearConfigName() {
	m.config_name = nil
	m.clearedFields[commonconfig.FieldConfigName] = struct{}{}
}

// ConfigNameCleared returns if the "config_name" field was cleared in this mutation.
func (m *CommonConfigMutation) ConfigNameCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldConfigName]
	return ok
}

// ResetConfigName resets all changes to the "config_name" field.
func (m *CommonConfigMutation) ResetConfigName() {
	m.config_name = nil
	delete(m.clearedFields, commonconfig.FieldConfigName)
}

// SetConfigKey sets the "config_key" field.
func (m *CommonConfigMutation) SetConfigKey(s string) {
	m.config_key = &s
}

// ConfigKey returns the value of the "config_key" field in the mutation.
func (m *CommonConfigMutation) ConfigKey() (r string, exists bool) {
	v := m.config_key
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigKey returns the old "config_key" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldConfigKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigKey: %w", err)
	}
	return oldValue.ConfigKey, nil
}

// ClearConfigKey clears the value of the "config_key" field.
func (m *CommonConfigMutation) ClearConfigKey() {
	m.config_key = nil
	m.clearedFields[commonconfig.FieldConfigKey] = struct{}{}
}

// ConfigKeyCleared returns if the "config_key" field was cleared in this mutation.
func (m *CommonConfigMutation) ConfigKeyCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldConfigKey]
	return ok
}

// ResetConfigKey resets all changes to the "config_key" field.
func (m *CommonConfigMutation) ResetConfigKey() {
	m.config_key = nil
	delete(m.clearedFields, commonconfig.FieldConfigKey)
}

// SetConfigValue sets the "config_value" field.
func (m *CommonConfigMutation) SetConfigValue(s string) {
	m.config_value = &s
}

// ConfigValue returns the value of the "config_value" field in the mutation.
func (m *CommonConfigMutation) ConfigValue() (r string, exists bool) {
	v := m.config_value
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigValue returns the old "config_value" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldConfigValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigValue: %w", err)
	}
	return oldValue.ConfigValue, nil
}

// ClearConfigValue clears the value of the "config_value" field.
func (m *CommonConfigMutation) ClearConfigValue() {
	m.config_value = nil
	m.clearedFields[commonconfig.FieldConfigValue] = struct{}{}
}

// ConfigValueCleared returns if the "config_value" field was cleared in this mutation.
func (m *CommonConfigMutation) ConfigValueCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldConfigValue]
	return ok
}

// ResetConfigValue resets all changes to the "config_value" field.
func (m *CommonConfigMutation) ResetConfigValue() {
	m.config_value = nil
	delete(m.clearedFields, commonconfig.FieldConfigValue)
}

// SetConfigType sets the "config_type" field.
func (m *CommonConfigMutation) SetConfigType(i int8) {
	m.config_type = &i
	m.addconfig_type = nil
}

// ConfigType returns the value of the "config_type" field in the mutation.
func (m *CommonConfigMutation) ConfigType() (r int8, exists bool) {
	v := m.config_type
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigType returns the old "config_type" field's value of the CommonConfig entity.
// If the CommonConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommonConfigMutation) OldConfigType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigType: %w", err)
	}
	return oldValue.ConfigType, nil
}

// AddConfigType adds i to the "config_type" field.
func (m *CommonConfigMutation) AddConfigType(i int8) {
	if m.addconfig_type != nil {
		*m.addconfig_type += i
	} else {
		m.addconfig_type = &i
	}
}

// AddedConfigType returns the value that was added to the "config_type" field in this mutation.
func (m *CommonConfigMutation) AddedConfigType() (r int8, exists bool) {
	v := m.addconfig_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearConfigType clears the value of the "config_type" field.
func (m *CommonConfigMutation) ClearConfigType() {
	m.config_type = nil
	m.addconfig_type = nil
	m.clearedFields[commonconfig.FieldConfigType] = struct{}{}
}

// ConfigTypeCleared returns if the "config_type" field was cleared in this mutation.
func (m *CommonConfigMutation) ConfigTypeCleared() bool {
	_, ok := m.clearedFields[commonconfig.FieldConfigType]
	return ok
}

// ResetConfigType resets all changes to the "config_type" field.
func (m *CommonConfigMutation) ResetConfigType() {
	m.config_type = nil
	m.addconfig_type = nil
	delete(m.clearedFields, commonconfig.FieldConfigType)
}

// Where appends a list predicates to the CommonConfigMutation builder.
func (m *CommonConfigMutation) Where(ps ...predicate.CommonConfig) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CommonConfigMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CommonConfigMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CommonConfig, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CommonConfigMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CommonConfigMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CommonConfig).
func (m *CommonConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommonConfigMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, commonconfig.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, commonconfig.FieldUpdatedAt)
	}
	if m.delete_at != nil {
		fields = append(fields, commonconfig.FieldDeleteAt)
	}
	if m.status != nil {
		fields = append(fields, commonconfig.FieldStatus)
	}
	if m.created_by != nil {
		fields = append(fields, commonconfig.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, commonconfig.FieldUpdatedBy)
	}
	if m.delete_by != nil {
		fields = append(fields, commonconfig.FieldDeleteBy)
	}
	if m.remark != nil {
		fields = append(fields, commonconfig.FieldRemark)
	}
	if m.del_flag != nil {
		fields = append(fields, commonconfig.FieldDelFlag)
	}
	if m.config_name != nil {
		fields = append(fields, commonconfig.FieldConfigName)
	}
	if m.config_key != nil {
		fields = append(fields, commonconfig.FieldConfigKey)
	}
	if m.config_value != nil {
		fields = append(fields, commonconfig.FieldConfigValue)
	}
	if m.config_type != nil {
		fields = append(fields, commonconfig.FieldConfigType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommonConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case commonconfig.FieldCreatedAt:
		return m.CreatedAt()
	case commonconfig.FieldUpdatedAt:
		return m.UpdatedAt()
	case commonconfig.FieldDeleteAt:
		return m.DeleteAt()
	case commonconfig.FieldStatus:
		return m.Status()
	case commonconfig.FieldCreatedBy:
		return m.CreatedBy()
	case commonconfig.FieldUpdatedBy:
		return m.UpdatedBy()
	case commonconfig.FieldDeleteBy:
		return m.DeleteBy()
	case commonconfig.FieldRemark:
		return m.Remark()
	case commonconfig.FieldDelFlag:
		return m.DelFlag()
	case commonconfig.FieldConfigName:
		return m.ConfigName()
	case commonconfig.FieldConfigKey:
		return m.ConfigKey()
	case commonconfig.FieldConfigValue:
		return m.ConfigValue()
	case commonconfig.FieldConfigType:
		return m.ConfigType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommonConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case commonconfig.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case commonconfig.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case commonconfig.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	case commonconfig.FieldStatus:
		return m.OldStatus(ctx)
	case commonconfig.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case commonconfig.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case commonconfig.FieldDeleteBy:
		return m.OldDeleteBy(ctx)
	case commonconfig.FieldRemark:
		return m.OldRemark(ctx)
	case commonconfig.FieldDelFlag:
		return m.OldDelFlag(ctx)
	case commonconfig.FieldConfigName:
		return m.OldConfigName(ctx)
	case commonconfig.FieldConfigKey:
		return m.OldConfigKey(ctx)
	case commonconfig.FieldConfigValue:
		return m.OldConfigValue(ctx)
	case commonconfig.FieldConfigType:
		return m.OldConfigType(ctx)
	}
	return nil, fmt.Errorf("unknown CommonConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommonConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case commonconfig.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case commonconfig.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case commonconfig.FieldDeleteAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	case commonconfig.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case commonconfig.FieldCreatedBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case commonconfig.FieldUpdatedBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case commonconfig.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteBy(v)
		return nil
	case commonconfig.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case commonconfig.FieldDelFlag:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDelFlag(v)
		return nil
	case commonconfig.FieldConfigName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigName(v)
		return nil
	case commonconfig.FieldConfigKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigKey(v)
		return nil
	case commonconfig.FieldConfigValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigValue(v)
		return nil
	case commonconfig.FieldConfigType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigType(v)
		return nil
	}
	return fmt.Errorf("unknown CommonConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommonConfigMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, commonconfig.FieldStatus)
	}
	if m.addcreated_by != nil {
		fields = append(fields, commonconfig.FieldCreatedBy)
	}
	if m.addupdated_by != nil {
		fields = append(fields, commonconfig.FieldUpdatedBy)
	}
	if m.adddelete_by != nil {
		fields = append(fields, commonconfig.FieldDeleteBy)
	}
	if m.adddel_flag != nil {
		fields = append(fields, commonconfig.FieldDelFlag)
	}
	if m.addconfig_type != nil {
		fields = append(fields, commonconfig.FieldConfigType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommonConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case commonconfig.FieldStatus:
		return m.AddedStatus()
	case commonconfig.FieldCreatedBy:
		return m.AddedCreatedBy()
	case commonconfig.FieldUpdatedBy:
		return m.AddedUpdatedBy()
	case commonconfig.FieldDeleteBy:
		return m.AddedDeleteBy()
	case commonconfig.FieldDelFlag:
		return m.AddedDelFlag()
	case commonconfig.FieldConfigType:
		return m.AddedConfigType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommonConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case commonconfig.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case commonconfig.FieldCreatedBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	case commonconfig.FieldUpdatedBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedBy(v)
		return nil
	case commonconfig.FieldDeleteBy:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteBy(v)
		return nil
	case commonconfig.FieldDelFlag:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDelFlag(v)
		return nil
	case commonconfig.FieldConfigType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddConfigType(v)
		return nil
	}
	return fmt.Errorf("unknown CommonConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommonConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(commonconfig.FieldCreatedAt) {
		fields = append(fields, commonconfig.FieldCreatedAt)
	}
	if m.FieldCleared(commonconfig.FieldUpdatedAt) {
		fields = append(fields, commonconfig.FieldUpdatedAt)
	}
	if m.FieldCleared(commonconfig.FieldDeleteAt) {
		fields = append(fields, commonconfig.FieldDeleteAt)
	}
	if m.FieldCleared(commonconfig.FieldCreatedBy) {
		fields = append(fields, commonconfig.FieldCreatedBy)
	}
	if m.FieldCleared(commonconfig.FieldUpdatedBy) {
		fields = append(fields, commonconfig.FieldUpdatedBy)
	}
	if m.FieldCleared(commonconfig.FieldDeleteBy) {
		fields = append(fields, commonconfig.FieldDeleteBy)
	}
	if m.FieldCleared(commonconfig.FieldRemark) {
		fields = append(fields, commonconfig.FieldRemark)
	}
	if m.FieldCleared(commonconfig.FieldConfigName) {
		fields = append(fields, commonconfig.FieldConfigName)
	}
	if m.FieldCleared(commonconfig.FieldConfigKey) {
		fields = append(fields, commonconfig.FieldConfigKey)
	}
	if m.FieldCleared(commonconfig.FieldConfigValue) {
		fields = append(fields, commonconfig.FieldConfigValue)
	}
	if m.FieldCleared(commonconfig.FieldConfigType) {
		fields = append(fields, commonconfig.FieldConfigType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommonConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommonConfigMutation) ClearField(name string) error {
	switch name {
	case commonconfig.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case commonconfig.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case commonconfig.FieldDeleteAt:
		m.ClearDeleteAt()
		return nil
	case commonconfig.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case commonconfig.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case commonconfig.FieldDeleteBy:
		m.ClearDeleteBy()
		return nil
	case commonconfig.FieldRemark:
		m.ClearRemark()
		return nil
	case commonconfig.FieldConfigName:
		m.ClearConfigName()
		return nil
	case commonconfig.FieldConfigKey:
		m.ClearConfigKey()
		return nil
	case commonconfig.FieldConfigValue:
		m.ClearConfigValue()
		return nil
	case commonconfig.FieldConfigType:
		m.ClearConfigType()
		return nil
	}
	return fmt.Errorf("unknown CommonConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommonConfigMutation) ResetField(name string) error {
	switch name {
	case commonconfig.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case commonconfig.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case commonconfig.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	case commonconfig.FieldStatus:
		m.ResetStatus()
		return nil
	case commonconfig.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case commonconfig.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case commonconfig.FieldDeleteBy:
		m.ResetDeleteBy()
		return nil
	case commonconfig.FieldRemark:
		m.ResetRemark()
		return nil
	case commonconfig.FieldDelFlag:
		m.ResetDelFlag()
		return nil
	case commonconfig.FieldConfigName:
		m.ResetConfigName()
		return nil
	case commonconfig.FieldConfigKey:
		m.ResetConfigKey()
		return nil
	case commonconfig.FieldConfigValue:
		m.ResetConfigValue()
		return nil
	case commonconfig.FieldConfigType:
		m.ResetConfigType()
		return nil
	}
	return fmt.Errorf("unknown CommonConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommonConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommonConfigMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommonConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommonConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommonConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommonConfigMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommonConfigMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CommonConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommonConfigMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CommonConfig edge %s", name)
}
