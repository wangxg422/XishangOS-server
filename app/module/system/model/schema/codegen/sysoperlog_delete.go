// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysoperlog"
)

// SysOperLogDelete is the builder for deleting a SysOperLog entity.
type SysOperLogDelete struct {
	config
	hooks    []Hook
	mutation *SysOperLogMutation
}

// Where appends a list predicates to the SysOperLogDelete builder.
func (sold *SysOperLogDelete) Where(ps ...predicate.SysOperLog) *SysOperLogDelete {
	sold.mutation.Where(ps...)
	return sold
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sold *SysOperLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sold.sqlExec, sold.mutation, sold.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sold *SysOperLogDelete) ExecX(ctx context.Context) int {
	n, err := sold.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sold *SysOperLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysoperlog.Table, sqlgraph.NewFieldSpec(sysoperlog.FieldID, field.TypeInt64))
	if ps := sold.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sold.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sold.mutation.done = true
	return affected, err
}

// SysOperLogDeleteOne is the builder for deleting a single SysOperLog entity.
type SysOperLogDeleteOne struct {
	sold *SysOperLogDelete
}

// Where appends a list predicates to the SysOperLogDelete builder.
func (soldo *SysOperLogDeleteOne) Where(ps ...predicate.SysOperLog) *SysOperLogDeleteOne {
	soldo.sold.mutation.Where(ps...)
	return soldo
}

// Exec executes the deletion query.
func (soldo *SysOperLogDeleteOne) Exec(ctx context.Context) error {
	n, err := soldo.sold.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysoperlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (soldo *SysOperLogDeleteOne) ExecX(ctx context.Context) {
	if err := soldo.Exec(ctx); err != nil {
		panic(err)
	}
}
