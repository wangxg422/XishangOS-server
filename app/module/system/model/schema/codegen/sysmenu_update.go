// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysmenu"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysrole"
)

// SysMenuUpdate is the builder for updating SysMenu entities.
type SysMenuUpdate struct {
	config
	hooks    []Hook
	mutation *SysMenuMutation
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smu *SysMenuUpdate) Where(ps ...predicate.SysMenu) *SysMenuUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetCreatedAt sets the "created_at" field.
func (smu *SysMenuUpdate) SetCreatedAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetCreatedAt(t)
	return smu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableCreatedAt(t *time.Time) *SysMenuUpdate {
	if t != nil {
		smu.SetCreatedAt(*t)
	}
	return smu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (smu *SysMenuUpdate) ClearCreatedAt() *SysMenuUpdate {
	smu.mutation.ClearCreatedAt()
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *SysMenuUpdate) SetUpdatedAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smu *SysMenuUpdate) ClearUpdatedAt() *SysMenuUpdate {
	smu.mutation.ClearUpdatedAt()
	return smu
}

// SetDeleteAt sets the "delete_at" field.
func (smu *SysMenuUpdate) SetDeleteAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetDeleteAt(t)
	return smu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableDeleteAt(t *time.Time) *SysMenuUpdate {
	if t != nil {
		smu.SetDeleteAt(*t)
	}
	return smu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (smu *SysMenuUpdate) ClearDeleteAt() *SysMenuUpdate {
	smu.mutation.ClearDeleteAt()
	return smu
}

// SetCreatedBy sets the "created_by" field.
func (smu *SysMenuUpdate) SetCreatedBy(i int64) *SysMenuUpdate {
	smu.mutation.ResetCreatedBy()
	smu.mutation.SetCreatedBy(i)
	return smu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableCreatedBy(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetCreatedBy(*i)
	}
	return smu
}

// AddCreatedBy adds i to the "created_by" field.
func (smu *SysMenuUpdate) AddCreatedBy(i int64) *SysMenuUpdate {
	smu.mutation.AddCreatedBy(i)
	return smu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (smu *SysMenuUpdate) ClearCreatedBy() *SysMenuUpdate {
	smu.mutation.ClearCreatedBy()
	return smu
}

// SetUpdatedBy sets the "updated_by" field.
func (smu *SysMenuUpdate) SetUpdatedBy(i int64) *SysMenuUpdate {
	smu.mutation.ResetUpdatedBy()
	smu.mutation.SetUpdatedBy(i)
	return smu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableUpdatedBy(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetUpdatedBy(*i)
	}
	return smu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (smu *SysMenuUpdate) AddUpdatedBy(i int64) *SysMenuUpdate {
	smu.mutation.AddUpdatedBy(i)
	return smu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (smu *SysMenuUpdate) ClearUpdatedBy() *SysMenuUpdate {
	smu.mutation.ClearUpdatedBy()
	return smu
}

// SetDeleteBy sets the "delete_by" field.
func (smu *SysMenuUpdate) SetDeleteBy(i int64) *SysMenuUpdate {
	smu.mutation.ResetDeleteBy()
	smu.mutation.SetDeleteBy(i)
	return smu
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableDeleteBy(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetDeleteBy(*i)
	}
	return smu
}

// AddDeleteBy adds i to the "delete_by" field.
func (smu *SysMenuUpdate) AddDeleteBy(i int64) *SysMenuUpdate {
	smu.mutation.AddDeleteBy(i)
	return smu
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (smu *SysMenuUpdate) ClearDeleteBy() *SysMenuUpdate {
	smu.mutation.ClearDeleteBy()
	return smu
}

// SetStatus sets the "status" field.
func (smu *SysMenuUpdate) SetStatus(i int8) *SysMenuUpdate {
	smu.mutation.ResetStatus()
	smu.mutation.SetStatus(i)
	return smu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableStatus(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetStatus(*i)
	}
	return smu
}

// AddStatus adds i to the "status" field.
func (smu *SysMenuUpdate) AddStatus(i int8) *SysMenuUpdate {
	smu.mutation.AddStatus(i)
	return smu
}

// SetRemark sets the "remark" field.
func (smu *SysMenuUpdate) SetRemark(s string) *SysMenuUpdate {
	smu.mutation.SetRemark(s)
	return smu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableRemark(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetRemark(*s)
	}
	return smu
}

// ClearRemark clears the value of the "remark" field.
func (smu *SysMenuUpdate) ClearRemark() *SysMenuUpdate {
	smu.mutation.ClearRemark()
	return smu
}

// SetSort sets the "sort" field.
func (smu *SysMenuUpdate) SetSort(i int) *SysMenuUpdate {
	smu.mutation.ResetSort()
	smu.mutation.SetSort(i)
	return smu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableSort(i *int) *SysMenuUpdate {
	if i != nil {
		smu.SetSort(*i)
	}
	return smu
}

// AddSort adds i to the "sort" field.
func (smu *SysMenuUpdate) AddSort(i int) *SysMenuUpdate {
	smu.mutation.AddSort(i)
	return smu
}

// ClearSort clears the value of the "sort" field.
func (smu *SysMenuUpdate) ClearSort() *SysMenuUpdate {
	smu.mutation.ClearSort()
	return smu
}

// SetDelFlag sets the "del_flag" field.
func (smu *SysMenuUpdate) SetDelFlag(i int8) *SysMenuUpdate {
	smu.mutation.ResetDelFlag()
	smu.mutation.SetDelFlag(i)
	return smu
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableDelFlag(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetDelFlag(*i)
	}
	return smu
}

// AddDelFlag adds i to the "del_flag" field.
func (smu *SysMenuUpdate) AddDelFlag(i int8) *SysMenuUpdate {
	smu.mutation.AddDelFlag(i)
	return smu
}

// SetPid sets the "pid" field.
func (smu *SysMenuUpdate) SetPid(i int64) *SysMenuUpdate {
	smu.mutation.SetPid(i)
	return smu
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePid(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetPid(*i)
	}
	return smu
}

// ClearPid clears the value of the "pid" field.
func (smu *SysMenuUpdate) ClearPid() *SysMenuUpdate {
	smu.mutation.ClearPid()
	return smu
}

// SetMenuName sets the "menu_name" field.
func (smu *SysMenuUpdate) SetMenuName(s string) *SysMenuUpdate {
	smu.mutation.SetMenuName(s)
	return smu
}

// SetNillableMenuName sets the "menu_name" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMenuName(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetMenuName(*s)
	}
	return smu
}

// ClearMenuName clears the value of the "menu_name" field.
func (smu *SysMenuUpdate) ClearMenuName() *SysMenuUpdate {
	smu.mutation.ClearMenuName()
	return smu
}

// SetMenuTitle sets the "menu_title" field.
func (smu *SysMenuUpdate) SetMenuTitle(s string) *SysMenuUpdate {
	smu.mutation.SetMenuTitle(s)
	return smu
}

// SetNillableMenuTitle sets the "menu_title" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMenuTitle(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetMenuTitle(*s)
	}
	return smu
}

// ClearMenuTitle clears the value of the "menu_title" field.
func (smu *SysMenuUpdate) ClearMenuTitle() *SysMenuUpdate {
	smu.mutation.ClearMenuTitle()
	return smu
}

// SetMenuIcon sets the "menu_icon" field.
func (smu *SysMenuUpdate) SetMenuIcon(s string) *SysMenuUpdate {
	smu.mutation.SetMenuIcon(s)
	return smu
}

// SetNillableMenuIcon sets the "menu_icon" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMenuIcon(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetMenuIcon(*s)
	}
	return smu
}

// ClearMenuIcon clears the value of the "menu_icon" field.
func (smu *SysMenuUpdate) ClearMenuIcon() *SysMenuUpdate {
	smu.mutation.ClearMenuIcon()
	return smu
}

// SetCondition sets the "condition" field.
func (smu *SysMenuUpdate) SetCondition(s string) *SysMenuUpdate {
	smu.mutation.SetCondition(s)
	return smu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableCondition(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetCondition(*s)
	}
	return smu
}

// ClearCondition clears the value of the "condition" field.
func (smu *SysMenuUpdate) ClearCondition() *SysMenuUpdate {
	smu.mutation.ClearCondition()
	return smu
}

// SetMenuType sets the "menu_type" field.
func (smu *SysMenuUpdate) SetMenuType(i int8) *SysMenuUpdate {
	smu.mutation.ResetMenuType()
	smu.mutation.SetMenuType(i)
	return smu
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMenuType(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetMenuType(*i)
	}
	return smu
}

// AddMenuType adds i to the "menu_type" field.
func (smu *SysMenuUpdate) AddMenuType(i int8) *SysMenuUpdate {
	smu.mutation.AddMenuType(i)
	return smu
}

// ClearMenuType clears the value of the "menu_type" field.
func (smu *SysMenuUpdate) ClearMenuType() *SysMenuUpdate {
	smu.mutation.ClearMenuType()
	return smu
}

// SetPath sets the "path" field.
func (smu *SysMenuUpdate) SetPath(s string) *SysMenuUpdate {
	smu.mutation.SetPath(s)
	return smu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillablePath(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetPath(*s)
	}
	return smu
}

// ClearPath clears the value of the "path" field.
func (smu *SysMenuUpdate) ClearPath() *SysMenuUpdate {
	smu.mutation.ClearPath()
	return smu
}

// SetComponent sets the "component" field.
func (smu *SysMenuUpdate) SetComponent(s string) *SysMenuUpdate {
	smu.mutation.SetComponent(s)
	return smu
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableComponent(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetComponent(*s)
	}
	return smu
}

// ClearComponent clears the value of the "component" field.
func (smu *SysMenuUpdate) ClearComponent() *SysMenuUpdate {
	smu.mutation.ClearComponent()
	return smu
}

// SetModuleType sets the "module_type" field.
func (smu *SysMenuUpdate) SetModuleType(s string) *SysMenuUpdate {
	smu.mutation.SetModuleType(s)
	return smu
}

// SetNillableModuleType sets the "module_type" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableModuleType(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetModuleType(*s)
	}
	return smu
}

// ClearModuleType clears the value of the "module_type" field.
func (smu *SysMenuUpdate) ClearModuleType() *SysMenuUpdate {
	smu.mutation.ClearModuleType()
	return smu
}

// SetModelID sets the "model_id" field.
func (smu *SysMenuUpdate) SetModelID(i int64) *SysMenuUpdate {
	smu.mutation.ResetModelID()
	smu.mutation.SetModelID(i)
	return smu
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableModelID(i *int64) *SysMenuUpdate {
	if i != nil {
		smu.SetModelID(*i)
	}
	return smu
}

// AddModelID adds i to the "model_id" field.
func (smu *SysMenuUpdate) AddModelID(i int64) *SysMenuUpdate {
	smu.mutation.AddModelID(i)
	return smu
}

// ClearModelID clears the value of the "model_id" field.
func (smu *SysMenuUpdate) ClearModelID() *SysMenuUpdate {
	smu.mutation.ClearModelID()
	return smu
}

// SetIsHide sets the "is_hide" field.
func (smu *SysMenuUpdate) SetIsHide(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsHide()
	smu.mutation.SetIsHide(i)
	return smu
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsHide(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsHide(*i)
	}
	return smu
}

// AddIsHide adds i to the "is_hide" field.
func (smu *SysMenuUpdate) AddIsHide(i int8) *SysMenuUpdate {
	smu.mutation.AddIsHide(i)
	return smu
}

// ClearIsHide clears the value of the "is_hide" field.
func (smu *SysMenuUpdate) ClearIsHide() *SysMenuUpdate {
	smu.mutation.ClearIsHide()
	return smu
}

// SetIsIframe sets the "is_iframe" field.
func (smu *SysMenuUpdate) SetIsIframe(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsIframe()
	smu.mutation.SetIsIframe(i)
	return smu
}

// SetNillableIsIframe sets the "is_iframe" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsIframe(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsIframe(*i)
	}
	return smu
}

// AddIsIframe adds i to the "is_iframe" field.
func (smu *SysMenuUpdate) AddIsIframe(i int8) *SysMenuUpdate {
	smu.mutation.AddIsIframe(i)
	return smu
}

// ClearIsIframe clears the value of the "is_iframe" field.
func (smu *SysMenuUpdate) ClearIsIframe() *SysMenuUpdate {
	smu.mutation.ClearIsIframe()
	return smu
}

// SetIsLink sets the "is_link" field.
func (smu *SysMenuUpdate) SetIsLink(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsLink()
	smu.mutation.SetIsLink(i)
	return smu
}

// SetNillableIsLink sets the "is_link" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsLink(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsLink(*i)
	}
	return smu
}

// AddIsLink adds i to the "is_link" field.
func (smu *SysMenuUpdate) AddIsLink(i int8) *SysMenuUpdate {
	smu.mutation.AddIsLink(i)
	return smu
}

// ClearIsLink clears the value of the "is_link" field.
func (smu *SysMenuUpdate) ClearIsLink() *SysMenuUpdate {
	smu.mutation.ClearIsLink()
	return smu
}

// SetIsCached sets the "is_cached" field.
func (smu *SysMenuUpdate) SetIsCached(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsCached()
	smu.mutation.SetIsCached(i)
	return smu
}

// SetNillableIsCached sets the "is_cached" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsCached(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsCached(*i)
	}
	return smu
}

// AddIsCached adds i to the "is_cached" field.
func (smu *SysMenuUpdate) AddIsCached(i int8) *SysMenuUpdate {
	smu.mutation.AddIsCached(i)
	return smu
}

// ClearIsCached clears the value of the "is_cached" field.
func (smu *SysMenuUpdate) ClearIsCached() *SysMenuUpdate {
	smu.mutation.ClearIsCached()
	return smu
}

// SetIsAffix sets the "is_affix" field.
func (smu *SysMenuUpdate) SetIsAffix(i int8) *SysMenuUpdate {
	smu.mutation.ResetIsAffix()
	smu.mutation.SetIsAffix(i)
	return smu
}

// SetNillableIsAffix sets the "is_affix" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsAffix(i *int8) *SysMenuUpdate {
	if i != nil {
		smu.SetIsAffix(*i)
	}
	return smu
}

// AddIsAffix adds i to the "is_affix" field.
func (smu *SysMenuUpdate) AddIsAffix(i int8) *SysMenuUpdate {
	smu.mutation.AddIsAffix(i)
	return smu
}

// ClearIsAffix clears the value of the "is_affix" field.
func (smu *SysMenuUpdate) ClearIsAffix() *SysMenuUpdate {
	smu.mutation.ClearIsAffix()
	return smu
}

// SetRedirect sets the "redirect" field.
func (smu *SysMenuUpdate) SetRedirect(s string) *SysMenuUpdate {
	smu.mutation.SetRedirect(s)
	return smu
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableRedirect(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetRedirect(*s)
	}
	return smu
}

// ClearRedirect clears the value of the "redirect" field.
func (smu *SysMenuUpdate) ClearRedirect() *SysMenuUpdate {
	smu.mutation.ClearRedirect()
	return smu
}

// SetLinkURL sets the "link_url" field.
func (smu *SysMenuUpdate) SetLinkURL(s string) *SysMenuUpdate {
	smu.mutation.SetLinkURL(s)
	return smu
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableLinkURL(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetLinkURL(*s)
	}
	return smu
}

// ClearLinkURL clears the value of the "link_url" field.
func (smu *SysMenuUpdate) ClearLinkURL() *SysMenuUpdate {
	smu.mutation.ClearLinkURL()
	return smu
}

// AddSysRoleIDs adds the "sysRoles" edge to the SysRole entity by IDs.
func (smu *SysMenuUpdate) AddSysRoleIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.AddSysRoleIDs(ids...)
	return smu
}

// AddSysRoles adds the "sysRoles" edges to the SysRole entity.
func (smu *SysMenuUpdate) AddSysRoles(s ...*SysRole) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddSysRoleIDs(ids...)
}

// SetParentID sets the "parent" edge to the SysMenu entity by ID.
func (smu *SysMenuUpdate) SetParentID(id int64) *SysMenuUpdate {
	smu.mutation.SetParentID(id)
	return smu
}

// SetNillableParentID sets the "parent" edge to the SysMenu entity by ID if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableParentID(id *int64) *SysMenuUpdate {
	if id != nil {
		smu = smu.SetParentID(*id)
	}
	return smu
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smu *SysMenuUpdate) SetParent(s *SysMenu) *SysMenuUpdate {
	return smu.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysMenu entity by IDs.
func (smu *SysMenuUpdate) AddChildIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.AddChildIDs(ids...)
	return smu
}

// AddChildren adds the "children" edges to the SysMenu entity.
func (smu *SysMenuUpdate) AddChildren(s ...*SysMenu) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddChildIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smu *SysMenuUpdate) Mutation() *SysMenuMutation {
	return smu.mutation
}

// ClearSysRoles clears all "sysRoles" edges to the SysRole entity.
func (smu *SysMenuUpdate) ClearSysRoles() *SysMenuUpdate {
	smu.mutation.ClearSysRoles()
	return smu
}

// RemoveSysRoleIDs removes the "sysRoles" edge to SysRole entities by IDs.
func (smu *SysMenuUpdate) RemoveSysRoleIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.RemoveSysRoleIDs(ids...)
	return smu
}

// RemoveSysRoles removes "sysRoles" edges to SysRole entities.
func (smu *SysMenuUpdate) RemoveSysRoles(s ...*SysRole) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveSysRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (smu *SysMenuUpdate) ClearParent() *SysMenuUpdate {
	smu.mutation.ClearParent()
	return smu
}

// ClearChildren clears all "children" edges to the SysMenu entity.
func (smu *SysMenuUpdate) ClearChildren() *SysMenuUpdate {
	smu.mutation.ClearChildren()
	return smu
}

// RemoveChildIDs removes the "children" edge to SysMenu entities by IDs.
func (smu *SysMenuUpdate) RemoveChildIDs(ids ...int64) *SysMenuUpdate {
	smu.mutation.RemoveChildIDs(ids...)
	return smu
}

// RemoveChildren removes "children" edges to SysMenu entities.
func (smu *SysMenuUpdate) RemoveChildren(s ...*SysMenu) *SysMenuUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SysMenuUpdate) Save(ctx context.Context) (int, error) {
	if err := smu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SysMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SysMenuUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SysMenuUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SysMenuUpdate) defaults() error {
	if _, ok := smu.mutation.UpdatedAt(); !ok && !smu.mutation.UpdatedAtCleared() {
		if sysmenu.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysmenu.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysmenu.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (smu *SysMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysmenu.Table, sysmenu.Columns, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.CreatedAt(); ok {
		_spec.SetField(sysmenu.FieldCreatedAt, field.TypeTime, value)
	}
	if smu.mutation.CreatedAtCleared() {
		_spec.ClearField(sysmenu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if smu.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysmenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.DeleteAt(); ok {
		_spec.SetField(sysmenu.FieldDeleteAt, field.TypeTime, value)
	}
	if smu.mutation.DeleteAtCleared() {
		_spec.ClearField(sysmenu.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := smu.mutation.CreatedBy(); ok {
		_spec.SetField(sysmenu.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysmenu.FieldCreatedBy, field.TypeInt64, value)
	}
	if smu.mutation.CreatedByCleared() {
		_spec.ClearField(sysmenu.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := smu.mutation.UpdatedBy(); ok {
		_spec.SetField(sysmenu.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysmenu.FieldUpdatedBy, field.TypeInt64, value)
	}
	if smu.mutation.UpdatedByCleared() {
		_spec.ClearField(sysmenu.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := smu.mutation.DeleteBy(); ok {
		_spec.SetField(sysmenu.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysmenu.FieldDeleteBy, field.TypeInt64, value)
	}
	if smu.mutation.DeleteByCleared() {
		_spec.ClearField(sysmenu.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := smu.mutation.Status(); ok {
		_spec.SetField(sysmenu.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedStatus(); ok {
		_spec.AddField(sysmenu.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.Remark(); ok {
		_spec.SetField(sysmenu.FieldRemark, field.TypeString, value)
	}
	if smu.mutation.RemarkCleared() {
		_spec.ClearField(sysmenu.FieldRemark, field.TypeString)
	}
	if value, ok := smu.mutation.Sort(); ok {
		_spec.SetField(sysmenu.FieldSort, field.TypeInt, value)
	}
	if value, ok := smu.mutation.AddedSort(); ok {
		_spec.AddField(sysmenu.FieldSort, field.TypeInt, value)
	}
	if smu.mutation.SortCleared() {
		_spec.ClearField(sysmenu.FieldSort, field.TypeInt)
	}
	if value, ok := smu.mutation.DelFlag(); ok {
		_spec.SetField(sysmenu.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysmenu.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.MenuName(); ok {
		_spec.SetField(sysmenu.FieldMenuName, field.TypeString, value)
	}
	if smu.mutation.MenuNameCleared() {
		_spec.ClearField(sysmenu.FieldMenuName, field.TypeString)
	}
	if value, ok := smu.mutation.MenuTitle(); ok {
		_spec.SetField(sysmenu.FieldMenuTitle, field.TypeString, value)
	}
	if smu.mutation.MenuTitleCleared() {
		_spec.ClearField(sysmenu.FieldMenuTitle, field.TypeString)
	}
	if value, ok := smu.mutation.MenuIcon(); ok {
		_spec.SetField(sysmenu.FieldMenuIcon, field.TypeString, value)
	}
	if smu.mutation.MenuIconCleared() {
		_spec.ClearField(sysmenu.FieldMenuIcon, field.TypeString)
	}
	if value, ok := smu.mutation.Condition(); ok {
		_spec.SetField(sysmenu.FieldCondition, field.TypeString, value)
	}
	if smu.mutation.ConditionCleared() {
		_spec.ClearField(sysmenu.FieldCondition, field.TypeString)
	}
	if value, ok := smu.mutation.MenuType(); ok {
		_spec.SetField(sysmenu.FieldMenuType, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedMenuType(); ok {
		_spec.AddField(sysmenu.FieldMenuType, field.TypeInt8, value)
	}
	if smu.mutation.MenuTypeCleared() {
		_spec.ClearField(sysmenu.FieldMenuType, field.TypeInt8)
	}
	if value, ok := smu.mutation.Path(); ok {
		_spec.SetField(sysmenu.FieldPath, field.TypeString, value)
	}
	if smu.mutation.PathCleared() {
		_spec.ClearField(sysmenu.FieldPath, field.TypeString)
	}
	if value, ok := smu.mutation.Component(); ok {
		_spec.SetField(sysmenu.FieldComponent, field.TypeString, value)
	}
	if smu.mutation.ComponentCleared() {
		_spec.ClearField(sysmenu.FieldComponent, field.TypeString)
	}
	if value, ok := smu.mutation.ModuleType(); ok {
		_spec.SetField(sysmenu.FieldModuleType, field.TypeString, value)
	}
	if smu.mutation.ModuleTypeCleared() {
		_spec.ClearField(sysmenu.FieldModuleType, field.TypeString)
	}
	if value, ok := smu.mutation.ModelID(); ok {
		_spec.SetField(sysmenu.FieldModelID, field.TypeInt64, value)
	}
	if value, ok := smu.mutation.AddedModelID(); ok {
		_spec.AddField(sysmenu.FieldModelID, field.TypeInt64, value)
	}
	if smu.mutation.ModelIDCleared() {
		_spec.ClearField(sysmenu.FieldModelID, field.TypeInt64)
	}
	if value, ok := smu.mutation.IsHide(); ok {
		_spec.SetField(sysmenu.FieldIsHide, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsHide(); ok {
		_spec.AddField(sysmenu.FieldIsHide, field.TypeInt8, value)
	}
	if smu.mutation.IsHideCleared() {
		_spec.ClearField(sysmenu.FieldIsHide, field.TypeInt8)
	}
	if value, ok := smu.mutation.IsIframe(); ok {
		_spec.SetField(sysmenu.FieldIsIframe, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsIframe(); ok {
		_spec.AddField(sysmenu.FieldIsIframe, field.TypeInt8, value)
	}
	if smu.mutation.IsIframeCleared() {
		_spec.ClearField(sysmenu.FieldIsIframe, field.TypeInt8)
	}
	if value, ok := smu.mutation.IsLink(); ok {
		_spec.SetField(sysmenu.FieldIsLink, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsLink(); ok {
		_spec.AddField(sysmenu.FieldIsLink, field.TypeInt8, value)
	}
	if smu.mutation.IsLinkCleared() {
		_spec.ClearField(sysmenu.FieldIsLink, field.TypeInt8)
	}
	if value, ok := smu.mutation.IsCached(); ok {
		_spec.SetField(sysmenu.FieldIsCached, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsCached(); ok {
		_spec.AddField(sysmenu.FieldIsCached, field.TypeInt8, value)
	}
	if smu.mutation.IsCachedCleared() {
		_spec.ClearField(sysmenu.FieldIsCached, field.TypeInt8)
	}
	if value, ok := smu.mutation.IsAffix(); ok {
		_spec.SetField(sysmenu.FieldIsAffix, field.TypeInt8, value)
	}
	if value, ok := smu.mutation.AddedIsAffix(); ok {
		_spec.AddField(sysmenu.FieldIsAffix, field.TypeInt8, value)
	}
	if smu.mutation.IsAffixCleared() {
		_spec.ClearField(sysmenu.FieldIsAffix, field.TypeInt8)
	}
	if value, ok := smu.mutation.Redirect(); ok {
		_spec.SetField(sysmenu.FieldRedirect, field.TypeString, value)
	}
	if smu.mutation.RedirectCleared() {
		_spec.ClearField(sysmenu.FieldRedirect, field.TypeString)
	}
	if value, ok := smu.mutation.LinkURL(); ok {
		_spec.SetField(sysmenu.FieldLinkURL, field.TypeString, value)
	}
	if smu.mutation.LinkURLCleared() {
		_spec.ClearField(sysmenu.FieldLinkURL, field.TypeString)
	}
	if smu.mutation.SysRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.SysRolesTable,
			Columns: sysmenu.SysRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedSysRolesIDs(); len(nodes) > 0 && !smu.mutation.SysRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.SysRolesTable,
			Columns: sysmenu.SysRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.SysRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.SysRolesTable,
			Columns: sysmenu.SysRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !smu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SysMenuUpdateOne is the builder for updating a single SysMenu entity.
type SysMenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysMenuMutation
}

// SetCreatedAt sets the "created_at" field.
func (smuo *SysMenuUpdateOne) SetCreatedAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetCreatedAt(t)
	return smuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableCreatedAt(t *time.Time) *SysMenuUpdateOne {
	if t != nil {
		smuo.SetCreatedAt(*t)
	}
	return smuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (smuo *SysMenuUpdateOne) ClearCreatedAt() *SysMenuUpdateOne {
	smuo.mutation.ClearCreatedAt()
	return smuo
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *SysMenuUpdateOne) SetUpdatedAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smuo *SysMenuUpdateOne) ClearUpdatedAt() *SysMenuUpdateOne {
	smuo.mutation.ClearUpdatedAt()
	return smuo
}

// SetDeleteAt sets the "delete_at" field.
func (smuo *SysMenuUpdateOne) SetDeleteAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetDeleteAt(t)
	return smuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableDeleteAt(t *time.Time) *SysMenuUpdateOne {
	if t != nil {
		smuo.SetDeleteAt(*t)
	}
	return smuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (smuo *SysMenuUpdateOne) ClearDeleteAt() *SysMenuUpdateOne {
	smuo.mutation.ClearDeleteAt()
	return smuo
}

// SetCreatedBy sets the "created_by" field.
func (smuo *SysMenuUpdateOne) SetCreatedBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetCreatedBy()
	smuo.mutation.SetCreatedBy(i)
	return smuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableCreatedBy(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetCreatedBy(*i)
	}
	return smuo
}

// AddCreatedBy adds i to the "created_by" field.
func (smuo *SysMenuUpdateOne) AddCreatedBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddCreatedBy(i)
	return smuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (smuo *SysMenuUpdateOne) ClearCreatedBy() *SysMenuUpdateOne {
	smuo.mutation.ClearCreatedBy()
	return smuo
}

// SetUpdatedBy sets the "updated_by" field.
func (smuo *SysMenuUpdateOne) SetUpdatedBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetUpdatedBy()
	smuo.mutation.SetUpdatedBy(i)
	return smuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableUpdatedBy(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetUpdatedBy(*i)
	}
	return smuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (smuo *SysMenuUpdateOne) AddUpdatedBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddUpdatedBy(i)
	return smuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (smuo *SysMenuUpdateOne) ClearUpdatedBy() *SysMenuUpdateOne {
	smuo.mutation.ClearUpdatedBy()
	return smuo
}

// SetDeleteBy sets the "delete_by" field.
func (smuo *SysMenuUpdateOne) SetDeleteBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetDeleteBy()
	smuo.mutation.SetDeleteBy(i)
	return smuo
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableDeleteBy(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetDeleteBy(*i)
	}
	return smuo
}

// AddDeleteBy adds i to the "delete_by" field.
func (smuo *SysMenuUpdateOne) AddDeleteBy(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddDeleteBy(i)
	return smuo
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (smuo *SysMenuUpdateOne) ClearDeleteBy() *SysMenuUpdateOne {
	smuo.mutation.ClearDeleteBy()
	return smuo
}

// SetStatus sets the "status" field.
func (smuo *SysMenuUpdateOne) SetStatus(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetStatus()
	smuo.mutation.SetStatus(i)
	return smuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableStatus(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetStatus(*i)
	}
	return smuo
}

// AddStatus adds i to the "status" field.
func (smuo *SysMenuUpdateOne) AddStatus(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddStatus(i)
	return smuo
}

// SetRemark sets the "remark" field.
func (smuo *SysMenuUpdateOne) SetRemark(s string) *SysMenuUpdateOne {
	smuo.mutation.SetRemark(s)
	return smuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableRemark(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetRemark(*s)
	}
	return smuo
}

// ClearRemark clears the value of the "remark" field.
func (smuo *SysMenuUpdateOne) ClearRemark() *SysMenuUpdateOne {
	smuo.mutation.ClearRemark()
	return smuo
}

// SetSort sets the "sort" field.
func (smuo *SysMenuUpdateOne) SetSort(i int) *SysMenuUpdateOne {
	smuo.mutation.ResetSort()
	smuo.mutation.SetSort(i)
	return smuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableSort(i *int) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetSort(*i)
	}
	return smuo
}

// AddSort adds i to the "sort" field.
func (smuo *SysMenuUpdateOne) AddSort(i int) *SysMenuUpdateOne {
	smuo.mutation.AddSort(i)
	return smuo
}

// ClearSort clears the value of the "sort" field.
func (smuo *SysMenuUpdateOne) ClearSort() *SysMenuUpdateOne {
	smuo.mutation.ClearSort()
	return smuo
}

// SetDelFlag sets the "del_flag" field.
func (smuo *SysMenuUpdateOne) SetDelFlag(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetDelFlag()
	smuo.mutation.SetDelFlag(i)
	return smuo
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableDelFlag(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetDelFlag(*i)
	}
	return smuo
}

// AddDelFlag adds i to the "del_flag" field.
func (smuo *SysMenuUpdateOne) AddDelFlag(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddDelFlag(i)
	return smuo
}

// SetPid sets the "pid" field.
func (smuo *SysMenuUpdateOne) SetPid(i int64) *SysMenuUpdateOne {
	smuo.mutation.SetPid(i)
	return smuo
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePid(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetPid(*i)
	}
	return smuo
}

// ClearPid clears the value of the "pid" field.
func (smuo *SysMenuUpdateOne) ClearPid() *SysMenuUpdateOne {
	smuo.mutation.ClearPid()
	return smuo
}

// SetMenuName sets the "menu_name" field.
func (smuo *SysMenuUpdateOne) SetMenuName(s string) *SysMenuUpdateOne {
	smuo.mutation.SetMenuName(s)
	return smuo
}

// SetNillableMenuName sets the "menu_name" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMenuName(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetMenuName(*s)
	}
	return smuo
}

// ClearMenuName clears the value of the "menu_name" field.
func (smuo *SysMenuUpdateOne) ClearMenuName() *SysMenuUpdateOne {
	smuo.mutation.ClearMenuName()
	return smuo
}

// SetMenuTitle sets the "menu_title" field.
func (smuo *SysMenuUpdateOne) SetMenuTitle(s string) *SysMenuUpdateOne {
	smuo.mutation.SetMenuTitle(s)
	return smuo
}

// SetNillableMenuTitle sets the "menu_title" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMenuTitle(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetMenuTitle(*s)
	}
	return smuo
}

// ClearMenuTitle clears the value of the "menu_title" field.
func (smuo *SysMenuUpdateOne) ClearMenuTitle() *SysMenuUpdateOne {
	smuo.mutation.ClearMenuTitle()
	return smuo
}

// SetMenuIcon sets the "menu_icon" field.
func (smuo *SysMenuUpdateOne) SetMenuIcon(s string) *SysMenuUpdateOne {
	smuo.mutation.SetMenuIcon(s)
	return smuo
}

// SetNillableMenuIcon sets the "menu_icon" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMenuIcon(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetMenuIcon(*s)
	}
	return smuo
}

// ClearMenuIcon clears the value of the "menu_icon" field.
func (smuo *SysMenuUpdateOne) ClearMenuIcon() *SysMenuUpdateOne {
	smuo.mutation.ClearMenuIcon()
	return smuo
}

// SetCondition sets the "condition" field.
func (smuo *SysMenuUpdateOne) SetCondition(s string) *SysMenuUpdateOne {
	smuo.mutation.SetCondition(s)
	return smuo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableCondition(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetCondition(*s)
	}
	return smuo
}

// ClearCondition clears the value of the "condition" field.
func (smuo *SysMenuUpdateOne) ClearCondition() *SysMenuUpdateOne {
	smuo.mutation.ClearCondition()
	return smuo
}

// SetMenuType sets the "menu_type" field.
func (smuo *SysMenuUpdateOne) SetMenuType(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetMenuType()
	smuo.mutation.SetMenuType(i)
	return smuo
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMenuType(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetMenuType(*i)
	}
	return smuo
}

// AddMenuType adds i to the "menu_type" field.
func (smuo *SysMenuUpdateOne) AddMenuType(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddMenuType(i)
	return smuo
}

// ClearMenuType clears the value of the "menu_type" field.
func (smuo *SysMenuUpdateOne) ClearMenuType() *SysMenuUpdateOne {
	smuo.mutation.ClearMenuType()
	return smuo
}

// SetPath sets the "path" field.
func (smuo *SysMenuUpdateOne) SetPath(s string) *SysMenuUpdateOne {
	smuo.mutation.SetPath(s)
	return smuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillablePath(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetPath(*s)
	}
	return smuo
}

// ClearPath clears the value of the "path" field.
func (smuo *SysMenuUpdateOne) ClearPath() *SysMenuUpdateOne {
	smuo.mutation.ClearPath()
	return smuo
}

// SetComponent sets the "component" field.
func (smuo *SysMenuUpdateOne) SetComponent(s string) *SysMenuUpdateOne {
	smuo.mutation.SetComponent(s)
	return smuo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableComponent(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetComponent(*s)
	}
	return smuo
}

// ClearComponent clears the value of the "component" field.
func (smuo *SysMenuUpdateOne) ClearComponent() *SysMenuUpdateOne {
	smuo.mutation.ClearComponent()
	return smuo
}

// SetModuleType sets the "module_type" field.
func (smuo *SysMenuUpdateOne) SetModuleType(s string) *SysMenuUpdateOne {
	smuo.mutation.SetModuleType(s)
	return smuo
}

// SetNillableModuleType sets the "module_type" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableModuleType(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetModuleType(*s)
	}
	return smuo
}

// ClearModuleType clears the value of the "module_type" field.
func (smuo *SysMenuUpdateOne) ClearModuleType() *SysMenuUpdateOne {
	smuo.mutation.ClearModuleType()
	return smuo
}

// SetModelID sets the "model_id" field.
func (smuo *SysMenuUpdateOne) SetModelID(i int64) *SysMenuUpdateOne {
	smuo.mutation.ResetModelID()
	smuo.mutation.SetModelID(i)
	return smuo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableModelID(i *int64) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetModelID(*i)
	}
	return smuo
}

// AddModelID adds i to the "model_id" field.
func (smuo *SysMenuUpdateOne) AddModelID(i int64) *SysMenuUpdateOne {
	smuo.mutation.AddModelID(i)
	return smuo
}

// ClearModelID clears the value of the "model_id" field.
func (smuo *SysMenuUpdateOne) ClearModelID() *SysMenuUpdateOne {
	smuo.mutation.ClearModelID()
	return smuo
}

// SetIsHide sets the "is_hide" field.
func (smuo *SysMenuUpdateOne) SetIsHide(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsHide()
	smuo.mutation.SetIsHide(i)
	return smuo
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsHide(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsHide(*i)
	}
	return smuo
}

// AddIsHide adds i to the "is_hide" field.
func (smuo *SysMenuUpdateOne) AddIsHide(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsHide(i)
	return smuo
}

// ClearIsHide clears the value of the "is_hide" field.
func (smuo *SysMenuUpdateOne) ClearIsHide() *SysMenuUpdateOne {
	smuo.mutation.ClearIsHide()
	return smuo
}

// SetIsIframe sets the "is_iframe" field.
func (smuo *SysMenuUpdateOne) SetIsIframe(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsIframe()
	smuo.mutation.SetIsIframe(i)
	return smuo
}

// SetNillableIsIframe sets the "is_iframe" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsIframe(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsIframe(*i)
	}
	return smuo
}

// AddIsIframe adds i to the "is_iframe" field.
func (smuo *SysMenuUpdateOne) AddIsIframe(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsIframe(i)
	return smuo
}

// ClearIsIframe clears the value of the "is_iframe" field.
func (smuo *SysMenuUpdateOne) ClearIsIframe() *SysMenuUpdateOne {
	smuo.mutation.ClearIsIframe()
	return smuo
}

// SetIsLink sets the "is_link" field.
func (smuo *SysMenuUpdateOne) SetIsLink(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsLink()
	smuo.mutation.SetIsLink(i)
	return smuo
}

// SetNillableIsLink sets the "is_link" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsLink(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsLink(*i)
	}
	return smuo
}

// AddIsLink adds i to the "is_link" field.
func (smuo *SysMenuUpdateOne) AddIsLink(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsLink(i)
	return smuo
}

// ClearIsLink clears the value of the "is_link" field.
func (smuo *SysMenuUpdateOne) ClearIsLink() *SysMenuUpdateOne {
	smuo.mutation.ClearIsLink()
	return smuo
}

// SetIsCached sets the "is_cached" field.
func (smuo *SysMenuUpdateOne) SetIsCached(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsCached()
	smuo.mutation.SetIsCached(i)
	return smuo
}

// SetNillableIsCached sets the "is_cached" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsCached(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsCached(*i)
	}
	return smuo
}

// AddIsCached adds i to the "is_cached" field.
func (smuo *SysMenuUpdateOne) AddIsCached(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsCached(i)
	return smuo
}

// ClearIsCached clears the value of the "is_cached" field.
func (smuo *SysMenuUpdateOne) ClearIsCached() *SysMenuUpdateOne {
	smuo.mutation.ClearIsCached()
	return smuo
}

// SetIsAffix sets the "is_affix" field.
func (smuo *SysMenuUpdateOne) SetIsAffix(i int8) *SysMenuUpdateOne {
	smuo.mutation.ResetIsAffix()
	smuo.mutation.SetIsAffix(i)
	return smuo
}

// SetNillableIsAffix sets the "is_affix" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsAffix(i *int8) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetIsAffix(*i)
	}
	return smuo
}

// AddIsAffix adds i to the "is_affix" field.
func (smuo *SysMenuUpdateOne) AddIsAffix(i int8) *SysMenuUpdateOne {
	smuo.mutation.AddIsAffix(i)
	return smuo
}

// ClearIsAffix clears the value of the "is_affix" field.
func (smuo *SysMenuUpdateOne) ClearIsAffix() *SysMenuUpdateOne {
	smuo.mutation.ClearIsAffix()
	return smuo
}

// SetRedirect sets the "redirect" field.
func (smuo *SysMenuUpdateOne) SetRedirect(s string) *SysMenuUpdateOne {
	smuo.mutation.SetRedirect(s)
	return smuo
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableRedirect(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetRedirect(*s)
	}
	return smuo
}

// ClearRedirect clears the value of the "redirect" field.
func (smuo *SysMenuUpdateOne) ClearRedirect() *SysMenuUpdateOne {
	smuo.mutation.ClearRedirect()
	return smuo
}

// SetLinkURL sets the "link_url" field.
func (smuo *SysMenuUpdateOne) SetLinkURL(s string) *SysMenuUpdateOne {
	smuo.mutation.SetLinkURL(s)
	return smuo
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableLinkURL(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetLinkURL(*s)
	}
	return smuo
}

// ClearLinkURL clears the value of the "link_url" field.
func (smuo *SysMenuUpdateOne) ClearLinkURL() *SysMenuUpdateOne {
	smuo.mutation.ClearLinkURL()
	return smuo
}

// AddSysRoleIDs adds the "sysRoles" edge to the SysRole entity by IDs.
func (smuo *SysMenuUpdateOne) AddSysRoleIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.AddSysRoleIDs(ids...)
	return smuo
}

// AddSysRoles adds the "sysRoles" edges to the SysRole entity.
func (smuo *SysMenuUpdateOne) AddSysRoles(s ...*SysRole) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddSysRoleIDs(ids...)
}

// SetParentID sets the "parent" edge to the SysMenu entity by ID.
func (smuo *SysMenuUpdateOne) SetParentID(id int64) *SysMenuUpdateOne {
	smuo.mutation.SetParentID(id)
	return smuo
}

// SetNillableParentID sets the "parent" edge to the SysMenu entity by ID if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableParentID(id *int64) *SysMenuUpdateOne {
	if id != nil {
		smuo = smuo.SetParentID(*id)
	}
	return smuo
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smuo *SysMenuUpdateOne) SetParent(s *SysMenu) *SysMenuUpdateOne {
	return smuo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysMenu entity by IDs.
func (smuo *SysMenuUpdateOne) AddChildIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.AddChildIDs(ids...)
	return smuo
}

// AddChildren adds the "children" edges to the SysMenu entity.
func (smuo *SysMenuUpdateOne) AddChildren(s ...*SysMenu) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddChildIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smuo *SysMenuUpdateOne) Mutation() *SysMenuMutation {
	return smuo.mutation
}

// ClearSysRoles clears all "sysRoles" edges to the SysRole entity.
func (smuo *SysMenuUpdateOne) ClearSysRoles() *SysMenuUpdateOne {
	smuo.mutation.ClearSysRoles()
	return smuo
}

// RemoveSysRoleIDs removes the "sysRoles" edge to SysRole entities by IDs.
func (smuo *SysMenuUpdateOne) RemoveSysRoleIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.RemoveSysRoleIDs(ids...)
	return smuo
}

// RemoveSysRoles removes "sysRoles" edges to SysRole entities.
func (smuo *SysMenuUpdateOne) RemoveSysRoles(s ...*SysRole) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveSysRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (smuo *SysMenuUpdateOne) ClearParent() *SysMenuUpdateOne {
	smuo.mutation.ClearParent()
	return smuo
}

// ClearChildren clears all "children" edges to the SysMenu entity.
func (smuo *SysMenuUpdateOne) ClearChildren() *SysMenuUpdateOne {
	smuo.mutation.ClearChildren()
	return smuo
}

// RemoveChildIDs removes the "children" edge to SysMenu entities by IDs.
func (smuo *SysMenuUpdateOne) RemoveChildIDs(ids ...int64) *SysMenuUpdateOne {
	smuo.mutation.RemoveChildIDs(ids...)
	return smuo
}

// RemoveChildren removes "children" edges to SysMenu entities.
func (smuo *SysMenuUpdateOne) RemoveChildren(s ...*SysMenu) *SysMenuUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smuo *SysMenuUpdateOne) Where(ps ...predicate.SysMenu) *SysMenuUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SysMenuUpdateOne) Select(field string, fields ...string) *SysMenuUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SysMenu entity.
func (smuo *SysMenuUpdateOne) Save(ctx context.Context) (*SysMenu, error) {
	if err := smuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) SaveX(ctx context.Context) *SysMenu {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SysMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SysMenuUpdateOne) defaults() error {
	if _, ok := smuo.mutation.UpdatedAt(); !ok && !smuo.mutation.UpdatedAtCleared() {
		if sysmenu.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysmenu.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysmenu.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (smuo *SysMenuUpdateOne) sqlSave(ctx context.Context) (_node *SysMenu, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysmenu.Table, sysmenu.Columns, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenu.FieldID)
		for _, f := range fields {
			if !sysmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.CreatedAt(); ok {
		_spec.SetField(sysmenu.FieldCreatedAt, field.TypeTime, value)
	}
	if smuo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysmenu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if smuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysmenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.DeleteAt(); ok {
		_spec.SetField(sysmenu.FieldDeleteAt, field.TypeTime, value)
	}
	if smuo.mutation.DeleteAtCleared() {
		_spec.ClearField(sysmenu.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.CreatedBy(); ok {
		_spec.SetField(sysmenu.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysmenu.FieldCreatedBy, field.TypeInt64, value)
	}
	if smuo.mutation.CreatedByCleared() {
		_spec.ClearField(sysmenu.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := smuo.mutation.UpdatedBy(); ok {
		_spec.SetField(sysmenu.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysmenu.FieldUpdatedBy, field.TypeInt64, value)
	}
	if smuo.mutation.UpdatedByCleared() {
		_spec.ClearField(sysmenu.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := smuo.mutation.DeleteBy(); ok {
		_spec.SetField(sysmenu.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysmenu.FieldDeleteBy, field.TypeInt64, value)
	}
	if smuo.mutation.DeleteByCleared() {
		_spec.ClearField(sysmenu.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := smuo.mutation.Status(); ok {
		_spec.SetField(sysmenu.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedStatus(); ok {
		_spec.AddField(sysmenu.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.Remark(); ok {
		_spec.SetField(sysmenu.FieldRemark, field.TypeString, value)
	}
	if smuo.mutation.RemarkCleared() {
		_spec.ClearField(sysmenu.FieldRemark, field.TypeString)
	}
	if value, ok := smuo.mutation.Sort(); ok {
		_spec.SetField(sysmenu.FieldSort, field.TypeInt, value)
	}
	if value, ok := smuo.mutation.AddedSort(); ok {
		_spec.AddField(sysmenu.FieldSort, field.TypeInt, value)
	}
	if smuo.mutation.SortCleared() {
		_spec.ClearField(sysmenu.FieldSort, field.TypeInt)
	}
	if value, ok := smuo.mutation.DelFlag(); ok {
		_spec.SetField(sysmenu.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysmenu.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.MenuName(); ok {
		_spec.SetField(sysmenu.FieldMenuName, field.TypeString, value)
	}
	if smuo.mutation.MenuNameCleared() {
		_spec.ClearField(sysmenu.FieldMenuName, field.TypeString)
	}
	if value, ok := smuo.mutation.MenuTitle(); ok {
		_spec.SetField(sysmenu.FieldMenuTitle, field.TypeString, value)
	}
	if smuo.mutation.MenuTitleCleared() {
		_spec.ClearField(sysmenu.FieldMenuTitle, field.TypeString)
	}
	if value, ok := smuo.mutation.MenuIcon(); ok {
		_spec.SetField(sysmenu.FieldMenuIcon, field.TypeString, value)
	}
	if smuo.mutation.MenuIconCleared() {
		_spec.ClearField(sysmenu.FieldMenuIcon, field.TypeString)
	}
	if value, ok := smuo.mutation.Condition(); ok {
		_spec.SetField(sysmenu.FieldCondition, field.TypeString, value)
	}
	if smuo.mutation.ConditionCleared() {
		_spec.ClearField(sysmenu.FieldCondition, field.TypeString)
	}
	if value, ok := smuo.mutation.MenuType(); ok {
		_spec.SetField(sysmenu.FieldMenuType, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedMenuType(); ok {
		_spec.AddField(sysmenu.FieldMenuType, field.TypeInt8, value)
	}
	if smuo.mutation.MenuTypeCleared() {
		_spec.ClearField(sysmenu.FieldMenuType, field.TypeInt8)
	}
	if value, ok := smuo.mutation.Path(); ok {
		_spec.SetField(sysmenu.FieldPath, field.TypeString, value)
	}
	if smuo.mutation.PathCleared() {
		_spec.ClearField(sysmenu.FieldPath, field.TypeString)
	}
	if value, ok := smuo.mutation.Component(); ok {
		_spec.SetField(sysmenu.FieldComponent, field.TypeString, value)
	}
	if smuo.mutation.ComponentCleared() {
		_spec.ClearField(sysmenu.FieldComponent, field.TypeString)
	}
	if value, ok := smuo.mutation.ModuleType(); ok {
		_spec.SetField(sysmenu.FieldModuleType, field.TypeString, value)
	}
	if smuo.mutation.ModuleTypeCleared() {
		_spec.ClearField(sysmenu.FieldModuleType, field.TypeString)
	}
	if value, ok := smuo.mutation.ModelID(); ok {
		_spec.SetField(sysmenu.FieldModelID, field.TypeInt64, value)
	}
	if value, ok := smuo.mutation.AddedModelID(); ok {
		_spec.AddField(sysmenu.FieldModelID, field.TypeInt64, value)
	}
	if smuo.mutation.ModelIDCleared() {
		_spec.ClearField(sysmenu.FieldModelID, field.TypeInt64)
	}
	if value, ok := smuo.mutation.IsHide(); ok {
		_spec.SetField(sysmenu.FieldIsHide, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsHide(); ok {
		_spec.AddField(sysmenu.FieldIsHide, field.TypeInt8, value)
	}
	if smuo.mutation.IsHideCleared() {
		_spec.ClearField(sysmenu.FieldIsHide, field.TypeInt8)
	}
	if value, ok := smuo.mutation.IsIframe(); ok {
		_spec.SetField(sysmenu.FieldIsIframe, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsIframe(); ok {
		_spec.AddField(sysmenu.FieldIsIframe, field.TypeInt8, value)
	}
	if smuo.mutation.IsIframeCleared() {
		_spec.ClearField(sysmenu.FieldIsIframe, field.TypeInt8)
	}
	if value, ok := smuo.mutation.IsLink(); ok {
		_spec.SetField(sysmenu.FieldIsLink, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsLink(); ok {
		_spec.AddField(sysmenu.FieldIsLink, field.TypeInt8, value)
	}
	if smuo.mutation.IsLinkCleared() {
		_spec.ClearField(sysmenu.FieldIsLink, field.TypeInt8)
	}
	if value, ok := smuo.mutation.IsCached(); ok {
		_spec.SetField(sysmenu.FieldIsCached, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsCached(); ok {
		_spec.AddField(sysmenu.FieldIsCached, field.TypeInt8, value)
	}
	if smuo.mutation.IsCachedCleared() {
		_spec.ClearField(sysmenu.FieldIsCached, field.TypeInt8)
	}
	if value, ok := smuo.mutation.IsAffix(); ok {
		_spec.SetField(sysmenu.FieldIsAffix, field.TypeInt8, value)
	}
	if value, ok := smuo.mutation.AddedIsAffix(); ok {
		_spec.AddField(sysmenu.FieldIsAffix, field.TypeInt8, value)
	}
	if smuo.mutation.IsAffixCleared() {
		_spec.ClearField(sysmenu.FieldIsAffix, field.TypeInt8)
	}
	if value, ok := smuo.mutation.Redirect(); ok {
		_spec.SetField(sysmenu.FieldRedirect, field.TypeString, value)
	}
	if smuo.mutation.RedirectCleared() {
		_spec.ClearField(sysmenu.FieldRedirect, field.TypeString)
	}
	if value, ok := smuo.mutation.LinkURL(); ok {
		_spec.SetField(sysmenu.FieldLinkURL, field.TypeString, value)
	}
	if smuo.mutation.LinkURLCleared() {
		_spec.ClearField(sysmenu.FieldLinkURL, field.TypeString)
	}
	if smuo.mutation.SysRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.SysRolesTable,
			Columns: sysmenu.SysRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedSysRolesIDs(); len(nodes) > 0 && !smuo.mutation.SysRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.SysRolesTable,
			Columns: sysmenu.SysRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.SysRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sysmenu.SysRolesTable,
			Columns: sysmenu.SysRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !smuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysMenu{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
