// Code generated by ent, DO NOT EDIT.

package sysuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDeleteAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeleteBy applies equality check predicate on the "delete_by" field. It's identical to DeleteByEQ.
func DeleteBy(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDeleteBy, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldRemark, v))
}

// DelFlag applies equality check predicate on the "del_flag" field. It's identical to DelFlagEQ.
func DelFlag(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDelFlag, v))
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserName, v))
}

// UserNickname applies equality check predicate on the "user_nickname" field. It's identical to UserNicknameEQ.
func UserNickname(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserNickname, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldMobile, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldBirthday, v))
}

// UserPassword applies equality check predicate on the "user_password" field. It's identical to UserPasswordEQ.
func UserPassword(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserPassword, v))
}

// UserSalt applies equality check predicate on the "user_salt" field. It's identical to UserSaltEQ.
func UserSalt(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserSalt, v))
}

// UserEmail applies equality check predicate on the "user_email" field. It's identical to UserEmailEQ.
func UserEmail(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserEmail, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldSex, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldAvatar, v))
}

// UserStatus applies equality check predicate on the "user_status" field. It's identical to UserStatusEQ.
func UserStatus(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserStatus, v))
}

// DeptID applies equality check predicate on the "dept_id" field. It's identical to DeptIDEQ.
func DeptID(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDeptID, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldAddress, v))
}

// Describe applies equality check predicate on the "describe" field. It's identical to DescribeEQ.
func Describe(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDescribe, v))
}

// LastLoginIP applies equality check predicate on the "last_login_ip" field. It's identical to LastLoginIPEQ.
func LastLoginIP(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldLastLoginTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldDeleteAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldCreatedBy))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldUpdatedBy))
}

// DeleteByEQ applies the EQ predicate on the "delete_by" field.
func DeleteByEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDeleteBy, v))
}

// DeleteByNEQ applies the NEQ predicate on the "delete_by" field.
func DeleteByNEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldDeleteBy, v))
}

// DeleteByIn applies the In predicate on the "delete_by" field.
func DeleteByIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldDeleteBy, vs...))
}

// DeleteByNotIn applies the NotIn predicate on the "delete_by" field.
func DeleteByNotIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldDeleteBy, vs...))
}

// DeleteByGT applies the GT predicate on the "delete_by" field.
func DeleteByGT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldDeleteBy, v))
}

// DeleteByGTE applies the GTE predicate on the "delete_by" field.
func DeleteByGTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldDeleteBy, v))
}

// DeleteByLT applies the LT predicate on the "delete_by" field.
func DeleteByLT(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldDeleteBy, v))
}

// DeleteByLTE applies the LTE predicate on the "delete_by" field.
func DeleteByLTE(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldDeleteBy, v))
}

// DeleteByIsNil applies the IsNil predicate on the "delete_by" field.
func DeleteByIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldDeleteBy))
}

// DeleteByNotNil applies the NotNil predicate on the "delete_by" field.
func DeleteByNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldDeleteBy))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldRemark, v))
}

// DelFlagEQ applies the EQ predicate on the "del_flag" field.
func DelFlagEQ(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDelFlag, v))
}

// DelFlagNEQ applies the NEQ predicate on the "del_flag" field.
func DelFlagNEQ(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldDelFlag, v))
}

// DelFlagIn applies the In predicate on the "del_flag" field.
func DelFlagIn(vs ...int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldDelFlag, vs...))
}

// DelFlagNotIn applies the NotIn predicate on the "del_flag" field.
func DelFlagNotIn(vs ...int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldDelFlag, vs...))
}

// DelFlagGT applies the GT predicate on the "del_flag" field.
func DelFlagGT(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldDelFlag, v))
}

// DelFlagGTE applies the GTE predicate on the "del_flag" field.
func DelFlagGTE(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldDelFlag, v))
}

// DelFlagLT applies the LT predicate on the "del_flag" field.
func DelFlagLT(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldDelFlag, v))
}

// DelFlagLTE applies the LTE predicate on the "del_flag" field.
func DelFlagLTE(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldDelFlag, v))
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldUserName, v))
}

// UserNicknameEQ applies the EQ predicate on the "user_nickname" field.
func UserNicknameEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserNickname, v))
}

// UserNicknameNEQ applies the NEQ predicate on the "user_nickname" field.
func UserNicknameNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUserNickname, v))
}

// UserNicknameIn applies the In predicate on the "user_nickname" field.
func UserNicknameIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUserNickname, vs...))
}

// UserNicknameNotIn applies the NotIn predicate on the "user_nickname" field.
func UserNicknameNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUserNickname, vs...))
}

// UserNicknameGT applies the GT predicate on the "user_nickname" field.
func UserNicknameGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUserNickname, v))
}

// UserNicknameGTE applies the GTE predicate on the "user_nickname" field.
func UserNicknameGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUserNickname, v))
}

// UserNicknameLT applies the LT predicate on the "user_nickname" field.
func UserNicknameLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUserNickname, v))
}

// UserNicknameLTE applies the LTE predicate on the "user_nickname" field.
func UserNicknameLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUserNickname, v))
}

// UserNicknameContains applies the Contains predicate on the "user_nickname" field.
func UserNicknameContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldUserNickname, v))
}

// UserNicknameHasPrefix applies the HasPrefix predicate on the "user_nickname" field.
func UserNicknameHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldUserNickname, v))
}

// UserNicknameHasSuffix applies the HasSuffix predicate on the "user_nickname" field.
func UserNicknameHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldUserNickname, v))
}

// UserNicknameIsNil applies the IsNil predicate on the "user_nickname" field.
func UserNicknameIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldUserNickname))
}

// UserNicknameNotNil applies the NotNil predicate on the "user_nickname" field.
func UserNicknameNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldUserNickname))
}

// UserNicknameEqualFold applies the EqualFold predicate on the "user_nickname" field.
func UserNicknameEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldUserNickname, v))
}

// UserNicknameContainsFold applies the ContainsFold predicate on the "user_nickname" field.
func UserNicknameContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldUserNickname, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "mobile" field.
func MobileIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "mobile" field.
func MobileNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldMobile, v))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldBirthday, v))
}

// BirthdayContains applies the Contains predicate on the "birthday" field.
func BirthdayContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldBirthday, v))
}

// BirthdayHasPrefix applies the HasPrefix predicate on the "birthday" field.
func BirthdayHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldBirthday, v))
}

// BirthdayHasSuffix applies the HasSuffix predicate on the "birthday" field.
func BirthdayHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldBirthday, v))
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldBirthday))
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldBirthday))
}

// BirthdayEqualFold applies the EqualFold predicate on the "birthday" field.
func BirthdayEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldBirthday, v))
}

// BirthdayContainsFold applies the ContainsFold predicate on the "birthday" field.
func BirthdayContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldBirthday, v))
}

// UserPasswordEQ applies the EQ predicate on the "user_password" field.
func UserPasswordEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserPassword, v))
}

// UserPasswordNEQ applies the NEQ predicate on the "user_password" field.
func UserPasswordNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUserPassword, v))
}

// UserPasswordIn applies the In predicate on the "user_password" field.
func UserPasswordIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUserPassword, vs...))
}

// UserPasswordNotIn applies the NotIn predicate on the "user_password" field.
func UserPasswordNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUserPassword, vs...))
}

// UserPasswordGT applies the GT predicate on the "user_password" field.
func UserPasswordGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUserPassword, v))
}

// UserPasswordGTE applies the GTE predicate on the "user_password" field.
func UserPasswordGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUserPassword, v))
}

// UserPasswordLT applies the LT predicate on the "user_password" field.
func UserPasswordLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUserPassword, v))
}

// UserPasswordLTE applies the LTE predicate on the "user_password" field.
func UserPasswordLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUserPassword, v))
}

// UserPasswordContains applies the Contains predicate on the "user_password" field.
func UserPasswordContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldUserPassword, v))
}

// UserPasswordHasPrefix applies the HasPrefix predicate on the "user_password" field.
func UserPasswordHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldUserPassword, v))
}

// UserPasswordHasSuffix applies the HasSuffix predicate on the "user_password" field.
func UserPasswordHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldUserPassword, v))
}

// UserPasswordIsNil applies the IsNil predicate on the "user_password" field.
func UserPasswordIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldUserPassword))
}

// UserPasswordNotNil applies the NotNil predicate on the "user_password" field.
func UserPasswordNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldUserPassword))
}

// UserPasswordEqualFold applies the EqualFold predicate on the "user_password" field.
func UserPasswordEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldUserPassword, v))
}

// UserPasswordContainsFold applies the ContainsFold predicate on the "user_password" field.
func UserPasswordContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldUserPassword, v))
}

// UserSaltEQ applies the EQ predicate on the "user_salt" field.
func UserSaltEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserSalt, v))
}

// UserSaltNEQ applies the NEQ predicate on the "user_salt" field.
func UserSaltNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUserSalt, v))
}

// UserSaltIn applies the In predicate on the "user_salt" field.
func UserSaltIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUserSalt, vs...))
}

// UserSaltNotIn applies the NotIn predicate on the "user_salt" field.
func UserSaltNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUserSalt, vs...))
}

// UserSaltGT applies the GT predicate on the "user_salt" field.
func UserSaltGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUserSalt, v))
}

// UserSaltGTE applies the GTE predicate on the "user_salt" field.
func UserSaltGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUserSalt, v))
}

// UserSaltLT applies the LT predicate on the "user_salt" field.
func UserSaltLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUserSalt, v))
}

// UserSaltLTE applies the LTE predicate on the "user_salt" field.
func UserSaltLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUserSalt, v))
}

// UserSaltContains applies the Contains predicate on the "user_salt" field.
func UserSaltContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldUserSalt, v))
}

// UserSaltHasPrefix applies the HasPrefix predicate on the "user_salt" field.
func UserSaltHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldUserSalt, v))
}

// UserSaltHasSuffix applies the HasSuffix predicate on the "user_salt" field.
func UserSaltHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldUserSalt, v))
}

// UserSaltIsNil applies the IsNil predicate on the "user_salt" field.
func UserSaltIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldUserSalt))
}

// UserSaltNotNil applies the NotNil predicate on the "user_salt" field.
func UserSaltNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldUserSalt))
}

// UserSaltEqualFold applies the EqualFold predicate on the "user_salt" field.
func UserSaltEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldUserSalt, v))
}

// UserSaltContainsFold applies the ContainsFold predicate on the "user_salt" field.
func UserSaltContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldUserSalt, v))
}

// UserEmailEQ applies the EQ predicate on the "user_email" field.
func UserEmailEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserEmail, v))
}

// UserEmailNEQ applies the NEQ predicate on the "user_email" field.
func UserEmailNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUserEmail, v))
}

// UserEmailIn applies the In predicate on the "user_email" field.
func UserEmailIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUserEmail, vs...))
}

// UserEmailNotIn applies the NotIn predicate on the "user_email" field.
func UserEmailNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUserEmail, vs...))
}

// UserEmailGT applies the GT predicate on the "user_email" field.
func UserEmailGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUserEmail, v))
}

// UserEmailGTE applies the GTE predicate on the "user_email" field.
func UserEmailGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUserEmail, v))
}

// UserEmailLT applies the LT predicate on the "user_email" field.
func UserEmailLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUserEmail, v))
}

// UserEmailLTE applies the LTE predicate on the "user_email" field.
func UserEmailLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUserEmail, v))
}

// UserEmailContains applies the Contains predicate on the "user_email" field.
func UserEmailContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldUserEmail, v))
}

// UserEmailHasPrefix applies the HasPrefix predicate on the "user_email" field.
func UserEmailHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldUserEmail, v))
}

// UserEmailHasSuffix applies the HasSuffix predicate on the "user_email" field.
func UserEmailHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldUserEmail, v))
}

// UserEmailIsNil applies the IsNil predicate on the "user_email" field.
func UserEmailIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldUserEmail))
}

// UserEmailNotNil applies the NotNil predicate on the "user_email" field.
func UserEmailNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldUserEmail))
}

// UserEmailEqualFold applies the EqualFold predicate on the "user_email" field.
func UserEmailEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldUserEmail, v))
}

// UserEmailContainsFold applies the ContainsFold predicate on the "user_email" field.
func UserEmailContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldUserEmail, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldSex, vs...))
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldSex, v))
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldSex, v))
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldSex, v))
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldSex, v))
}

// SexIsNil applies the IsNil predicate on the "sex" field.
func SexIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldSex))
}

// SexNotNil applies the NotNil predicate on the "sex" field.
func SexNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldSex))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldAvatar))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldAvatar, v))
}

// UserStatusEQ applies the EQ predicate on the "user_status" field.
func UserStatusEQ(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldUserStatus, v))
}

// UserStatusNEQ applies the NEQ predicate on the "user_status" field.
func UserStatusNEQ(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldUserStatus, v))
}

// UserStatusIn applies the In predicate on the "user_status" field.
func UserStatusIn(vs ...int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldUserStatus, vs...))
}

// UserStatusNotIn applies the NotIn predicate on the "user_status" field.
func UserStatusNotIn(vs ...int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldUserStatus, vs...))
}

// UserStatusGT applies the GT predicate on the "user_status" field.
func UserStatusGT(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldUserStatus, v))
}

// UserStatusGTE applies the GTE predicate on the "user_status" field.
func UserStatusGTE(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldUserStatus, v))
}

// UserStatusLT applies the LT predicate on the "user_status" field.
func UserStatusLT(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldUserStatus, v))
}

// UserStatusLTE applies the LTE predicate on the "user_status" field.
func UserStatusLTE(v int8) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldUserStatus, v))
}

// UserStatusIsNil applies the IsNil predicate on the "user_status" field.
func UserStatusIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldUserStatus))
}

// UserStatusNotNil applies the NotNil predicate on the "user_status" field.
func UserStatusNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldUserStatus))
}

// DeptIDEQ applies the EQ predicate on the "dept_id" field.
func DeptIDEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDeptID, v))
}

// DeptIDNEQ applies the NEQ predicate on the "dept_id" field.
func DeptIDNEQ(v int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldDeptID, v))
}

// DeptIDIn applies the In predicate on the "dept_id" field.
func DeptIDIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldDeptID, vs...))
}

// DeptIDNotIn applies the NotIn predicate on the "dept_id" field.
func DeptIDNotIn(vs ...int64) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldDeptID, vs...))
}

// DeptIDIsNil applies the IsNil predicate on the "dept_id" field.
func DeptIDIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldDeptID))
}

// DeptIDNotNil applies the NotNil predicate on the "dept_id" field.
func DeptIDNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldDeptID))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldAddress, v))
}

// DescribeEQ applies the EQ predicate on the "describe" field.
func DescribeEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldDescribe, v))
}

// DescribeNEQ applies the NEQ predicate on the "describe" field.
func DescribeNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldDescribe, v))
}

// DescribeIn applies the In predicate on the "describe" field.
func DescribeIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldDescribe, vs...))
}

// DescribeNotIn applies the NotIn predicate on the "describe" field.
func DescribeNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldDescribe, vs...))
}

// DescribeGT applies the GT predicate on the "describe" field.
func DescribeGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldDescribe, v))
}

// DescribeGTE applies the GTE predicate on the "describe" field.
func DescribeGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldDescribe, v))
}

// DescribeLT applies the LT predicate on the "describe" field.
func DescribeLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldDescribe, v))
}

// DescribeLTE applies the LTE predicate on the "describe" field.
func DescribeLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldDescribe, v))
}

// DescribeContains applies the Contains predicate on the "describe" field.
func DescribeContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldDescribe, v))
}

// DescribeHasPrefix applies the HasPrefix predicate on the "describe" field.
func DescribeHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldDescribe, v))
}

// DescribeHasSuffix applies the HasSuffix predicate on the "describe" field.
func DescribeHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldDescribe, v))
}

// DescribeIsNil applies the IsNil predicate on the "describe" field.
func DescribeIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldDescribe))
}

// DescribeNotNil applies the NotNil predicate on the "describe" field.
func DescribeNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldDescribe))
}

// DescribeEqualFold applies the EqualFold predicate on the "describe" field.
func DescribeEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldDescribe, v))
}

// DescribeContainsFold applies the ContainsFold predicate on the "describe" field.
func DescribeContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldDescribe, v))
}

// LastLoginIPEQ applies the EQ predicate on the "last_login_ip" field.
func LastLoginIPEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginIPNEQ applies the NEQ predicate on the "last_login_ip" field.
func LastLoginIPNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldLastLoginIP, v))
}

// LastLoginIPIn applies the In predicate on the "last_login_ip" field.
func LastLoginIPIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldLastLoginIP, vs...))
}

// LastLoginIPNotIn applies the NotIn predicate on the "last_login_ip" field.
func LastLoginIPNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldLastLoginIP, vs...))
}

// LastLoginIPGT applies the GT predicate on the "last_login_ip" field.
func LastLoginIPGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldLastLoginIP, v))
}

// LastLoginIPGTE applies the GTE predicate on the "last_login_ip" field.
func LastLoginIPGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldLastLoginIP, v))
}

// LastLoginIPLT applies the LT predicate on the "last_login_ip" field.
func LastLoginIPLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldLastLoginIP, v))
}

// LastLoginIPLTE applies the LTE predicate on the "last_login_ip" field.
func LastLoginIPLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldLastLoginIP, v))
}

// LastLoginIPContains applies the Contains predicate on the "last_login_ip" field.
func LastLoginIPContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldLastLoginIP, v))
}

// LastLoginIPHasPrefix applies the HasPrefix predicate on the "last_login_ip" field.
func LastLoginIPHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldLastLoginIP, v))
}

// LastLoginIPHasSuffix applies the HasSuffix predicate on the "last_login_ip" field.
func LastLoginIPHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldLastLoginIP, v))
}

// LastLoginIPIsNil applies the IsNil predicate on the "last_login_ip" field.
func LastLoginIPIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldLastLoginIP))
}

// LastLoginIPNotNil applies the NotNil predicate on the "last_login_ip" field.
func LastLoginIPNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldLastLoginIP))
}

// LastLoginIPEqualFold applies the EqualFold predicate on the "last_login_ip" field.
func LastLoginIPEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldLastLoginIP, v))
}

// LastLoginIPContainsFold applies the ContainsFold predicate on the "last_login_ip" field.
func LastLoginIPContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldLastLoginIP, v))
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNEQ(FieldLastLoginTime, v))
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...string) predicate.SysUser {
	return predicate.SysUser(sql.FieldNotIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGT(FieldLastLoginTime, v))
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldGTE(FieldLastLoginTime, v))
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLT(FieldLastLoginTime, v))
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldLTE(FieldLastLoginTime, v))
}

// LastLoginTimeContains applies the Contains predicate on the "last_login_time" field.
func LastLoginTimeContains(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContains(FieldLastLoginTime, v))
}

// LastLoginTimeHasPrefix applies the HasPrefix predicate on the "last_login_time" field.
func LastLoginTimeHasPrefix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasPrefix(FieldLastLoginTime, v))
}

// LastLoginTimeHasSuffix applies the HasSuffix predicate on the "last_login_time" field.
func LastLoginTimeHasSuffix(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldHasSuffix(FieldLastLoginTime, v))
}

// LastLoginTimeIsNil applies the IsNil predicate on the "last_login_time" field.
func LastLoginTimeIsNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldIsNull(FieldLastLoginTime))
}

// LastLoginTimeNotNil applies the NotNil predicate on the "last_login_time" field.
func LastLoginTimeNotNil() predicate.SysUser {
	return predicate.SysUser(sql.FieldNotNull(FieldLastLoginTime))
}

// LastLoginTimeEqualFold applies the EqualFold predicate on the "last_login_time" field.
func LastLoginTimeEqualFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldEqualFold(FieldLastLoginTime, v))
}

// LastLoginTimeContainsFold applies the ContainsFold predicate on the "last_login_time" field.
func LastLoginTimeContainsFold(v string) predicate.SysUser {
	return predicate.SysUser(sql.FieldContainsFold(FieldLastLoginTime, v))
}

// HasSysDept applies the HasEdge predicate on the "sysDept" edge.
func HasSysDept() predicate.SysUser {
	return predicate.SysUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SysDeptTable, SysDeptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSysDeptWith applies the HasEdge predicate on the "sysDept" edge with a given conditions (other predicates).
func HasSysDeptWith(preds ...predicate.SysDept) predicate.SysUser {
	return predicate.SysUser(func(s *sql.Selector) {
		step := newSysDeptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSysPosts applies the HasEdge predicate on the "sysPosts" edge.
func HasSysPosts() predicate.SysUser {
	return predicate.SysUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SysPostsTable, SysPostsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSysPostsWith applies the HasEdge predicate on the "sysPosts" edge with a given conditions (other predicates).
func HasSysPostsWith(preds ...predicate.SysPost) predicate.SysUser {
	return predicate.SysUser(func(s *sql.Selector) {
		step := newSysPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSysRoles applies the HasEdge predicate on the "sysRoles" edge.
func HasSysRoles() predicate.SysUser {
	return predicate.SysUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SysRolesTable, SysRolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSysRolesWith applies the HasEdge predicate on the "sysRoles" edge with a given conditions (other predicates).
func HasSysRolesWith(preds ...predicate.SysRole) predicate.SysUser {
	return predicate.SysUser(func(s *sql.Selector) {
		step := newSysRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysUser) predicate.SysUser {
	return predicate.SysUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysUser) predicate.SysUser {
	return predicate.SysUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysUser) predicate.SysUser {
	return predicate.SysUser(sql.NotPredicates(p))
}
