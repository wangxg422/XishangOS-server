// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/syspost"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysuser"
)

// SysPostUpdate is the builder for updating SysPost entities.
type SysPostUpdate struct {
	config
	hooks    []Hook
	mutation *SysPostMutation
}

// Where appends a list predicates to the SysPostUpdate builder.
func (spu *SysPostUpdate) Where(ps ...predicate.SysPost) *SysPostUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SysPostUpdate) SetUpdatedAt(t time.Time) *SysPostUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (spu *SysPostUpdate) ClearUpdatedAt() *SysPostUpdate {
	spu.mutation.ClearUpdatedAt()
	return spu
}

// SetDeleteAt sets the "delete_at" field.
func (spu *SysPostUpdate) SetDeleteAt(t time.Time) *SysPostUpdate {
	spu.mutation.SetDeleteAt(t)
	return spu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (spu *SysPostUpdate) ClearDeleteAt() *SysPostUpdate {
	spu.mutation.ClearDeleteAt()
	return spu
}

// SetCreatedBy sets the "created_by" field.
func (spu *SysPostUpdate) SetCreatedBy(i int64) *SysPostUpdate {
	spu.mutation.ResetCreatedBy()
	spu.mutation.SetCreatedBy(i)
	return spu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableCreatedBy(i *int64) *SysPostUpdate {
	if i != nil {
		spu.SetCreatedBy(*i)
	}
	return spu
}

// AddCreatedBy adds i to the "created_by" field.
func (spu *SysPostUpdate) AddCreatedBy(i int64) *SysPostUpdate {
	spu.mutation.AddCreatedBy(i)
	return spu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (spu *SysPostUpdate) ClearCreatedBy() *SysPostUpdate {
	spu.mutation.ClearCreatedBy()
	return spu
}

// SetUpdatedBy sets the "updated_by" field.
func (spu *SysPostUpdate) SetUpdatedBy(i int64) *SysPostUpdate {
	spu.mutation.ResetUpdatedBy()
	spu.mutation.SetUpdatedBy(i)
	return spu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableUpdatedBy(i *int64) *SysPostUpdate {
	if i != nil {
		spu.SetUpdatedBy(*i)
	}
	return spu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (spu *SysPostUpdate) AddUpdatedBy(i int64) *SysPostUpdate {
	spu.mutation.AddUpdatedBy(i)
	return spu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spu *SysPostUpdate) ClearUpdatedBy() *SysPostUpdate {
	spu.mutation.ClearUpdatedBy()
	return spu
}

// SetDeleteBy sets the "delete_by" field.
func (spu *SysPostUpdate) SetDeleteBy(i int64) *SysPostUpdate {
	spu.mutation.ResetDeleteBy()
	spu.mutation.SetDeleteBy(i)
	return spu
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableDeleteBy(i *int64) *SysPostUpdate {
	if i != nil {
		spu.SetDeleteBy(*i)
	}
	return spu
}

// AddDeleteBy adds i to the "delete_by" field.
func (spu *SysPostUpdate) AddDeleteBy(i int64) *SysPostUpdate {
	spu.mutation.AddDeleteBy(i)
	return spu
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (spu *SysPostUpdate) ClearDeleteBy() *SysPostUpdate {
	spu.mutation.ClearDeleteBy()
	return spu
}

// SetRemark sets the "remark" field.
func (spu *SysPostUpdate) SetRemark(s string) *SysPostUpdate {
	spu.mutation.SetRemark(s)
	return spu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableRemark(s *string) *SysPostUpdate {
	if s != nil {
		spu.SetRemark(*s)
	}
	return spu
}

// ClearRemark clears the value of the "remark" field.
func (spu *SysPostUpdate) ClearRemark() *SysPostUpdate {
	spu.mutation.ClearRemark()
	return spu
}

// SetSort sets the "sort" field.
func (spu *SysPostUpdate) SetSort(i int) *SysPostUpdate {
	spu.mutation.ResetSort()
	spu.mutation.SetSort(i)
	return spu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillableSort(i *int) *SysPostUpdate {
	if i != nil {
		spu.SetSort(*i)
	}
	return spu
}

// AddSort adds i to the "sort" field.
func (spu *SysPostUpdate) AddSort(i int) *SysPostUpdate {
	spu.mutation.AddSort(i)
	return spu
}

// ClearSort clears the value of the "sort" field.
func (spu *SysPostUpdate) ClearSort() *SysPostUpdate {
	spu.mutation.ClearSort()
	return spu
}

// SetPostCode sets the "post_code" field.
func (spu *SysPostUpdate) SetPostCode(s string) *SysPostUpdate {
	spu.mutation.SetPostCode(s)
	return spu
}

// SetNillablePostCode sets the "post_code" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillablePostCode(s *string) *SysPostUpdate {
	if s != nil {
		spu.SetPostCode(*s)
	}
	return spu
}

// ClearPostCode clears the value of the "post_code" field.
func (spu *SysPostUpdate) ClearPostCode() *SysPostUpdate {
	spu.mutation.ClearPostCode()
	return spu
}

// SetPostName sets the "post_name" field.
func (spu *SysPostUpdate) SetPostName(s string) *SysPostUpdate {
	spu.mutation.SetPostName(s)
	return spu
}

// SetNillablePostName sets the "post_name" field if the given value is not nil.
func (spu *SysPostUpdate) SetNillablePostName(s *string) *SysPostUpdate {
	if s != nil {
		spu.SetPostName(*s)
	}
	return spu
}

// ClearPostName clears the value of the "post_name" field.
func (spu *SysPostUpdate) ClearPostName() *SysPostUpdate {
	spu.mutation.ClearPostName()
	return spu
}

// AddSysUserIDs adds the "sysUsers" edge to the SysUser entity by IDs.
func (spu *SysPostUpdate) AddSysUserIDs(ids ...int64) *SysPostUpdate {
	spu.mutation.AddSysUserIDs(ids...)
	return spu
}

// AddSysUsers adds the "sysUsers" edges to the SysUser entity.
func (spu *SysPostUpdate) AddSysUsers(s ...*SysUser) *SysPostUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddSysUserIDs(ids...)
}

// Mutation returns the SysPostMutation object of the builder.
func (spu *SysPostUpdate) Mutation() *SysPostMutation {
	return spu.mutation
}

// ClearSysUsers clears all "sysUsers" edges to the SysUser entity.
func (spu *SysPostUpdate) ClearSysUsers() *SysPostUpdate {
	spu.mutation.ClearSysUsers()
	return spu
}

// RemoveSysUserIDs removes the "sysUsers" edge to SysUser entities by IDs.
func (spu *SysPostUpdate) RemoveSysUserIDs(ids ...int64) *SysPostUpdate {
	spu.mutation.RemoveSysUserIDs(ids...)
	return spu
}

// RemoveSysUsers removes "sysUsers" edges to SysUser entities.
func (spu *SysPostUpdate) RemoveSysUsers(s ...*SysUser) *SysPostUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemoveSysUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SysPostUpdate) Save(ctx context.Context) (int, error) {
	spu.defaults()
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SysPostUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SysPostUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SysPostUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SysPostUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok && !spu.mutation.UpdatedAtCleared() {
		v := syspost.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
	if _, ok := spu.mutation.DeleteAt(); !ok && !spu.mutation.DeleteAtCleared() {
		v := syspost.UpdateDefaultDeleteAt()
		spu.mutation.SetDeleteAt(v)
	}
}

func (spu *SysPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(syspost.Table, syspost.Columns, sqlgraph.NewFieldSpec(syspost.FieldID, field.TypeInt64))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spu.mutation.CreatedAtCleared() {
		_spec.ClearField(syspost.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(syspost.FieldUpdatedAt, field.TypeTime, value)
	}
	if spu.mutation.UpdatedAtCleared() {
		_spec.ClearField(syspost.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.DeleteAt(); ok {
		_spec.SetField(syspost.FieldDeleteAt, field.TypeTime, value)
	}
	if spu.mutation.DeleteAtCleared() {
		_spec.ClearField(syspost.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := spu.mutation.CreatedBy(); ok {
		_spec.SetField(syspost.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(syspost.FieldCreatedBy, field.TypeInt64, value)
	}
	if spu.mutation.CreatedByCleared() {
		_spec.ClearField(syspost.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := spu.mutation.UpdatedBy(); ok {
		_spec.SetField(syspost.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(syspost.FieldUpdatedBy, field.TypeInt64, value)
	}
	if spu.mutation.UpdatedByCleared() {
		_spec.ClearField(syspost.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := spu.mutation.DeleteBy(); ok {
		_spec.SetField(syspost.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.AddedDeleteBy(); ok {
		_spec.AddField(syspost.FieldDeleteBy, field.TypeInt64, value)
	}
	if spu.mutation.DeleteByCleared() {
		_spec.ClearField(syspost.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := spu.mutation.Remark(); ok {
		_spec.SetField(syspost.FieldRemark, field.TypeString, value)
	}
	if spu.mutation.RemarkCleared() {
		_spec.ClearField(syspost.FieldRemark, field.TypeString)
	}
	if spu.mutation.StatusCleared() {
		_spec.ClearField(syspost.FieldStatus, field.TypeInt8)
	}
	if value, ok := spu.mutation.Sort(); ok {
		_spec.SetField(syspost.FieldSort, field.TypeInt, value)
	}
	if value, ok := spu.mutation.AddedSort(); ok {
		_spec.AddField(syspost.FieldSort, field.TypeInt, value)
	}
	if spu.mutation.SortCleared() {
		_spec.ClearField(syspost.FieldSort, field.TypeInt)
	}
	if value, ok := spu.mutation.PostCode(); ok {
		_spec.SetField(syspost.FieldPostCode, field.TypeString, value)
	}
	if spu.mutation.PostCodeCleared() {
		_spec.ClearField(syspost.FieldPostCode, field.TypeString)
	}
	if value, ok := spu.mutation.PostName(); ok {
		_spec.SetField(syspost.FieldPostName, field.TypeString, value)
	}
	if spu.mutation.PostNameCleared() {
		_spec.ClearField(syspost.FieldPostName, field.TypeString)
	}
	if spu.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.SysUsersTable,
			Columns: syspost.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedSysUsersIDs(); len(nodes) > 0 && !spu.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.SysUsersTable,
			Columns: syspost.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SysUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.SysUsersTable,
			Columns: syspost.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syspost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SysPostUpdateOne is the builder for updating a single SysPost entity.
type SysPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysPostMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SysPostUpdateOne) SetUpdatedAt(t time.Time) *SysPostUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (spuo *SysPostUpdateOne) ClearUpdatedAt() *SysPostUpdateOne {
	spuo.mutation.ClearUpdatedAt()
	return spuo
}

// SetDeleteAt sets the "delete_at" field.
func (spuo *SysPostUpdateOne) SetDeleteAt(t time.Time) *SysPostUpdateOne {
	spuo.mutation.SetDeleteAt(t)
	return spuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (spuo *SysPostUpdateOne) ClearDeleteAt() *SysPostUpdateOne {
	spuo.mutation.ClearDeleteAt()
	return spuo
}

// SetCreatedBy sets the "created_by" field.
func (spuo *SysPostUpdateOne) SetCreatedBy(i int64) *SysPostUpdateOne {
	spuo.mutation.ResetCreatedBy()
	spuo.mutation.SetCreatedBy(i)
	return spuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableCreatedBy(i *int64) *SysPostUpdateOne {
	if i != nil {
		spuo.SetCreatedBy(*i)
	}
	return spuo
}

// AddCreatedBy adds i to the "created_by" field.
func (spuo *SysPostUpdateOne) AddCreatedBy(i int64) *SysPostUpdateOne {
	spuo.mutation.AddCreatedBy(i)
	return spuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (spuo *SysPostUpdateOne) ClearCreatedBy() *SysPostUpdateOne {
	spuo.mutation.ClearCreatedBy()
	return spuo
}

// SetUpdatedBy sets the "updated_by" field.
func (spuo *SysPostUpdateOne) SetUpdatedBy(i int64) *SysPostUpdateOne {
	spuo.mutation.ResetUpdatedBy()
	spuo.mutation.SetUpdatedBy(i)
	return spuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableUpdatedBy(i *int64) *SysPostUpdateOne {
	if i != nil {
		spuo.SetUpdatedBy(*i)
	}
	return spuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (spuo *SysPostUpdateOne) AddUpdatedBy(i int64) *SysPostUpdateOne {
	spuo.mutation.AddUpdatedBy(i)
	return spuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spuo *SysPostUpdateOne) ClearUpdatedBy() *SysPostUpdateOne {
	spuo.mutation.ClearUpdatedBy()
	return spuo
}

// SetDeleteBy sets the "delete_by" field.
func (spuo *SysPostUpdateOne) SetDeleteBy(i int64) *SysPostUpdateOne {
	spuo.mutation.ResetDeleteBy()
	spuo.mutation.SetDeleteBy(i)
	return spuo
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableDeleteBy(i *int64) *SysPostUpdateOne {
	if i != nil {
		spuo.SetDeleteBy(*i)
	}
	return spuo
}

// AddDeleteBy adds i to the "delete_by" field.
func (spuo *SysPostUpdateOne) AddDeleteBy(i int64) *SysPostUpdateOne {
	spuo.mutation.AddDeleteBy(i)
	return spuo
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (spuo *SysPostUpdateOne) ClearDeleteBy() *SysPostUpdateOne {
	spuo.mutation.ClearDeleteBy()
	return spuo
}

// SetRemark sets the "remark" field.
func (spuo *SysPostUpdateOne) SetRemark(s string) *SysPostUpdateOne {
	spuo.mutation.SetRemark(s)
	return spuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableRemark(s *string) *SysPostUpdateOne {
	if s != nil {
		spuo.SetRemark(*s)
	}
	return spuo
}

// ClearRemark clears the value of the "remark" field.
func (spuo *SysPostUpdateOne) ClearRemark() *SysPostUpdateOne {
	spuo.mutation.ClearRemark()
	return spuo
}

// SetSort sets the "sort" field.
func (spuo *SysPostUpdateOne) SetSort(i int) *SysPostUpdateOne {
	spuo.mutation.ResetSort()
	spuo.mutation.SetSort(i)
	return spuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillableSort(i *int) *SysPostUpdateOne {
	if i != nil {
		spuo.SetSort(*i)
	}
	return spuo
}

// AddSort adds i to the "sort" field.
func (spuo *SysPostUpdateOne) AddSort(i int) *SysPostUpdateOne {
	spuo.mutation.AddSort(i)
	return spuo
}

// ClearSort clears the value of the "sort" field.
func (spuo *SysPostUpdateOne) ClearSort() *SysPostUpdateOne {
	spuo.mutation.ClearSort()
	return spuo
}

// SetPostCode sets the "post_code" field.
func (spuo *SysPostUpdateOne) SetPostCode(s string) *SysPostUpdateOne {
	spuo.mutation.SetPostCode(s)
	return spuo
}

// SetNillablePostCode sets the "post_code" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillablePostCode(s *string) *SysPostUpdateOne {
	if s != nil {
		spuo.SetPostCode(*s)
	}
	return spuo
}

// ClearPostCode clears the value of the "post_code" field.
func (spuo *SysPostUpdateOne) ClearPostCode() *SysPostUpdateOne {
	spuo.mutation.ClearPostCode()
	return spuo
}

// SetPostName sets the "post_name" field.
func (spuo *SysPostUpdateOne) SetPostName(s string) *SysPostUpdateOne {
	spuo.mutation.SetPostName(s)
	return spuo
}

// SetNillablePostName sets the "post_name" field if the given value is not nil.
func (spuo *SysPostUpdateOne) SetNillablePostName(s *string) *SysPostUpdateOne {
	if s != nil {
		spuo.SetPostName(*s)
	}
	return spuo
}

// ClearPostName clears the value of the "post_name" field.
func (spuo *SysPostUpdateOne) ClearPostName() *SysPostUpdateOne {
	spuo.mutation.ClearPostName()
	return spuo
}

// AddSysUserIDs adds the "sysUsers" edge to the SysUser entity by IDs.
func (spuo *SysPostUpdateOne) AddSysUserIDs(ids ...int64) *SysPostUpdateOne {
	spuo.mutation.AddSysUserIDs(ids...)
	return spuo
}

// AddSysUsers adds the "sysUsers" edges to the SysUser entity.
func (spuo *SysPostUpdateOne) AddSysUsers(s ...*SysUser) *SysPostUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddSysUserIDs(ids...)
}

// Mutation returns the SysPostMutation object of the builder.
func (spuo *SysPostUpdateOne) Mutation() *SysPostMutation {
	return spuo.mutation
}

// ClearSysUsers clears all "sysUsers" edges to the SysUser entity.
func (spuo *SysPostUpdateOne) ClearSysUsers() *SysPostUpdateOne {
	spuo.mutation.ClearSysUsers()
	return spuo
}

// RemoveSysUserIDs removes the "sysUsers" edge to SysUser entities by IDs.
func (spuo *SysPostUpdateOne) RemoveSysUserIDs(ids ...int64) *SysPostUpdateOne {
	spuo.mutation.RemoveSysUserIDs(ids...)
	return spuo
}

// RemoveSysUsers removes "sysUsers" edges to SysUser entities.
func (spuo *SysPostUpdateOne) RemoveSysUsers(s ...*SysUser) *SysPostUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemoveSysUserIDs(ids...)
}

// Where appends a list predicates to the SysPostUpdate builder.
func (spuo *SysPostUpdateOne) Where(ps ...predicate.SysPost) *SysPostUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SysPostUpdateOne) Select(field string, fields ...string) *SysPostUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SysPost entity.
func (spuo *SysPostUpdateOne) Save(ctx context.Context) (*SysPost, error) {
	spuo.defaults()
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SysPostUpdateOne) SaveX(ctx context.Context) *SysPost {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SysPostUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SysPostUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SysPostUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok && !spuo.mutation.UpdatedAtCleared() {
		v := syspost.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := spuo.mutation.DeleteAt(); !ok && !spuo.mutation.DeleteAtCleared() {
		v := syspost.UpdateDefaultDeleteAt()
		spuo.mutation.SetDeleteAt(v)
	}
}

func (spuo *SysPostUpdateOne) sqlSave(ctx context.Context) (_node *SysPost, err error) {
	_spec := sqlgraph.NewUpdateSpec(syspost.Table, syspost.Columns, sqlgraph.NewFieldSpec(syspost.FieldID, field.TypeInt64))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syspost.FieldID)
		for _, f := range fields {
			if !syspost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != syspost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spuo.mutation.CreatedAtCleared() {
		_spec.ClearField(syspost.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(syspost.FieldUpdatedAt, field.TypeTime, value)
	}
	if spuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(syspost.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.DeleteAt(); ok {
		_spec.SetField(syspost.FieldDeleteAt, field.TypeTime, value)
	}
	if spuo.mutation.DeleteAtCleared() {
		_spec.ClearField(syspost.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.CreatedBy(); ok {
		_spec.SetField(syspost.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(syspost.FieldCreatedBy, field.TypeInt64, value)
	}
	if spuo.mutation.CreatedByCleared() {
		_spec.ClearField(syspost.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := spuo.mutation.UpdatedBy(); ok {
		_spec.SetField(syspost.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(syspost.FieldUpdatedBy, field.TypeInt64, value)
	}
	if spuo.mutation.UpdatedByCleared() {
		_spec.ClearField(syspost.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := spuo.mutation.DeleteBy(); ok {
		_spec.SetField(syspost.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.AddedDeleteBy(); ok {
		_spec.AddField(syspost.FieldDeleteBy, field.TypeInt64, value)
	}
	if spuo.mutation.DeleteByCleared() {
		_spec.ClearField(syspost.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := spuo.mutation.Remark(); ok {
		_spec.SetField(syspost.FieldRemark, field.TypeString, value)
	}
	if spuo.mutation.RemarkCleared() {
		_spec.ClearField(syspost.FieldRemark, field.TypeString)
	}
	if spuo.mutation.StatusCleared() {
		_spec.ClearField(syspost.FieldStatus, field.TypeInt8)
	}
	if value, ok := spuo.mutation.Sort(); ok {
		_spec.SetField(syspost.FieldSort, field.TypeInt, value)
	}
	if value, ok := spuo.mutation.AddedSort(); ok {
		_spec.AddField(syspost.FieldSort, field.TypeInt, value)
	}
	if spuo.mutation.SortCleared() {
		_spec.ClearField(syspost.FieldSort, field.TypeInt)
	}
	if value, ok := spuo.mutation.PostCode(); ok {
		_spec.SetField(syspost.FieldPostCode, field.TypeString, value)
	}
	if spuo.mutation.PostCodeCleared() {
		_spec.ClearField(syspost.FieldPostCode, field.TypeString)
	}
	if value, ok := spuo.mutation.PostName(); ok {
		_spec.SetField(syspost.FieldPostName, field.TypeString, value)
	}
	if spuo.mutation.PostNameCleared() {
		_spec.ClearField(syspost.FieldPostName, field.TypeString)
	}
	if spuo.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.SysUsersTable,
			Columns: syspost.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedSysUsersIDs(); len(nodes) > 0 && !spuo.mutation.SysUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.SysUsersTable,
			Columns: syspost.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SysUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   syspost.SysUsersTable,
			Columns: syspost.SysUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysPost{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syspost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
