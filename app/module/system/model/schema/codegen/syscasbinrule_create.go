// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/syscasbinrule"
)

// SysCasbinRuleCreate is the builder for creating a SysCasbinRule entity.
type SysCasbinRuleCreate struct {
	config
	mutation *SysCasbinRuleMutation
	hooks    []Hook
}

// SetPtype sets the "ptype" field.
func (scrc *SysCasbinRuleCreate) SetPtype(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetPtype(s)
	return scrc
}

// SetNillablePtype sets the "ptype" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillablePtype(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetPtype(*s)
	}
	return scrc
}

// SetV0 sets the "v0" field.
func (scrc *SysCasbinRuleCreate) SetV0(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV0(s)
	return scrc
}

// SetNillableV0 sets the "v0" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV0(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV0(*s)
	}
	return scrc
}

// SetV1 sets the "v1" field.
func (scrc *SysCasbinRuleCreate) SetV1(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV1(s)
	return scrc
}

// SetNillableV1 sets the "v1" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV1(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV1(*s)
	}
	return scrc
}

// SetV2 sets the "v2" field.
func (scrc *SysCasbinRuleCreate) SetV2(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV2(s)
	return scrc
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV2(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV2(*s)
	}
	return scrc
}

// SetV3 sets the "v3" field.
func (scrc *SysCasbinRuleCreate) SetV3(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV3(s)
	return scrc
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV3(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV3(*s)
	}
	return scrc
}

// SetV4 sets the "v4" field.
func (scrc *SysCasbinRuleCreate) SetV4(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV4(s)
	return scrc
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV4(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV4(*s)
	}
	return scrc
}

// SetV5 sets the "v5" field.
func (scrc *SysCasbinRuleCreate) SetV5(s string) *SysCasbinRuleCreate {
	scrc.mutation.SetV5(s)
	return scrc
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (scrc *SysCasbinRuleCreate) SetNillableV5(s *string) *SysCasbinRuleCreate {
	if s != nil {
		scrc.SetV5(*s)
	}
	return scrc
}

// Mutation returns the SysCasbinRuleMutation object of the builder.
func (scrc *SysCasbinRuleCreate) Mutation() *SysCasbinRuleMutation {
	return scrc.mutation
}

// Save creates the SysCasbinRule in the database.
func (scrc *SysCasbinRuleCreate) Save(ctx context.Context) (*SysCasbinRule, error) {
	return withHooks(ctx, scrc.sqlSave, scrc.mutation, scrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scrc *SysCasbinRuleCreate) SaveX(ctx context.Context) *SysCasbinRule {
	v, err := scrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrc *SysCasbinRuleCreate) Exec(ctx context.Context) error {
	_, err := scrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrc *SysCasbinRuleCreate) ExecX(ctx context.Context) {
	if err := scrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrc *SysCasbinRuleCreate) check() error {
	return nil
}

func (scrc *SysCasbinRuleCreate) sqlSave(ctx context.Context) (*SysCasbinRule, error) {
	if err := scrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scrc.mutation.id = &_node.ID
	scrc.mutation.done = true
	return _node, nil
}

func (scrc *SysCasbinRuleCreate) createSpec() (*SysCasbinRule, *sqlgraph.CreateSpec) {
	var (
		_node = &SysCasbinRule{config: scrc.config}
		_spec = sqlgraph.NewCreateSpec(syscasbinrule.Table, sqlgraph.NewFieldSpec(syscasbinrule.FieldID, field.TypeInt))
	)
	if value, ok := scrc.mutation.Ptype(); ok {
		_spec.SetField(syscasbinrule.FieldPtype, field.TypeString, value)
		_node.Ptype = value
	}
	if value, ok := scrc.mutation.V0(); ok {
		_spec.SetField(syscasbinrule.FieldV0, field.TypeString, value)
		_node.V0 = value
	}
	if value, ok := scrc.mutation.V1(); ok {
		_spec.SetField(syscasbinrule.FieldV1, field.TypeString, value)
		_node.V1 = value
	}
	if value, ok := scrc.mutation.V2(); ok {
		_spec.SetField(syscasbinrule.FieldV2, field.TypeString, value)
		_node.V2 = value
	}
	if value, ok := scrc.mutation.V3(); ok {
		_spec.SetField(syscasbinrule.FieldV3, field.TypeString, value)
		_node.V3 = value
	}
	if value, ok := scrc.mutation.V4(); ok {
		_spec.SetField(syscasbinrule.FieldV4, field.TypeString, value)
		_node.V4 = value
	}
	if value, ok := scrc.mutation.V5(); ok {
		_spec.SetField(syscasbinrule.FieldV5, field.TypeString, value)
		_node.V5 = value
	}
	return _node, _spec
}

// SysCasbinRuleCreateBulk is the builder for creating many SysCasbinRule entities in bulk.
type SysCasbinRuleCreateBulk struct {
	config
	err      error
	builders []*SysCasbinRuleCreate
}

// Save creates the SysCasbinRule entities in the database.
func (scrcb *SysCasbinRuleCreateBulk) Save(ctx context.Context) ([]*SysCasbinRule, error) {
	if scrcb.err != nil {
		return nil, scrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scrcb.builders))
	nodes := make([]*SysCasbinRule, len(scrcb.builders))
	mutators := make([]Mutator, len(scrcb.builders))
	for i := range scrcb.builders {
		func(i int, root context.Context) {
			builder := scrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysCasbinRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scrcb *SysCasbinRuleCreateBulk) SaveX(ctx context.Context) []*SysCasbinRule {
	v, err := scrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrcb *SysCasbinRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := scrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcb *SysCasbinRuleCreateBulk) ExecX(ctx context.Context) {
	if err := scrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
