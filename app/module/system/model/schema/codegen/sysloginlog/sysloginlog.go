// Code generated by ent, DO NOT EDIT.

package sysloginlog

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the sysloginlog type in the database.
	Label = "sys_login_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLoginName holds the string denoting the login_name field in the database.
	FieldLoginName = "login_name"
	// FieldIPAddr holds the string denoting the ip_addr field in the database.
	FieldIPAddr = "ip_addr"
	// FieldLoginLocation holds the string denoting the login_location field in the database.
	FieldLoginLocation = "login_location"
	// FieldBrowser holds the string denoting the browser field in the database.
	FieldBrowser = "browser"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldMsg holds the string denoting the msg field in the database.
	FieldMsg = "msg"
	// FieldLoginTime holds the string denoting the login_time field in the database.
	FieldLoginTime = "login_time"
	// FieldModule holds the string denoting the module field in the database.
	FieldModule = "module"
	// Table holds the table name of the sysloginlog in the database.
	Table = "sys_login_log"
)

// Columns holds all SQL columns for sysloginlog fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldLoginName,
	FieldIPAddr,
	FieldLoginLocation,
	FieldBrowser,
	FieldOs,
	FieldMsg,
	FieldLoginTime,
	FieldModule,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int8
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the SysLoginLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLoginName orders the results by the login_name field.
func ByLoginName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginName, opts...).ToFunc()
}

// ByIPAddr orders the results by the ip_addr field.
func ByIPAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddr, opts...).ToFunc()
}

// ByLoginLocation orders the results by the login_location field.
func ByLoginLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginLocation, opts...).ToFunc()
}

// ByBrowser orders the results by the browser field.
func ByBrowser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowser, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByMsg orders the results by the msg field.
func ByMsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsg, opts...).ToFunc()
}

// ByLoginTime orders the results by the login_time field.
func ByLoginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginTime, opts...).ToFunc()
}

// ByModule orders the results by the module field.
func ByModule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModule, opts...).ToFunc()
}
