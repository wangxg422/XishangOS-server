// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysmenu"
)

// SysMenuCreate is the builder for creating a SysMenu entity.
type SysMenuCreate struct {
	config
	mutation *SysMenuMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (smc *SysMenuCreate) SetCreatedAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetCreatedAt(t)
	return smc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableCreatedAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetCreatedAt(*t)
	}
	return smc
}

// SetUpdatedAt sets the "updated_at" field.
func (smc *SysMenuCreate) SetUpdatedAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetUpdatedAt(t)
	return smc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableUpdatedAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetUpdatedAt(*t)
	}
	return smc
}

// SetDeleteAt sets the "delete_at" field.
func (smc *SysMenuCreate) SetDeleteAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetDeleteAt(t)
	return smc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableDeleteAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetDeleteAt(*t)
	}
	return smc
}

// SetRemark sets the "remark" field.
func (smc *SysMenuCreate) SetRemark(i int8) *SysMenuCreate {
	smc.mutation.SetRemark(i)
	return smc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableRemark(i *int8) *SysMenuCreate {
	if i != nil {
		smc.SetRemark(*i)
	}
	return smc
}

// SetPid sets the "pid" field.
func (smc *SysMenuCreate) SetPid(i int64) *SysMenuCreate {
	smc.mutation.SetPid(i)
	return smc
}

// SetName sets the "name" field.
func (smc *SysMenuCreate) SetName(s string) *SysMenuCreate {
	smc.mutation.SetName(s)
	return smc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableName(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetName(*s)
	}
	return smc
}

// SetTitle sets the "title" field.
func (smc *SysMenuCreate) SetTitle(s string) *SysMenuCreate {
	smc.mutation.SetTitle(s)
	return smc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableTitle(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetTitle(*s)
	}
	return smc
}

// SetIcon sets the "icon" field.
func (smc *SysMenuCreate) SetIcon(s string) *SysMenuCreate {
	smc.mutation.SetIcon(s)
	return smc
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIcon(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetIcon(*s)
	}
	return smc
}

// SetCondition sets the "condition" field.
func (smc *SysMenuCreate) SetCondition(s string) *SysMenuCreate {
	smc.mutation.SetCondition(s)
	return smc
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableCondition(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetCondition(*s)
	}
	return smc
}

// SetMenuType sets the "menu_type" field.
func (smc *SysMenuCreate) SetMenuType(i int8) *SysMenuCreate {
	smc.mutation.SetMenuType(i)
	return smc
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableMenuType(i *int8) *SysMenuCreate {
	if i != nil {
		smc.SetMenuType(*i)
	}
	return smc
}

// SetWeigh sets the "weigh" field.
func (smc *SysMenuCreate) SetWeigh(i int64) *SysMenuCreate {
	smc.mutation.SetWeigh(i)
	return smc
}

// SetNillableWeigh sets the "weigh" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableWeigh(i *int64) *SysMenuCreate {
	if i != nil {
		smc.SetWeigh(*i)
	}
	return smc
}

// SetIsHide sets the "is_hide" field.
func (smc *SysMenuCreate) SetIsHide(i int8) *SysMenuCreate {
	smc.mutation.SetIsHide(i)
	return smc
}

// SetNillableIsHide sets the "is_hide" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsHide(i *int8) *SysMenuCreate {
	if i != nil {
		smc.SetIsHide(*i)
	}
	return smc
}

// SetPath sets the "path" field.
func (smc *SysMenuCreate) SetPath(s string) *SysMenuCreate {
	smc.mutation.SetPath(s)
	return smc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillablePath(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetPath(*s)
	}
	return smc
}

// SetComponent sets the "component" field.
func (smc *SysMenuCreate) SetComponent(s string) *SysMenuCreate {
	smc.mutation.SetComponent(s)
	return smc
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableComponent(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetComponent(*s)
	}
	return smc
}

// SetIsLink sets the "is_link" field.
func (smc *SysMenuCreate) SetIsLink(i int8) *SysMenuCreate {
	smc.mutation.SetIsLink(i)
	return smc
}

// SetNillableIsLink sets the "is_link" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsLink(i *int8) *SysMenuCreate {
	if i != nil {
		smc.SetIsLink(*i)
	}
	return smc
}

// SetModuleType sets the "module_type" field.
func (smc *SysMenuCreate) SetModuleType(s string) *SysMenuCreate {
	smc.mutation.SetModuleType(s)
	return smc
}

// SetNillableModuleType sets the "module_type" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableModuleType(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetModuleType(*s)
	}
	return smc
}

// SetModelID sets the "model_id" field.
func (smc *SysMenuCreate) SetModelID(i int64) *SysMenuCreate {
	smc.mutation.SetModelID(i)
	return smc
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableModelID(i *int64) *SysMenuCreate {
	if i != nil {
		smc.SetModelID(*i)
	}
	return smc
}

// SetIsIframe sets the "is_iframe" field.
func (smc *SysMenuCreate) SetIsIframe(i int8) *SysMenuCreate {
	smc.mutation.SetIsIframe(i)
	return smc
}

// SetNillableIsIframe sets the "is_iframe" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsIframe(i *int8) *SysMenuCreate {
	if i != nil {
		smc.SetIsIframe(*i)
	}
	return smc
}

// SetIsCached sets the "is_cached" field.
func (smc *SysMenuCreate) SetIsCached(i int8) *SysMenuCreate {
	smc.mutation.SetIsCached(i)
	return smc
}

// SetNillableIsCached sets the "is_cached" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsCached(i *int8) *SysMenuCreate {
	if i != nil {
		smc.SetIsCached(*i)
	}
	return smc
}

// SetRedirect sets the "redirect" field.
func (smc *SysMenuCreate) SetRedirect(s string) *SysMenuCreate {
	smc.mutation.SetRedirect(s)
	return smc
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableRedirect(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetRedirect(*s)
	}
	return smc
}

// SetIsAffix sets the "is_affix" field.
func (smc *SysMenuCreate) SetIsAffix(i int8) *SysMenuCreate {
	smc.mutation.SetIsAffix(i)
	return smc
}

// SetNillableIsAffix sets the "is_affix" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsAffix(i *int8) *SysMenuCreate {
	if i != nil {
		smc.SetIsAffix(*i)
	}
	return smc
}

// SetLinkURL sets the "link_url" field.
func (smc *SysMenuCreate) SetLinkURL(s string) *SysMenuCreate {
	smc.mutation.SetLinkURL(s)
	return smc
}

// SetNillableLinkURL sets the "link_url" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableLinkURL(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetLinkURL(*s)
	}
	return smc
}

// SetID sets the "id" field.
func (smc *SysMenuCreate) SetID(i int64) *SysMenuCreate {
	smc.mutation.SetID(i)
	return smc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableID(i *int64) *SysMenuCreate {
	if i != nil {
		smc.SetID(*i)
	}
	return smc
}

// Mutation returns the SysMenuMutation object of the builder.
func (smc *SysMenuCreate) Mutation() *SysMenuMutation {
	return smc.mutation
}

// Save creates the SysMenu in the database.
func (smc *SysMenuCreate) Save(ctx context.Context) (*SysMenu, error) {
	smc.defaults()
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SysMenuCreate) SaveX(ctx context.Context) *SysMenu {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SysMenuCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SysMenuCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *SysMenuCreate) defaults() {
	if _, ok := smc.mutation.CreatedAt(); !ok {
		v := sysmenu.DefaultCreatedAt()
		smc.mutation.SetCreatedAt(v)
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		v := sysmenu.DefaultUpdatedAt()
		smc.mutation.SetUpdatedAt(v)
	}
	if _, ok := smc.mutation.DeleteAt(); !ok {
		v := sysmenu.DefaultDeleteAt()
		smc.mutation.SetDeleteAt(v)
	}
	if _, ok := smc.mutation.ID(); !ok {
		v := sysmenu.DefaultID()
		smc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SysMenuCreate) check() error {
	if _, ok := smc.mutation.Pid(); !ok {
		return &ValidationError{Name: "pid", err: errors.New(`codegen: missing required field "SysMenu.pid"`)}
	}
	return nil
}

func (smc *SysMenuCreate) sqlSave(ctx context.Context) (*SysMenu, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *SysMenuCreate) createSpec() (*SysMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &SysMenu{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(sysmenu.Table, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeInt64))
	)
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := smc.mutation.CreatedAt(); ok {
		_spec.SetField(sysmenu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := smc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysmenu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := smc.mutation.DeleteAt(); ok {
		_spec.SetField(sysmenu.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := smc.mutation.Remark(); ok {
		_spec.SetField(sysmenu.FieldRemark, field.TypeInt8, value)
		_node.Remark = value
	}
	if value, ok := smc.mutation.Pid(); ok {
		_spec.SetField(sysmenu.FieldPid, field.TypeInt64, value)
		_node.Pid = value
	}
	if value, ok := smc.mutation.Name(); ok {
		_spec.SetField(sysmenu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := smc.mutation.Title(); ok {
		_spec.SetField(sysmenu.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := smc.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := smc.mutation.Condition(); ok {
		_spec.SetField(sysmenu.FieldCondition, field.TypeString, value)
		_node.Condition = value
	}
	if value, ok := smc.mutation.MenuType(); ok {
		_spec.SetField(sysmenu.FieldMenuType, field.TypeInt8, value)
		_node.MenuType = value
	}
	if value, ok := smc.mutation.Weigh(); ok {
		_spec.SetField(sysmenu.FieldWeigh, field.TypeInt64, value)
		_node.Weigh = value
	}
	if value, ok := smc.mutation.IsHide(); ok {
		_spec.SetField(sysmenu.FieldIsHide, field.TypeInt8, value)
		_node.IsHide = value
	}
	if value, ok := smc.mutation.Path(); ok {
		_spec.SetField(sysmenu.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := smc.mutation.Component(); ok {
		_spec.SetField(sysmenu.FieldComponent, field.TypeString, value)
		_node.Component = value
	}
	if value, ok := smc.mutation.IsLink(); ok {
		_spec.SetField(sysmenu.FieldIsLink, field.TypeInt8, value)
		_node.IsLink = value
	}
	if value, ok := smc.mutation.ModuleType(); ok {
		_spec.SetField(sysmenu.FieldModuleType, field.TypeString, value)
		_node.ModuleType = value
	}
	if value, ok := smc.mutation.ModelID(); ok {
		_spec.SetField(sysmenu.FieldModelID, field.TypeInt64, value)
		_node.ModelID = value
	}
	if value, ok := smc.mutation.IsIframe(); ok {
		_spec.SetField(sysmenu.FieldIsIframe, field.TypeInt8, value)
		_node.IsIframe = value
	}
	if value, ok := smc.mutation.IsCached(); ok {
		_spec.SetField(sysmenu.FieldIsCached, field.TypeInt8, value)
		_node.IsCached = value
	}
	if value, ok := smc.mutation.Redirect(); ok {
		_spec.SetField(sysmenu.FieldRedirect, field.TypeString, value)
		_node.Redirect = value
	}
	if value, ok := smc.mutation.IsAffix(); ok {
		_spec.SetField(sysmenu.FieldIsAffix, field.TypeInt8, value)
		_node.IsAffix = value
	}
	if value, ok := smc.mutation.LinkURL(); ok {
		_spec.SetField(sysmenu.FieldLinkURL, field.TypeString, value)
		_node.LinkURL = value
	}
	return _node, _spec
}

// SysMenuCreateBulk is the builder for creating many SysMenu entities in bulk.
type SysMenuCreateBulk struct {
	config
	err      error
	builders []*SysMenuCreate
}

// Save creates the SysMenu entities in the database.
func (smcb *SysMenuCreateBulk) Save(ctx context.Context) ([]*SysMenu, error) {
	if smcb.err != nil {
		return nil, smcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SysMenu, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) SaveX(ctx context.Context) []*SysMenu {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SysMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
