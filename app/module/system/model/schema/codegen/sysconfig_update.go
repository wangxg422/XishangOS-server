// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysconfig"
)

// SysConfigUpdate is the builder for updating SysConfig entities.
type SysConfigUpdate struct {
	config
	hooks    []Hook
	mutation *SysConfigMutation
}

// Where appends a list predicates to the SysConfigUpdate builder.
func (scu *SysConfigUpdate) Where(ps ...predicate.SysConfig) *SysConfigUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *SysConfigUpdate) SetUpdatedAt(t time.Time) *SysConfigUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scu *SysConfigUpdate) ClearUpdatedAt() *SysConfigUpdate {
	scu.mutation.ClearUpdatedAt()
	return scu
}

// SetDeleteAt sets the "delete_at" field.
func (scu *SysConfigUpdate) SetDeleteAt(t time.Time) *SysConfigUpdate {
	scu.mutation.SetDeleteAt(t)
	return scu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (scu *SysConfigUpdate) ClearDeleteAt() *SysConfigUpdate {
	scu.mutation.ClearDeleteAt()
	return scu
}

// SetCreatedBy sets the "created_by" field.
func (scu *SysConfigUpdate) SetCreatedBy(i int64) *SysConfigUpdate {
	scu.mutation.ResetCreatedBy()
	scu.mutation.SetCreatedBy(i)
	return scu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableCreatedBy(i *int64) *SysConfigUpdate {
	if i != nil {
		scu.SetCreatedBy(*i)
	}
	return scu
}

// AddCreatedBy adds i to the "created_by" field.
func (scu *SysConfigUpdate) AddCreatedBy(i int64) *SysConfigUpdate {
	scu.mutation.AddCreatedBy(i)
	return scu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (scu *SysConfigUpdate) ClearCreatedBy() *SysConfigUpdate {
	scu.mutation.ClearCreatedBy()
	return scu
}

// SetUpdatedBy sets the "updated_by" field.
func (scu *SysConfigUpdate) SetUpdatedBy(i int64) *SysConfigUpdate {
	scu.mutation.ResetUpdatedBy()
	scu.mutation.SetUpdatedBy(i)
	return scu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableUpdatedBy(i *int64) *SysConfigUpdate {
	if i != nil {
		scu.SetUpdatedBy(*i)
	}
	return scu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (scu *SysConfigUpdate) AddUpdatedBy(i int64) *SysConfigUpdate {
	scu.mutation.AddUpdatedBy(i)
	return scu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (scu *SysConfigUpdate) ClearUpdatedBy() *SysConfigUpdate {
	scu.mutation.ClearUpdatedBy()
	return scu
}

// SetDeleteBy sets the "delete_by" field.
func (scu *SysConfigUpdate) SetDeleteBy(i int64) *SysConfigUpdate {
	scu.mutation.ResetDeleteBy()
	scu.mutation.SetDeleteBy(i)
	return scu
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableDeleteBy(i *int64) *SysConfigUpdate {
	if i != nil {
		scu.SetDeleteBy(*i)
	}
	return scu
}

// AddDeleteBy adds i to the "delete_by" field.
func (scu *SysConfigUpdate) AddDeleteBy(i int64) *SysConfigUpdate {
	scu.mutation.AddDeleteBy(i)
	return scu
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (scu *SysConfigUpdate) ClearDeleteBy() *SysConfigUpdate {
	scu.mutation.ClearDeleteBy()
	return scu
}

// SetRemark sets the "remark" field.
func (scu *SysConfigUpdate) SetRemark(s string) *SysConfigUpdate {
	scu.mutation.SetRemark(s)
	return scu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableRemark(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetRemark(*s)
	}
	return scu
}

// ClearRemark clears the value of the "remark" field.
func (scu *SysConfigUpdate) ClearRemark() *SysConfigUpdate {
	scu.mutation.ClearRemark()
	return scu
}

// SetDelFlag sets the "del_flag" field.
func (scu *SysConfigUpdate) SetDelFlag(i int8) *SysConfigUpdate {
	scu.mutation.ResetDelFlag()
	scu.mutation.SetDelFlag(i)
	return scu
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableDelFlag(i *int8) *SysConfigUpdate {
	if i != nil {
		scu.SetDelFlag(*i)
	}
	return scu
}

// AddDelFlag adds i to the "del_flag" field.
func (scu *SysConfigUpdate) AddDelFlag(i int8) *SysConfigUpdate {
	scu.mutation.AddDelFlag(i)
	return scu
}

// ClearDelFlag clears the value of the "del_flag" field.
func (scu *SysConfigUpdate) ClearDelFlag() *SysConfigUpdate {
	scu.mutation.ClearDelFlag()
	return scu
}

// SetConfigName sets the "config_name" field.
func (scu *SysConfigUpdate) SetConfigName(s string) *SysConfigUpdate {
	scu.mutation.SetConfigName(s)
	return scu
}

// SetNillableConfigName sets the "config_name" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableConfigName(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetConfigName(*s)
	}
	return scu
}

// ClearConfigName clears the value of the "config_name" field.
func (scu *SysConfigUpdate) ClearConfigName() *SysConfigUpdate {
	scu.mutation.ClearConfigName()
	return scu
}

// SetConfigKey sets the "config_key" field.
func (scu *SysConfigUpdate) SetConfigKey(s string) *SysConfigUpdate {
	scu.mutation.SetConfigKey(s)
	return scu
}

// SetNillableConfigKey sets the "config_key" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableConfigKey(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetConfigKey(*s)
	}
	return scu
}

// ClearConfigKey clears the value of the "config_key" field.
func (scu *SysConfigUpdate) ClearConfigKey() *SysConfigUpdate {
	scu.mutation.ClearConfigKey()
	return scu
}

// SetConfigValue sets the "config_value" field.
func (scu *SysConfigUpdate) SetConfigValue(s string) *SysConfigUpdate {
	scu.mutation.SetConfigValue(s)
	return scu
}

// SetNillableConfigValue sets the "config_value" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableConfigValue(s *string) *SysConfigUpdate {
	if s != nil {
		scu.SetConfigValue(*s)
	}
	return scu
}

// ClearConfigValue clears the value of the "config_value" field.
func (scu *SysConfigUpdate) ClearConfigValue() *SysConfigUpdate {
	scu.mutation.ClearConfigValue()
	return scu
}

// SetConfigType sets the "config_type" field.
func (scu *SysConfigUpdate) SetConfigType(i int8) *SysConfigUpdate {
	scu.mutation.ResetConfigType()
	scu.mutation.SetConfigType(i)
	return scu
}

// SetNillableConfigType sets the "config_type" field if the given value is not nil.
func (scu *SysConfigUpdate) SetNillableConfigType(i *int8) *SysConfigUpdate {
	if i != nil {
		scu.SetConfigType(*i)
	}
	return scu
}

// AddConfigType adds i to the "config_type" field.
func (scu *SysConfigUpdate) AddConfigType(i int8) *SysConfigUpdate {
	scu.mutation.AddConfigType(i)
	return scu
}

// ClearConfigType clears the value of the "config_type" field.
func (scu *SysConfigUpdate) ClearConfigType() *SysConfigUpdate {
	scu.mutation.ClearConfigType()
	return scu
}

// Mutation returns the SysConfigMutation object of the builder.
func (scu *SysConfigUpdate) Mutation() *SysConfigMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SysConfigUpdate) Save(ctx context.Context) (int, error) {
	if err := scu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SysConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SysConfigUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SysConfigUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SysConfigUpdate) defaults() error {
	if _, ok := scu.mutation.UpdatedAt(); !ok && !scu.mutation.UpdatedAtCleared() {
		if sysconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysconfig.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysconfig.UpdateDefaultUpdatedAt()
		scu.mutation.SetUpdatedAt(v)
	}
	if _, ok := scu.mutation.DeleteAt(); !ok && !scu.mutation.DeleteAtCleared() {
		if sysconfig.UpdateDefaultDeleteAt == nil {
			return fmt.Errorf("codegen: uninitialized sysconfig.UpdateDefaultDeleteAt (forgotten import codegen/runtime?)")
		}
		v := sysconfig.UpdateDefaultDeleteAt()
		scu.mutation.SetDeleteAt(v)
	}
	return nil
}

func (scu *SysConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysconfig.Table, sysconfig.Columns, sqlgraph.NewFieldSpec(sysconfig.FieldID, field.TypeInt64))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if scu.mutation.CreatedAtCleared() {
		_spec.ClearField(sysconfig.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if scu.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysconfig.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := scu.mutation.DeleteAt(); ok {
		_spec.SetField(sysconfig.FieldDeleteAt, field.TypeTime, value)
	}
	if scu.mutation.DeleteAtCleared() {
		_spec.ClearField(sysconfig.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := scu.mutation.CreatedBy(); ok {
		_spec.SetField(sysconfig.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysconfig.FieldCreatedBy, field.TypeInt64, value)
	}
	if scu.mutation.CreatedByCleared() {
		_spec.ClearField(sysconfig.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := scu.mutation.UpdatedBy(); ok {
		_spec.SetField(sysconfig.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysconfig.FieldUpdatedBy, field.TypeInt64, value)
	}
	if scu.mutation.UpdatedByCleared() {
		_spec.ClearField(sysconfig.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := scu.mutation.DeleteBy(); ok {
		_spec.SetField(sysconfig.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := scu.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysconfig.FieldDeleteBy, field.TypeInt64, value)
	}
	if scu.mutation.DeleteByCleared() {
		_spec.ClearField(sysconfig.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := scu.mutation.Remark(); ok {
		_spec.SetField(sysconfig.FieldRemark, field.TypeString, value)
	}
	if scu.mutation.RemarkCleared() {
		_spec.ClearField(sysconfig.FieldRemark, field.TypeString)
	}
	if scu.mutation.StatusCleared() {
		_spec.ClearField(sysconfig.FieldStatus, field.TypeInt8)
	}
	if value, ok := scu.mutation.DelFlag(); ok {
		_spec.SetField(sysconfig.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := scu.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysconfig.FieldDelFlag, field.TypeInt8, value)
	}
	if scu.mutation.DelFlagCleared() {
		_spec.ClearField(sysconfig.FieldDelFlag, field.TypeInt8)
	}
	if value, ok := scu.mutation.ConfigName(); ok {
		_spec.SetField(sysconfig.FieldConfigName, field.TypeString, value)
	}
	if scu.mutation.ConfigNameCleared() {
		_spec.ClearField(sysconfig.FieldConfigName, field.TypeString)
	}
	if value, ok := scu.mutation.ConfigKey(); ok {
		_spec.SetField(sysconfig.FieldConfigKey, field.TypeString, value)
	}
	if scu.mutation.ConfigKeyCleared() {
		_spec.ClearField(sysconfig.FieldConfigKey, field.TypeString)
	}
	if value, ok := scu.mutation.ConfigValue(); ok {
		_spec.SetField(sysconfig.FieldConfigValue, field.TypeString, value)
	}
	if scu.mutation.ConfigValueCleared() {
		_spec.ClearField(sysconfig.FieldConfigValue, field.TypeString)
	}
	if value, ok := scu.mutation.ConfigType(); ok {
		_spec.SetField(sysconfig.FieldConfigType, field.TypeInt8, value)
	}
	if value, ok := scu.mutation.AddedConfigType(); ok {
		_spec.AddField(sysconfig.FieldConfigType, field.TypeInt8, value)
	}
	if scu.mutation.ConfigTypeCleared() {
		_spec.ClearField(sysconfig.FieldConfigType, field.TypeInt8)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// SysConfigUpdateOne is the builder for updating a single SysConfig entity.
type SysConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysConfigMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *SysConfigUpdateOne) SetUpdatedAt(t time.Time) *SysConfigUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scuo *SysConfigUpdateOne) ClearUpdatedAt() *SysConfigUpdateOne {
	scuo.mutation.ClearUpdatedAt()
	return scuo
}

// SetDeleteAt sets the "delete_at" field.
func (scuo *SysConfigUpdateOne) SetDeleteAt(t time.Time) *SysConfigUpdateOne {
	scuo.mutation.SetDeleteAt(t)
	return scuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (scuo *SysConfigUpdateOne) ClearDeleteAt() *SysConfigUpdateOne {
	scuo.mutation.ClearDeleteAt()
	return scuo
}

// SetCreatedBy sets the "created_by" field.
func (scuo *SysConfigUpdateOne) SetCreatedBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.ResetCreatedBy()
	scuo.mutation.SetCreatedBy(i)
	return scuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableCreatedBy(i *int64) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetCreatedBy(*i)
	}
	return scuo
}

// AddCreatedBy adds i to the "created_by" field.
func (scuo *SysConfigUpdateOne) AddCreatedBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.AddCreatedBy(i)
	return scuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (scuo *SysConfigUpdateOne) ClearCreatedBy() *SysConfigUpdateOne {
	scuo.mutation.ClearCreatedBy()
	return scuo
}

// SetUpdatedBy sets the "updated_by" field.
func (scuo *SysConfigUpdateOne) SetUpdatedBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.ResetUpdatedBy()
	scuo.mutation.SetUpdatedBy(i)
	return scuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableUpdatedBy(i *int64) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetUpdatedBy(*i)
	}
	return scuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (scuo *SysConfigUpdateOne) AddUpdatedBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.AddUpdatedBy(i)
	return scuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (scuo *SysConfigUpdateOne) ClearUpdatedBy() *SysConfigUpdateOne {
	scuo.mutation.ClearUpdatedBy()
	return scuo
}

// SetDeleteBy sets the "delete_by" field.
func (scuo *SysConfigUpdateOne) SetDeleteBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.ResetDeleteBy()
	scuo.mutation.SetDeleteBy(i)
	return scuo
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableDeleteBy(i *int64) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetDeleteBy(*i)
	}
	return scuo
}

// AddDeleteBy adds i to the "delete_by" field.
func (scuo *SysConfigUpdateOne) AddDeleteBy(i int64) *SysConfigUpdateOne {
	scuo.mutation.AddDeleteBy(i)
	return scuo
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (scuo *SysConfigUpdateOne) ClearDeleteBy() *SysConfigUpdateOne {
	scuo.mutation.ClearDeleteBy()
	return scuo
}

// SetRemark sets the "remark" field.
func (scuo *SysConfigUpdateOne) SetRemark(s string) *SysConfigUpdateOne {
	scuo.mutation.SetRemark(s)
	return scuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableRemark(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetRemark(*s)
	}
	return scuo
}

// ClearRemark clears the value of the "remark" field.
func (scuo *SysConfigUpdateOne) ClearRemark() *SysConfigUpdateOne {
	scuo.mutation.ClearRemark()
	return scuo
}

// SetDelFlag sets the "del_flag" field.
func (scuo *SysConfigUpdateOne) SetDelFlag(i int8) *SysConfigUpdateOne {
	scuo.mutation.ResetDelFlag()
	scuo.mutation.SetDelFlag(i)
	return scuo
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableDelFlag(i *int8) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetDelFlag(*i)
	}
	return scuo
}

// AddDelFlag adds i to the "del_flag" field.
func (scuo *SysConfigUpdateOne) AddDelFlag(i int8) *SysConfigUpdateOne {
	scuo.mutation.AddDelFlag(i)
	return scuo
}

// ClearDelFlag clears the value of the "del_flag" field.
func (scuo *SysConfigUpdateOne) ClearDelFlag() *SysConfigUpdateOne {
	scuo.mutation.ClearDelFlag()
	return scuo
}

// SetConfigName sets the "config_name" field.
func (scuo *SysConfigUpdateOne) SetConfigName(s string) *SysConfigUpdateOne {
	scuo.mutation.SetConfigName(s)
	return scuo
}

// SetNillableConfigName sets the "config_name" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableConfigName(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetConfigName(*s)
	}
	return scuo
}

// ClearConfigName clears the value of the "config_name" field.
func (scuo *SysConfigUpdateOne) ClearConfigName() *SysConfigUpdateOne {
	scuo.mutation.ClearConfigName()
	return scuo
}

// SetConfigKey sets the "config_key" field.
func (scuo *SysConfigUpdateOne) SetConfigKey(s string) *SysConfigUpdateOne {
	scuo.mutation.SetConfigKey(s)
	return scuo
}

// SetNillableConfigKey sets the "config_key" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableConfigKey(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetConfigKey(*s)
	}
	return scuo
}

// ClearConfigKey clears the value of the "config_key" field.
func (scuo *SysConfigUpdateOne) ClearConfigKey() *SysConfigUpdateOne {
	scuo.mutation.ClearConfigKey()
	return scuo
}

// SetConfigValue sets the "config_value" field.
func (scuo *SysConfigUpdateOne) SetConfigValue(s string) *SysConfigUpdateOne {
	scuo.mutation.SetConfigValue(s)
	return scuo
}

// SetNillableConfigValue sets the "config_value" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableConfigValue(s *string) *SysConfigUpdateOne {
	if s != nil {
		scuo.SetConfigValue(*s)
	}
	return scuo
}

// ClearConfigValue clears the value of the "config_value" field.
func (scuo *SysConfigUpdateOne) ClearConfigValue() *SysConfigUpdateOne {
	scuo.mutation.ClearConfigValue()
	return scuo
}

// SetConfigType sets the "config_type" field.
func (scuo *SysConfigUpdateOne) SetConfigType(i int8) *SysConfigUpdateOne {
	scuo.mutation.ResetConfigType()
	scuo.mutation.SetConfigType(i)
	return scuo
}

// SetNillableConfigType sets the "config_type" field if the given value is not nil.
func (scuo *SysConfigUpdateOne) SetNillableConfigType(i *int8) *SysConfigUpdateOne {
	if i != nil {
		scuo.SetConfigType(*i)
	}
	return scuo
}

// AddConfigType adds i to the "config_type" field.
func (scuo *SysConfigUpdateOne) AddConfigType(i int8) *SysConfigUpdateOne {
	scuo.mutation.AddConfigType(i)
	return scuo
}

// ClearConfigType clears the value of the "config_type" field.
func (scuo *SysConfigUpdateOne) ClearConfigType() *SysConfigUpdateOne {
	scuo.mutation.ClearConfigType()
	return scuo
}

// Mutation returns the SysConfigMutation object of the builder.
func (scuo *SysConfigUpdateOne) Mutation() *SysConfigMutation {
	return scuo.mutation
}

// Where appends a list predicates to the SysConfigUpdate builder.
func (scuo *SysConfigUpdateOne) Where(ps ...predicate.SysConfig) *SysConfigUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SysConfigUpdateOne) Select(field string, fields ...string) *SysConfigUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SysConfig entity.
func (scuo *SysConfigUpdateOne) Save(ctx context.Context) (*SysConfig, error) {
	if err := scuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SysConfigUpdateOne) SaveX(ctx context.Context) *SysConfig {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SysConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SysConfigUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SysConfigUpdateOne) defaults() error {
	if _, ok := scuo.mutation.UpdatedAt(); !ok && !scuo.mutation.UpdatedAtCleared() {
		if sysconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysconfig.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysconfig.UpdateDefaultUpdatedAt()
		scuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := scuo.mutation.DeleteAt(); !ok && !scuo.mutation.DeleteAtCleared() {
		if sysconfig.UpdateDefaultDeleteAt == nil {
			return fmt.Errorf("codegen: uninitialized sysconfig.UpdateDefaultDeleteAt (forgotten import codegen/runtime?)")
		}
		v := sysconfig.UpdateDefaultDeleteAt()
		scuo.mutation.SetDeleteAt(v)
	}
	return nil
}

func (scuo *SysConfigUpdateOne) sqlSave(ctx context.Context) (_node *SysConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysconfig.Table, sysconfig.Columns, sqlgraph.NewFieldSpec(sysconfig.FieldID, field.TypeInt64))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysconfig.FieldID)
		for _, f := range fields {
			if !sysconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if scuo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysconfig.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if scuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysconfig.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := scuo.mutation.DeleteAt(); ok {
		_spec.SetField(sysconfig.FieldDeleteAt, field.TypeTime, value)
	}
	if scuo.mutation.DeleteAtCleared() {
		_spec.ClearField(sysconfig.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := scuo.mutation.CreatedBy(); ok {
		_spec.SetField(sysconfig.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysconfig.FieldCreatedBy, field.TypeInt64, value)
	}
	if scuo.mutation.CreatedByCleared() {
		_spec.ClearField(sysconfig.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := scuo.mutation.UpdatedBy(); ok {
		_spec.SetField(sysconfig.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysconfig.FieldUpdatedBy, field.TypeInt64, value)
	}
	if scuo.mutation.UpdatedByCleared() {
		_spec.ClearField(sysconfig.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := scuo.mutation.DeleteBy(); ok {
		_spec.SetField(sysconfig.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := scuo.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysconfig.FieldDeleteBy, field.TypeInt64, value)
	}
	if scuo.mutation.DeleteByCleared() {
		_spec.ClearField(sysconfig.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := scuo.mutation.Remark(); ok {
		_spec.SetField(sysconfig.FieldRemark, field.TypeString, value)
	}
	if scuo.mutation.RemarkCleared() {
		_spec.ClearField(sysconfig.FieldRemark, field.TypeString)
	}
	if scuo.mutation.StatusCleared() {
		_spec.ClearField(sysconfig.FieldStatus, field.TypeInt8)
	}
	if value, ok := scuo.mutation.DelFlag(); ok {
		_spec.SetField(sysconfig.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := scuo.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysconfig.FieldDelFlag, field.TypeInt8, value)
	}
	if scuo.mutation.DelFlagCleared() {
		_spec.ClearField(sysconfig.FieldDelFlag, field.TypeInt8)
	}
	if value, ok := scuo.mutation.ConfigName(); ok {
		_spec.SetField(sysconfig.FieldConfigName, field.TypeString, value)
	}
	if scuo.mutation.ConfigNameCleared() {
		_spec.ClearField(sysconfig.FieldConfigName, field.TypeString)
	}
	if value, ok := scuo.mutation.ConfigKey(); ok {
		_spec.SetField(sysconfig.FieldConfigKey, field.TypeString, value)
	}
	if scuo.mutation.ConfigKeyCleared() {
		_spec.ClearField(sysconfig.FieldConfigKey, field.TypeString)
	}
	if value, ok := scuo.mutation.ConfigValue(); ok {
		_spec.SetField(sysconfig.FieldConfigValue, field.TypeString, value)
	}
	if scuo.mutation.ConfigValueCleared() {
		_spec.ClearField(sysconfig.FieldConfigValue, field.TypeString)
	}
	if value, ok := scuo.mutation.ConfigType(); ok {
		_spec.SetField(sysconfig.FieldConfigType, field.TypeInt8, value)
	}
	if value, ok := scuo.mutation.AddedConfigType(); ok {
		_spec.AddField(sysconfig.FieldConfigType, field.TypeInt8, value)
	}
	if scuo.mutation.ConfigTypeCleared() {
		_spec.ClearField(sysconfig.FieldConfigType, field.TypeInt8)
	}
	_node = &SysConfig{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
