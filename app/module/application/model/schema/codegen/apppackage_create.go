// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/appinstance"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/apppackage"
)

// AppPackageCreate is the builder for creating a AppPackage entity.
type AppPackageCreate struct {
	config
	mutation *AppPackageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (apc *AppPackageCreate) SetCreatedAt(t time.Time) *AppPackageCreate {
	apc.mutation.SetCreatedAt(t)
	return apc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillableCreatedAt(t *time.Time) *AppPackageCreate {
	if t != nil {
		apc.SetCreatedAt(*t)
	}
	return apc
}

// SetUpdatedAt sets the "updated_at" field.
func (apc *AppPackageCreate) SetUpdatedAt(t time.Time) *AppPackageCreate {
	apc.mutation.SetUpdatedAt(t)
	return apc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillableUpdatedAt(t *time.Time) *AppPackageCreate {
	if t != nil {
		apc.SetUpdatedAt(*t)
	}
	return apc
}

// SetDeleteAt sets the "delete_at" field.
func (apc *AppPackageCreate) SetDeleteAt(t time.Time) *AppPackageCreate {
	apc.mutation.SetDeleteAt(t)
	return apc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillableDeleteAt(t *time.Time) *AppPackageCreate {
	if t != nil {
		apc.SetDeleteAt(*t)
	}
	return apc
}

// SetStatus sets the "status" field.
func (apc *AppPackageCreate) SetStatus(i int8) *AppPackageCreate {
	apc.mutation.SetStatus(i)
	return apc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillableStatus(i *int8) *AppPackageCreate {
	if i != nil {
		apc.SetStatus(*i)
	}
	return apc
}

// SetPkgName sets the "pkg_name" field.
func (apc *AppPackageCreate) SetPkgName(s string) *AppPackageCreate {
	apc.mutation.SetPkgName(s)
	return apc
}

// SetPkgCode sets the "pkg_code" field.
func (apc *AppPackageCreate) SetPkgCode(s string) *AppPackageCreate {
	apc.mutation.SetPkgCode(s)
	return apc
}

// SetPkgVersion sets the "pkg_version" field.
func (apc *AppPackageCreate) SetPkgVersion(s string) *AppPackageCreate {
	apc.mutation.SetPkgVersion(s)
	return apc
}

// SetNillablePkgVersion sets the "pkg_version" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillablePkgVersion(s *string) *AppPackageCreate {
	if s != nil {
		apc.SetPkgVersion(*s)
	}
	return apc
}

// SetPkgType sets the "pkg_type" field.
func (apc *AppPackageCreate) SetPkgType(i int8) *AppPackageCreate {
	apc.mutation.SetPkgType(i)
	return apc
}

// SetNillablePkgType sets the "pkg_type" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillablePkgType(i *int8) *AppPackageCreate {
	if i != nil {
		apc.SetPkgType(*i)
	}
	return apc
}

// SetPkgKind sets the "pkg_kind" field.
func (apc *AppPackageCreate) SetPkgKind(i int8) *AppPackageCreate {
	apc.mutation.SetPkgKind(i)
	return apc
}

// SetNillablePkgKind sets the "pkg_kind" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillablePkgKind(i *int8) *AppPackageCreate {
	if i != nil {
		apc.SetPkgKind(*i)
	}
	return apc
}

// SetUploader sets the "uploader" field.
func (apc *AppPackageCreate) SetUploader(i int64) *AppPackageCreate {
	apc.mutation.SetUploader(i)
	return apc
}

// SetNillableUploader sets the "uploader" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillableUploader(i *int64) *AppPackageCreate {
	if i != nil {
		apc.SetUploader(*i)
	}
	return apc
}

// SetDesc sets the "desc" field.
func (apc *AppPackageCreate) SetDesc(s string) *AppPackageCreate {
	apc.mutation.SetDesc(s)
	return apc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillableDesc(s *string) *AppPackageCreate {
	if s != nil {
		apc.SetDesc(*s)
	}
	return apc
}

// SetRemark sets the "remark" field.
func (apc *AppPackageCreate) SetRemark(s string) *AppPackageCreate {
	apc.mutation.SetRemark(s)
	return apc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillableRemark(s *string) *AppPackageCreate {
	if s != nil {
		apc.SetRemark(*s)
	}
	return apc
}

// SetID sets the "id" field.
func (apc *AppPackageCreate) SetID(i int64) *AppPackageCreate {
	apc.mutation.SetID(i)
	return apc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (apc *AppPackageCreate) SetNillableID(i *int64) *AppPackageCreate {
	if i != nil {
		apc.SetID(*i)
	}
	return apc
}

// AddAppInstanceIDs adds the "app_instance" edge to the AppInstance entity by IDs.
func (apc *AppPackageCreate) AddAppInstanceIDs(ids ...int64) *AppPackageCreate {
	apc.mutation.AddAppInstanceIDs(ids...)
	return apc
}

// AddAppInstance adds the "app_instance" edges to the AppInstance entity.
func (apc *AppPackageCreate) AddAppInstance(a ...*AppInstance) *AppPackageCreate {
	ids := make([]int64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apc.AddAppInstanceIDs(ids...)
}

// Mutation returns the AppPackageMutation object of the builder.
func (apc *AppPackageCreate) Mutation() *AppPackageMutation {
	return apc.mutation
}

// Save creates the AppPackage in the database.
func (apc *AppPackageCreate) Save(ctx context.Context) (*AppPackage, error) {
	apc.defaults()
	return withHooks(ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AppPackageCreate) SaveX(ctx context.Context) *AppPackage {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AppPackageCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AppPackageCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AppPackageCreate) defaults() {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		v := apppackage.DefaultCreatedAt()
		apc.mutation.SetCreatedAt(v)
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		v := apppackage.DefaultUpdatedAt()
		apc.mutation.SetUpdatedAt(v)
	}
	if _, ok := apc.mutation.DeleteAt(); !ok {
		v := apppackage.DefaultDeleteAt()
		apc.mutation.SetDeleteAt(v)
	}
	if _, ok := apc.mutation.Status(); !ok {
		v := apppackage.DefaultStatus
		apc.mutation.SetStatus(v)
	}
	if _, ok := apc.mutation.ID(); !ok {
		v := apppackage.DefaultID()
		apc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AppPackageCreate) check() error {
	if _, ok := apc.mutation.PkgName(); !ok {
		return &ValidationError{Name: "pkg_name", err: errors.New(`codegen: missing required field "AppPackage.pkg_name"`)}
	}
	if _, ok := apc.mutation.PkgCode(); !ok {
		return &ValidationError{Name: "pkg_code", err: errors.New(`codegen: missing required field "AppPackage.pkg_code"`)}
	}
	return nil
}

func (apc *AppPackageCreate) sqlSave(ctx context.Context) (*AppPackage, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *AppPackageCreate) createSpec() (*AppPackage, *sqlgraph.CreateSpec) {
	var (
		_node = &AppPackage{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(apppackage.Table, sqlgraph.NewFieldSpec(apppackage.FieldID, field.TypeInt64))
	)
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apc.mutation.CreatedAt(); ok {
		_spec.SetField(apppackage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := apc.mutation.UpdatedAt(); ok {
		_spec.SetField(apppackage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := apc.mutation.DeleteAt(); ok {
		_spec.SetField(apppackage.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := apc.mutation.Status(); ok {
		_spec.SetField(apppackage.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := apc.mutation.PkgName(); ok {
		_spec.SetField(apppackage.FieldPkgName, field.TypeString, value)
		_node.PkgName = value
	}
	if value, ok := apc.mutation.PkgCode(); ok {
		_spec.SetField(apppackage.FieldPkgCode, field.TypeString, value)
		_node.PkgCode = value
	}
	if value, ok := apc.mutation.PkgVersion(); ok {
		_spec.SetField(apppackage.FieldPkgVersion, field.TypeString, value)
		_node.PkgVersion = value
	}
	if value, ok := apc.mutation.PkgType(); ok {
		_spec.SetField(apppackage.FieldPkgType, field.TypeInt8, value)
		_node.PkgType = value
	}
	if value, ok := apc.mutation.PkgKind(); ok {
		_spec.SetField(apppackage.FieldPkgKind, field.TypeInt8, value)
		_node.PkgKind = value
	}
	if value, ok := apc.mutation.Uploader(); ok {
		_spec.SetField(apppackage.FieldUploader, field.TypeInt64, value)
		_node.Uploader = value
	}
	if value, ok := apc.mutation.Desc(); ok {
		_spec.SetField(apppackage.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := apc.mutation.Remark(); ok {
		_spec.SetField(apppackage.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := apc.mutation.AppInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   apppackage.AppInstanceTable,
			Columns: []string{apppackage.AppInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appinstance.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppPackageCreateBulk is the builder for creating many AppPackage entities in bulk.
type AppPackageCreateBulk struct {
	config
	err      error
	builders []*AppPackageCreate
}

// Save creates the AppPackage entities in the database.
func (apcb *AppPackageCreateBulk) Save(ctx context.Context) ([]*AppPackage, error) {
	if apcb.err != nil {
		return nil, apcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AppPackage, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppPackageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AppPackageCreateBulk) SaveX(ctx context.Context) []*AppPackage {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AppPackageCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AppPackageCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
