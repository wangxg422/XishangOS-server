// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdictdata"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysdicttype"
)

// SysDictTypeUpdate is the builder for updating SysDictType entities.
type SysDictTypeUpdate struct {
	config
	hooks    []Hook
	mutation *SysDictTypeMutation
}

// Where appends a list predicates to the SysDictTypeUpdate builder.
func (sdtu *SysDictTypeUpdate) Where(ps ...predicate.SysDictType) *SysDictTypeUpdate {
	sdtu.mutation.Where(ps...)
	return sdtu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdtu *SysDictTypeUpdate) SetUpdatedAt(t time.Time) *SysDictTypeUpdate {
	sdtu.mutation.SetUpdatedAt(t)
	return sdtu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sdtu *SysDictTypeUpdate) ClearUpdatedAt() *SysDictTypeUpdate {
	sdtu.mutation.ClearUpdatedAt()
	return sdtu
}

// SetDeleteAt sets the "delete_at" field.
func (sdtu *SysDictTypeUpdate) SetDeleteAt(t time.Time) *SysDictTypeUpdate {
	sdtu.mutation.SetDeleteAt(t)
	return sdtu
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (sdtu *SysDictTypeUpdate) ClearDeleteAt() *SysDictTypeUpdate {
	sdtu.mutation.ClearDeleteAt()
	return sdtu
}

// SetCreatedBy sets the "created_by" field.
func (sdtu *SysDictTypeUpdate) SetCreatedBy(i int64) *SysDictTypeUpdate {
	sdtu.mutation.ResetCreatedBy()
	sdtu.mutation.SetCreatedBy(i)
	return sdtu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sdtu *SysDictTypeUpdate) SetNillableCreatedBy(i *int64) *SysDictTypeUpdate {
	if i != nil {
		sdtu.SetCreatedBy(*i)
	}
	return sdtu
}

// AddCreatedBy adds i to the "created_by" field.
func (sdtu *SysDictTypeUpdate) AddCreatedBy(i int64) *SysDictTypeUpdate {
	sdtu.mutation.AddCreatedBy(i)
	return sdtu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sdtu *SysDictTypeUpdate) ClearCreatedBy() *SysDictTypeUpdate {
	sdtu.mutation.ClearCreatedBy()
	return sdtu
}

// SetUpdatedBy sets the "updated_by" field.
func (sdtu *SysDictTypeUpdate) SetUpdatedBy(i int64) *SysDictTypeUpdate {
	sdtu.mutation.ResetUpdatedBy()
	sdtu.mutation.SetUpdatedBy(i)
	return sdtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sdtu *SysDictTypeUpdate) SetNillableUpdatedBy(i *int64) *SysDictTypeUpdate {
	if i != nil {
		sdtu.SetUpdatedBy(*i)
	}
	return sdtu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (sdtu *SysDictTypeUpdate) AddUpdatedBy(i int64) *SysDictTypeUpdate {
	sdtu.mutation.AddUpdatedBy(i)
	return sdtu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sdtu *SysDictTypeUpdate) ClearUpdatedBy() *SysDictTypeUpdate {
	sdtu.mutation.ClearUpdatedBy()
	return sdtu
}

// SetDeleteBy sets the "delete_by" field.
func (sdtu *SysDictTypeUpdate) SetDeleteBy(i int64) *SysDictTypeUpdate {
	sdtu.mutation.ResetDeleteBy()
	sdtu.mutation.SetDeleteBy(i)
	return sdtu
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sdtu *SysDictTypeUpdate) SetNillableDeleteBy(i *int64) *SysDictTypeUpdate {
	if i != nil {
		sdtu.SetDeleteBy(*i)
	}
	return sdtu
}

// AddDeleteBy adds i to the "delete_by" field.
func (sdtu *SysDictTypeUpdate) AddDeleteBy(i int64) *SysDictTypeUpdate {
	sdtu.mutation.AddDeleteBy(i)
	return sdtu
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (sdtu *SysDictTypeUpdate) ClearDeleteBy() *SysDictTypeUpdate {
	sdtu.mutation.ClearDeleteBy()
	return sdtu
}

// SetRemark sets the "remark" field.
func (sdtu *SysDictTypeUpdate) SetRemark(s string) *SysDictTypeUpdate {
	sdtu.mutation.SetRemark(s)
	return sdtu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sdtu *SysDictTypeUpdate) SetNillableRemark(s *string) *SysDictTypeUpdate {
	if s != nil {
		sdtu.SetRemark(*s)
	}
	return sdtu
}

// ClearRemark clears the value of the "remark" field.
func (sdtu *SysDictTypeUpdate) ClearRemark() *SysDictTypeUpdate {
	sdtu.mutation.ClearRemark()
	return sdtu
}

// SetDelFlag sets the "del_flag" field.
func (sdtu *SysDictTypeUpdate) SetDelFlag(i int8) *SysDictTypeUpdate {
	sdtu.mutation.ResetDelFlag()
	sdtu.mutation.SetDelFlag(i)
	return sdtu
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (sdtu *SysDictTypeUpdate) SetNillableDelFlag(i *int8) *SysDictTypeUpdate {
	if i != nil {
		sdtu.SetDelFlag(*i)
	}
	return sdtu
}

// AddDelFlag adds i to the "del_flag" field.
func (sdtu *SysDictTypeUpdate) AddDelFlag(i int8) *SysDictTypeUpdate {
	sdtu.mutation.AddDelFlag(i)
	return sdtu
}

// ClearDelFlag clears the value of the "del_flag" field.
func (sdtu *SysDictTypeUpdate) ClearDelFlag() *SysDictTypeUpdate {
	sdtu.mutation.ClearDelFlag()
	return sdtu
}

// SetDictName sets the "dict_name" field.
func (sdtu *SysDictTypeUpdate) SetDictName(s string) *SysDictTypeUpdate {
	sdtu.mutation.SetDictName(s)
	return sdtu
}

// SetNillableDictName sets the "dict_name" field if the given value is not nil.
func (sdtu *SysDictTypeUpdate) SetNillableDictName(s *string) *SysDictTypeUpdate {
	if s != nil {
		sdtu.SetDictName(*s)
	}
	return sdtu
}

// ClearDictName clears the value of the "dict_name" field.
func (sdtu *SysDictTypeUpdate) ClearDictName() *SysDictTypeUpdate {
	sdtu.mutation.ClearDictName()
	return sdtu
}

// SetDictType sets the "dict_type" field.
func (sdtu *SysDictTypeUpdate) SetDictType(s string) *SysDictTypeUpdate {
	sdtu.mutation.SetDictType(s)
	return sdtu
}

// SetNillableDictType sets the "dict_type" field if the given value is not nil.
func (sdtu *SysDictTypeUpdate) SetNillableDictType(s *string) *SysDictTypeUpdate {
	if s != nil {
		sdtu.SetDictType(*s)
	}
	return sdtu
}

// ClearDictType clears the value of the "dict_type" field.
func (sdtu *SysDictTypeUpdate) ClearDictType() *SysDictTypeUpdate {
	sdtu.mutation.ClearDictType()
	return sdtu
}

// AddSysDictDataIDs adds the "sysDictDatas" edge to the SysDictData entity by IDs.
func (sdtu *SysDictTypeUpdate) AddSysDictDataIDs(ids ...int64) *SysDictTypeUpdate {
	sdtu.mutation.AddSysDictDataIDs(ids...)
	return sdtu
}

// AddSysDictDatas adds the "sysDictDatas" edges to the SysDictData entity.
func (sdtu *SysDictTypeUpdate) AddSysDictDatas(s ...*SysDictData) *SysDictTypeUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdtu.AddSysDictDataIDs(ids...)
}

// Mutation returns the SysDictTypeMutation object of the builder.
func (sdtu *SysDictTypeUpdate) Mutation() *SysDictTypeMutation {
	return sdtu.mutation
}

// ClearSysDictDatas clears all "sysDictDatas" edges to the SysDictData entity.
func (sdtu *SysDictTypeUpdate) ClearSysDictDatas() *SysDictTypeUpdate {
	sdtu.mutation.ClearSysDictDatas()
	return sdtu
}

// RemoveSysDictDataIDs removes the "sysDictDatas" edge to SysDictData entities by IDs.
func (sdtu *SysDictTypeUpdate) RemoveSysDictDataIDs(ids ...int64) *SysDictTypeUpdate {
	sdtu.mutation.RemoveSysDictDataIDs(ids...)
	return sdtu
}

// RemoveSysDictDatas removes "sysDictDatas" edges to SysDictData entities.
func (sdtu *SysDictTypeUpdate) RemoveSysDictDatas(s ...*SysDictData) *SysDictTypeUpdate {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdtu.RemoveSysDictDataIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdtu *SysDictTypeUpdate) Save(ctx context.Context) (int, error) {
	if err := sdtu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sdtu.sqlSave, sdtu.mutation, sdtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdtu *SysDictTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := sdtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdtu *SysDictTypeUpdate) Exec(ctx context.Context) error {
	_, err := sdtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtu *SysDictTypeUpdate) ExecX(ctx context.Context) {
	if err := sdtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdtu *SysDictTypeUpdate) defaults() error {
	if _, ok := sdtu.mutation.UpdatedAt(); !ok && !sdtu.mutation.UpdatedAtCleared() {
		if sysdicttype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdicttype.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysdicttype.UpdateDefaultUpdatedAt()
		sdtu.mutation.SetUpdatedAt(v)
	}
	if _, ok := sdtu.mutation.DeleteAt(); !ok && !sdtu.mutation.DeleteAtCleared() {
		if sysdicttype.UpdateDefaultDeleteAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdicttype.UpdateDefaultDeleteAt (forgotten import codegen/runtime?)")
		}
		v := sysdicttype.UpdateDefaultDeleteAt()
		sdtu.mutation.SetDeleteAt(v)
	}
	return nil
}

func (sdtu *SysDictTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysdicttype.Table, sysdicttype.Columns, sqlgraph.NewFieldSpec(sysdicttype.FieldID, field.TypeInt64))
	if ps := sdtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sdtu.mutation.CreatedAtCleared() {
		_spec.ClearField(sysdicttype.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sdtu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdicttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if sdtu.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysdicttype.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sdtu.mutation.DeleteAt(); ok {
		_spec.SetField(sysdicttype.FieldDeleteAt, field.TypeTime, value)
	}
	if sdtu.mutation.DeleteAtCleared() {
		_spec.ClearField(sysdicttype.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := sdtu.mutation.CreatedBy(); ok {
		_spec.SetField(sysdicttype.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := sdtu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysdicttype.FieldCreatedBy, field.TypeInt64, value)
	}
	if sdtu.mutation.CreatedByCleared() {
		_spec.ClearField(sysdicttype.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := sdtu.mutation.UpdatedBy(); ok {
		_spec.SetField(sysdicttype.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := sdtu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysdicttype.FieldUpdatedBy, field.TypeInt64, value)
	}
	if sdtu.mutation.UpdatedByCleared() {
		_spec.ClearField(sysdicttype.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := sdtu.mutation.DeleteBy(); ok {
		_spec.SetField(sysdicttype.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := sdtu.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysdicttype.FieldDeleteBy, field.TypeInt64, value)
	}
	if sdtu.mutation.DeleteByCleared() {
		_spec.ClearField(sysdicttype.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := sdtu.mutation.Remark(); ok {
		_spec.SetField(sysdicttype.FieldRemark, field.TypeString, value)
	}
	if sdtu.mutation.RemarkCleared() {
		_spec.ClearField(sysdicttype.FieldRemark, field.TypeString)
	}
	if sdtu.mutation.StatusCleared() {
		_spec.ClearField(sysdicttype.FieldStatus, field.TypeInt8)
	}
	if value, ok := sdtu.mutation.DelFlag(); ok {
		_spec.SetField(sysdicttype.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := sdtu.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysdicttype.FieldDelFlag, field.TypeInt8, value)
	}
	if sdtu.mutation.DelFlagCleared() {
		_spec.ClearField(sysdicttype.FieldDelFlag, field.TypeInt8)
	}
	if value, ok := sdtu.mutation.DictName(); ok {
		_spec.SetField(sysdicttype.FieldDictName, field.TypeString, value)
	}
	if sdtu.mutation.DictNameCleared() {
		_spec.ClearField(sysdicttype.FieldDictName, field.TypeString)
	}
	if value, ok := sdtu.mutation.DictType(); ok {
		_spec.SetField(sysdicttype.FieldDictType, field.TypeString, value)
	}
	if sdtu.mutation.DictTypeCleared() {
		_spec.ClearField(sysdicttype.FieldDictType, field.TypeString)
	}
	if sdtu.mutation.SysDictDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdicttype.SysDictDatasTable,
			Columns: []string{sysdicttype.SysDictDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdtu.mutation.RemovedSysDictDatasIDs(); len(nodes) > 0 && !sdtu.mutation.SysDictDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdicttype.SysDictDatasTable,
			Columns: []string{sysdicttype.SysDictDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdtu.mutation.SysDictDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdicttype.SysDictDatasTable,
			Columns: []string{sysdicttype.SysDictDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdicttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdtu.mutation.done = true
	return n, nil
}

// SysDictTypeUpdateOne is the builder for updating a single SysDictType entity.
type SysDictTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysDictTypeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sdtuo *SysDictTypeUpdateOne) SetUpdatedAt(t time.Time) *SysDictTypeUpdateOne {
	sdtuo.mutation.SetUpdatedAt(t)
	return sdtuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sdtuo *SysDictTypeUpdateOne) ClearUpdatedAt() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearUpdatedAt()
	return sdtuo
}

// SetDeleteAt sets the "delete_at" field.
func (sdtuo *SysDictTypeUpdateOne) SetDeleteAt(t time.Time) *SysDictTypeUpdateOne {
	sdtuo.mutation.SetDeleteAt(t)
	return sdtuo
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (sdtuo *SysDictTypeUpdateOne) ClearDeleteAt() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearDeleteAt()
	return sdtuo
}

// SetCreatedBy sets the "created_by" field.
func (sdtuo *SysDictTypeUpdateOne) SetCreatedBy(i int64) *SysDictTypeUpdateOne {
	sdtuo.mutation.ResetCreatedBy()
	sdtuo.mutation.SetCreatedBy(i)
	return sdtuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sdtuo *SysDictTypeUpdateOne) SetNillableCreatedBy(i *int64) *SysDictTypeUpdateOne {
	if i != nil {
		sdtuo.SetCreatedBy(*i)
	}
	return sdtuo
}

// AddCreatedBy adds i to the "created_by" field.
func (sdtuo *SysDictTypeUpdateOne) AddCreatedBy(i int64) *SysDictTypeUpdateOne {
	sdtuo.mutation.AddCreatedBy(i)
	return sdtuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (sdtuo *SysDictTypeUpdateOne) ClearCreatedBy() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearCreatedBy()
	return sdtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (sdtuo *SysDictTypeUpdateOne) SetUpdatedBy(i int64) *SysDictTypeUpdateOne {
	sdtuo.mutation.ResetUpdatedBy()
	sdtuo.mutation.SetUpdatedBy(i)
	return sdtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sdtuo *SysDictTypeUpdateOne) SetNillableUpdatedBy(i *int64) *SysDictTypeUpdateOne {
	if i != nil {
		sdtuo.SetUpdatedBy(*i)
	}
	return sdtuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (sdtuo *SysDictTypeUpdateOne) AddUpdatedBy(i int64) *SysDictTypeUpdateOne {
	sdtuo.mutation.AddUpdatedBy(i)
	return sdtuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sdtuo *SysDictTypeUpdateOne) ClearUpdatedBy() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearUpdatedBy()
	return sdtuo
}

// SetDeleteBy sets the "delete_by" field.
func (sdtuo *SysDictTypeUpdateOne) SetDeleteBy(i int64) *SysDictTypeUpdateOne {
	sdtuo.mutation.ResetDeleteBy()
	sdtuo.mutation.SetDeleteBy(i)
	return sdtuo
}

// SetNillableDeleteBy sets the "delete_by" field if the given value is not nil.
func (sdtuo *SysDictTypeUpdateOne) SetNillableDeleteBy(i *int64) *SysDictTypeUpdateOne {
	if i != nil {
		sdtuo.SetDeleteBy(*i)
	}
	return sdtuo
}

// AddDeleteBy adds i to the "delete_by" field.
func (sdtuo *SysDictTypeUpdateOne) AddDeleteBy(i int64) *SysDictTypeUpdateOne {
	sdtuo.mutation.AddDeleteBy(i)
	return sdtuo
}

// ClearDeleteBy clears the value of the "delete_by" field.
func (sdtuo *SysDictTypeUpdateOne) ClearDeleteBy() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearDeleteBy()
	return sdtuo
}

// SetRemark sets the "remark" field.
func (sdtuo *SysDictTypeUpdateOne) SetRemark(s string) *SysDictTypeUpdateOne {
	sdtuo.mutation.SetRemark(s)
	return sdtuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sdtuo *SysDictTypeUpdateOne) SetNillableRemark(s *string) *SysDictTypeUpdateOne {
	if s != nil {
		sdtuo.SetRemark(*s)
	}
	return sdtuo
}

// ClearRemark clears the value of the "remark" field.
func (sdtuo *SysDictTypeUpdateOne) ClearRemark() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearRemark()
	return sdtuo
}

// SetDelFlag sets the "del_flag" field.
func (sdtuo *SysDictTypeUpdateOne) SetDelFlag(i int8) *SysDictTypeUpdateOne {
	sdtuo.mutation.ResetDelFlag()
	sdtuo.mutation.SetDelFlag(i)
	return sdtuo
}

// SetNillableDelFlag sets the "del_flag" field if the given value is not nil.
func (sdtuo *SysDictTypeUpdateOne) SetNillableDelFlag(i *int8) *SysDictTypeUpdateOne {
	if i != nil {
		sdtuo.SetDelFlag(*i)
	}
	return sdtuo
}

// AddDelFlag adds i to the "del_flag" field.
func (sdtuo *SysDictTypeUpdateOne) AddDelFlag(i int8) *SysDictTypeUpdateOne {
	sdtuo.mutation.AddDelFlag(i)
	return sdtuo
}

// ClearDelFlag clears the value of the "del_flag" field.
func (sdtuo *SysDictTypeUpdateOne) ClearDelFlag() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearDelFlag()
	return sdtuo
}

// SetDictName sets the "dict_name" field.
func (sdtuo *SysDictTypeUpdateOne) SetDictName(s string) *SysDictTypeUpdateOne {
	sdtuo.mutation.SetDictName(s)
	return sdtuo
}

// SetNillableDictName sets the "dict_name" field if the given value is not nil.
func (sdtuo *SysDictTypeUpdateOne) SetNillableDictName(s *string) *SysDictTypeUpdateOne {
	if s != nil {
		sdtuo.SetDictName(*s)
	}
	return sdtuo
}

// ClearDictName clears the value of the "dict_name" field.
func (sdtuo *SysDictTypeUpdateOne) ClearDictName() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearDictName()
	return sdtuo
}

// SetDictType sets the "dict_type" field.
func (sdtuo *SysDictTypeUpdateOne) SetDictType(s string) *SysDictTypeUpdateOne {
	sdtuo.mutation.SetDictType(s)
	return sdtuo
}

// SetNillableDictType sets the "dict_type" field if the given value is not nil.
func (sdtuo *SysDictTypeUpdateOne) SetNillableDictType(s *string) *SysDictTypeUpdateOne {
	if s != nil {
		sdtuo.SetDictType(*s)
	}
	return sdtuo
}

// ClearDictType clears the value of the "dict_type" field.
func (sdtuo *SysDictTypeUpdateOne) ClearDictType() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearDictType()
	return sdtuo
}

// AddSysDictDataIDs adds the "sysDictDatas" edge to the SysDictData entity by IDs.
func (sdtuo *SysDictTypeUpdateOne) AddSysDictDataIDs(ids ...int64) *SysDictTypeUpdateOne {
	sdtuo.mutation.AddSysDictDataIDs(ids...)
	return sdtuo
}

// AddSysDictDatas adds the "sysDictDatas" edges to the SysDictData entity.
func (sdtuo *SysDictTypeUpdateOne) AddSysDictDatas(s ...*SysDictData) *SysDictTypeUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdtuo.AddSysDictDataIDs(ids...)
}

// Mutation returns the SysDictTypeMutation object of the builder.
func (sdtuo *SysDictTypeUpdateOne) Mutation() *SysDictTypeMutation {
	return sdtuo.mutation
}

// ClearSysDictDatas clears all "sysDictDatas" edges to the SysDictData entity.
func (sdtuo *SysDictTypeUpdateOne) ClearSysDictDatas() *SysDictTypeUpdateOne {
	sdtuo.mutation.ClearSysDictDatas()
	return sdtuo
}

// RemoveSysDictDataIDs removes the "sysDictDatas" edge to SysDictData entities by IDs.
func (sdtuo *SysDictTypeUpdateOne) RemoveSysDictDataIDs(ids ...int64) *SysDictTypeUpdateOne {
	sdtuo.mutation.RemoveSysDictDataIDs(ids...)
	return sdtuo
}

// RemoveSysDictDatas removes "sysDictDatas" edges to SysDictData entities.
func (sdtuo *SysDictTypeUpdateOne) RemoveSysDictDatas(s ...*SysDictData) *SysDictTypeUpdateOne {
	ids := make([]int64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdtuo.RemoveSysDictDataIDs(ids...)
}

// Where appends a list predicates to the SysDictTypeUpdate builder.
func (sdtuo *SysDictTypeUpdateOne) Where(ps ...predicate.SysDictType) *SysDictTypeUpdateOne {
	sdtuo.mutation.Where(ps...)
	return sdtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sdtuo *SysDictTypeUpdateOne) Select(field string, fields ...string) *SysDictTypeUpdateOne {
	sdtuo.fields = append([]string{field}, fields...)
	return sdtuo
}

// Save executes the query and returns the updated SysDictType entity.
func (sdtuo *SysDictTypeUpdateOne) Save(ctx context.Context) (*SysDictType, error) {
	if err := sdtuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sdtuo.sqlSave, sdtuo.mutation, sdtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdtuo *SysDictTypeUpdateOne) SaveX(ctx context.Context) *SysDictType {
	node, err := sdtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sdtuo *SysDictTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := sdtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtuo *SysDictTypeUpdateOne) ExecX(ctx context.Context) {
	if err := sdtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdtuo *SysDictTypeUpdateOne) defaults() error {
	if _, ok := sdtuo.mutation.UpdatedAt(); !ok && !sdtuo.mutation.UpdatedAtCleared() {
		if sysdicttype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdicttype.UpdateDefaultUpdatedAt (forgotten import codegen/runtime?)")
		}
		v := sysdicttype.UpdateDefaultUpdatedAt()
		sdtuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := sdtuo.mutation.DeleteAt(); !ok && !sdtuo.mutation.DeleteAtCleared() {
		if sysdicttype.UpdateDefaultDeleteAt == nil {
			return fmt.Errorf("codegen: uninitialized sysdicttype.UpdateDefaultDeleteAt (forgotten import codegen/runtime?)")
		}
		v := sysdicttype.UpdateDefaultDeleteAt()
		sdtuo.mutation.SetDeleteAt(v)
	}
	return nil
}

func (sdtuo *SysDictTypeUpdateOne) sqlSave(ctx context.Context) (_node *SysDictType, err error) {
	_spec := sqlgraph.NewUpdateSpec(sysdicttype.Table, sysdicttype.Columns, sqlgraph.NewFieldSpec(sysdicttype.FieldID, field.TypeInt64))
	id, ok := sdtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`codegen: missing "SysDictType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sdtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdicttype.FieldID)
		for _, f := range fields {
			if !sysdicttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("codegen: invalid field %q for query", f)}
			}
			if f != sysdicttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sdtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sdtuo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysdicttype.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sdtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdicttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if sdtuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysdicttype.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sdtuo.mutation.DeleteAt(); ok {
		_spec.SetField(sysdicttype.FieldDeleteAt, field.TypeTime, value)
	}
	if sdtuo.mutation.DeleteAtCleared() {
		_spec.ClearField(sysdicttype.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := sdtuo.mutation.CreatedBy(); ok {
		_spec.SetField(sysdicttype.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := sdtuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(sysdicttype.FieldCreatedBy, field.TypeInt64, value)
	}
	if sdtuo.mutation.CreatedByCleared() {
		_spec.ClearField(sysdicttype.FieldCreatedBy, field.TypeInt64)
	}
	if value, ok := sdtuo.mutation.UpdatedBy(); ok {
		_spec.SetField(sysdicttype.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := sdtuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(sysdicttype.FieldUpdatedBy, field.TypeInt64, value)
	}
	if sdtuo.mutation.UpdatedByCleared() {
		_spec.ClearField(sysdicttype.FieldUpdatedBy, field.TypeInt64)
	}
	if value, ok := sdtuo.mutation.DeleteBy(); ok {
		_spec.SetField(sysdicttype.FieldDeleteBy, field.TypeInt64, value)
	}
	if value, ok := sdtuo.mutation.AddedDeleteBy(); ok {
		_spec.AddField(sysdicttype.FieldDeleteBy, field.TypeInt64, value)
	}
	if sdtuo.mutation.DeleteByCleared() {
		_spec.ClearField(sysdicttype.FieldDeleteBy, field.TypeInt64)
	}
	if value, ok := sdtuo.mutation.Remark(); ok {
		_spec.SetField(sysdicttype.FieldRemark, field.TypeString, value)
	}
	if sdtuo.mutation.RemarkCleared() {
		_spec.ClearField(sysdicttype.FieldRemark, field.TypeString)
	}
	if sdtuo.mutation.StatusCleared() {
		_spec.ClearField(sysdicttype.FieldStatus, field.TypeInt8)
	}
	if value, ok := sdtuo.mutation.DelFlag(); ok {
		_spec.SetField(sysdicttype.FieldDelFlag, field.TypeInt8, value)
	}
	if value, ok := sdtuo.mutation.AddedDelFlag(); ok {
		_spec.AddField(sysdicttype.FieldDelFlag, field.TypeInt8, value)
	}
	if sdtuo.mutation.DelFlagCleared() {
		_spec.ClearField(sysdicttype.FieldDelFlag, field.TypeInt8)
	}
	if value, ok := sdtuo.mutation.DictName(); ok {
		_spec.SetField(sysdicttype.FieldDictName, field.TypeString, value)
	}
	if sdtuo.mutation.DictNameCleared() {
		_spec.ClearField(sysdicttype.FieldDictName, field.TypeString)
	}
	if value, ok := sdtuo.mutation.DictType(); ok {
		_spec.SetField(sysdicttype.FieldDictType, field.TypeString, value)
	}
	if sdtuo.mutation.DictTypeCleared() {
		_spec.ClearField(sysdicttype.FieldDictType, field.TypeString)
	}
	if sdtuo.mutation.SysDictDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdicttype.SysDictDatasTable,
			Columns: []string{sysdicttype.SysDictDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdtuo.mutation.RemovedSysDictDatasIDs(); len(nodes) > 0 && !sdtuo.mutation.SysDictDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdicttype.SysDictDatasTable,
			Columns: []string{sysdicttype.SysDictDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdtuo.mutation.SysDictDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdicttype.SysDictDatasTable,
			Columns: []string{sysdicttype.SysDictDatasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysdictdata.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SysDictType{config: sdtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sdtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdicttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sdtuo.mutation.done = true
	return _node, nil
}
