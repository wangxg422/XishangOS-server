// Code generated by ent, DO NOT EDIT.

package sysrole

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldDeleteAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldStatus, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldRemark, v))
}

// ListOrder applies equality check predicate on the "list_order" field. It's identical to ListOrderEQ.
func ListOrder(v int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldListOrder, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldName, v))
}

// DataScope applies equality check predicate on the "data_scope" field. It's identical to DataScopeEQ.
func DataScope(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldDataScope, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldNotNull(FieldUpdatedAt))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldNotNull(FieldDeleteAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldNotNull(FieldStatus))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldContainsFold(FieldRemark, v))
}

// ListOrderEQ applies the EQ predicate on the "list_order" field.
func ListOrderEQ(v int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldListOrder, v))
}

// ListOrderNEQ applies the NEQ predicate on the "list_order" field.
func ListOrderNEQ(v int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldListOrder, v))
}

// ListOrderIn applies the In predicate on the "list_order" field.
func ListOrderIn(vs ...int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldListOrder, vs...))
}

// ListOrderNotIn applies the NotIn predicate on the "list_order" field.
func ListOrderNotIn(vs ...int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldListOrder, vs...))
}

// ListOrderGT applies the GT predicate on the "list_order" field.
func ListOrderGT(v int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldListOrder, v))
}

// ListOrderGTE applies the GTE predicate on the "list_order" field.
func ListOrderGTE(v int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldListOrder, v))
}

// ListOrderLT applies the LT predicate on the "list_order" field.
func ListOrderLT(v int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldListOrder, v))
}

// ListOrderLTE applies the LTE predicate on the "list_order" field.
func ListOrderLTE(v int64) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldListOrder, v))
}

// ListOrderIsNil applies the IsNil predicate on the "list_order" field.
func ListOrderIsNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldIsNull(FieldListOrder))
}

// ListOrderNotNil applies the NotNil predicate on the "list_order" field.
func ListOrderNotNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldNotNull(FieldListOrder))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SysRole {
	return predicate.SysRole(sql.FieldContainsFold(FieldName, v))
}

// DataScopeEQ applies the EQ predicate on the "data_scope" field.
func DataScopeEQ(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldEQ(FieldDataScope, v))
}

// DataScopeNEQ applies the NEQ predicate on the "data_scope" field.
func DataScopeNEQ(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldNEQ(FieldDataScope, v))
}

// DataScopeIn applies the In predicate on the "data_scope" field.
func DataScopeIn(vs ...int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldIn(FieldDataScope, vs...))
}

// DataScopeNotIn applies the NotIn predicate on the "data_scope" field.
func DataScopeNotIn(vs ...int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldNotIn(FieldDataScope, vs...))
}

// DataScopeGT applies the GT predicate on the "data_scope" field.
func DataScopeGT(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldGT(FieldDataScope, v))
}

// DataScopeGTE applies the GTE predicate on the "data_scope" field.
func DataScopeGTE(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldGTE(FieldDataScope, v))
}

// DataScopeLT applies the LT predicate on the "data_scope" field.
func DataScopeLT(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldLT(FieldDataScope, v))
}

// DataScopeLTE applies the LTE predicate on the "data_scope" field.
func DataScopeLTE(v int8) predicate.SysRole {
	return predicate.SysRole(sql.FieldLTE(FieldDataScope, v))
}

// DataScopeIsNil applies the IsNil predicate on the "data_scope" field.
func DataScopeIsNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldIsNull(FieldDataScope))
}

// DataScopeNotNil applies the NotNil predicate on the "data_scope" field.
func DataScopeNotNil() predicate.SysRole {
	return predicate.SysRole(sql.FieldNotNull(FieldDataScope))
}

// HasDepts applies the HasEdge predicate on the "depts" edge.
func HasDepts() predicate.SysRole {
	return predicate.SysRole(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DeptsTable, DeptsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeptsWith applies the HasEdge predicate on the "depts" edge with a given conditions (other predicates).
func HasDeptsWith(preds ...predicate.SysDept) predicate.SysRole {
	return predicate.SysRole(func(s *sql.Selector) {
		step := newDeptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysRole) predicate.SysRole {
	return predicate.SysRole(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysRole) predicate.SysRole {
	return predicate.SysRole(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysRole) predicate.SysRole {
	return predicate.SysRole(sql.NotPredicates(p))
}
