// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/appinstance"
	"github.com/wangxg422/XishangOS-backend/app/module/application/model/schema/codegen/apppackage"
)

// AppInstanceCreate is the builder for creating a AppInstance entity.
type AppInstanceCreate struct {
	config
	mutation *AppInstanceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (aic *AppInstanceCreate) SetCreatedAt(t time.Time) *AppInstanceCreate {
	aic.mutation.SetCreatedAt(t)
	return aic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableCreatedAt(t *time.Time) *AppInstanceCreate {
	if t != nil {
		aic.SetCreatedAt(*t)
	}
	return aic
}

// SetUpdatedAt sets the "updated_at" field.
func (aic *AppInstanceCreate) SetUpdatedAt(t time.Time) *AppInstanceCreate {
	aic.mutation.SetUpdatedAt(t)
	return aic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableUpdatedAt(t *time.Time) *AppInstanceCreate {
	if t != nil {
		aic.SetUpdatedAt(*t)
	}
	return aic
}

// SetDeleteAt sets the "delete_at" field.
func (aic *AppInstanceCreate) SetDeleteAt(t time.Time) *AppInstanceCreate {
	aic.mutation.SetDeleteAt(t)
	return aic
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableDeleteAt(t *time.Time) *AppInstanceCreate {
	if t != nil {
		aic.SetDeleteAt(*t)
	}
	return aic
}

// SetStatus sets the "status" field.
func (aic *AppInstanceCreate) SetStatus(i int8) *AppInstanceCreate {
	aic.mutation.SetStatus(i)
	return aic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableStatus(i *int8) *AppInstanceCreate {
	if i != nil {
		aic.SetStatus(*i)
	}
	return aic
}

// SetInstanceName sets the "instance_name" field.
func (aic *AppInstanceCreate) SetInstanceName(s string) *AppInstanceCreate {
	aic.mutation.SetInstanceName(s)
	return aic
}

// SetInstanceCode sets the "instance_code" field.
func (aic *AppInstanceCreate) SetInstanceCode(s string) *AppInstanceCreate {
	aic.mutation.SetInstanceCode(s)
	return aic
}

// SetInstancePackage sets the "instance_package" field.
func (aic *AppInstanceCreate) SetInstancePackage(i int64) *AppInstanceCreate {
	aic.mutation.SetInstancePackage(i)
	return aic
}

// SetInstanceIcon sets the "instance_icon" field.
func (aic *AppInstanceCreate) SetInstanceIcon(s string) *AppInstanceCreate {
	aic.mutation.SetInstanceIcon(s)
	return aic
}

// SetNillableInstanceIcon sets the "instance_icon" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableInstanceIcon(s *string) *AppInstanceCreate {
	if s != nil {
		aic.SetInstanceIcon(*s)
	}
	return aic
}

// SetInstanceAddress sets the "instance_address" field.
func (aic *AppInstanceCreate) SetInstanceAddress(s string) *AppInstanceCreate {
	aic.mutation.SetInstanceAddress(s)
	return aic
}

// SetNillableInstanceAddress sets the "instance_address" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableInstanceAddress(s *string) *AppInstanceCreate {
	if s != nil {
		aic.SetInstanceAddress(*s)
	}
	return aic
}

// SetInstanceType sets the "instance_type" field.
func (aic *AppInstanceCreate) SetInstanceType(i int8) *AppInstanceCreate {
	aic.mutation.SetInstanceType(i)
	return aic
}

// SetNillableInstanceType sets the "instance_type" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableInstanceType(i *int8) *AppInstanceCreate {
	if i != nil {
		aic.SetInstanceType(*i)
	}
	return aic
}

// SetInstaller sets the "installer" field.
func (aic *AppInstanceCreate) SetInstaller(i int64) *AppInstanceCreate {
	aic.mutation.SetInstaller(i)
	return aic
}

// SetNillableInstaller sets the "installer" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableInstaller(i *int64) *AppInstanceCreate {
	if i != nil {
		aic.SetInstaller(*i)
	}
	return aic
}

// SetDesc sets the "desc" field.
func (aic *AppInstanceCreate) SetDesc(s string) *AppInstanceCreate {
	aic.mutation.SetDesc(s)
	return aic
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableDesc(s *string) *AppInstanceCreate {
	if s != nil {
		aic.SetDesc(*s)
	}
	return aic
}

// SetRemark sets the "remark" field.
func (aic *AppInstanceCreate) SetRemark(s string) *AppInstanceCreate {
	aic.mutation.SetRemark(s)
	return aic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableRemark(s *string) *AppInstanceCreate {
	if s != nil {
		aic.SetRemark(*s)
	}
	return aic
}

// SetID sets the "id" field.
func (aic *AppInstanceCreate) SetID(i int64) *AppInstanceCreate {
	aic.mutation.SetID(i)
	return aic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableID(i *int64) *AppInstanceCreate {
	if i != nil {
		aic.SetID(*i)
	}
	return aic
}

// SetInstallFromID sets the "installFrom" edge to the AppPackage entity by ID.
func (aic *AppInstanceCreate) SetInstallFromID(id int64) *AppInstanceCreate {
	aic.mutation.SetInstallFromID(id)
	return aic
}

// SetNillableInstallFromID sets the "installFrom" edge to the AppPackage entity by ID if the given value is not nil.
func (aic *AppInstanceCreate) SetNillableInstallFromID(id *int64) *AppInstanceCreate {
	if id != nil {
		aic = aic.SetInstallFromID(*id)
	}
	return aic
}

// SetInstallFrom sets the "installFrom" edge to the AppPackage entity.
func (aic *AppInstanceCreate) SetInstallFrom(a *AppPackage) *AppInstanceCreate {
	return aic.SetInstallFromID(a.ID)
}

// Mutation returns the AppInstanceMutation object of the builder.
func (aic *AppInstanceCreate) Mutation() *AppInstanceMutation {
	return aic.mutation
}

// Save creates the AppInstance in the database.
func (aic *AppInstanceCreate) Save(ctx context.Context) (*AppInstance, error) {
	aic.defaults()
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AppInstanceCreate) SaveX(ctx context.Context) *AppInstance {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AppInstanceCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AppInstanceCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aic *AppInstanceCreate) defaults() {
	if _, ok := aic.mutation.CreatedAt(); !ok {
		v := appinstance.DefaultCreatedAt()
		aic.mutation.SetCreatedAt(v)
	}
	if _, ok := aic.mutation.UpdatedAt(); !ok {
		v := appinstance.DefaultUpdatedAt()
		aic.mutation.SetUpdatedAt(v)
	}
	if _, ok := aic.mutation.DeleteAt(); !ok {
		v := appinstance.DefaultDeleteAt()
		aic.mutation.SetDeleteAt(v)
	}
	if _, ok := aic.mutation.Status(); !ok {
		v := appinstance.DefaultStatus
		aic.mutation.SetStatus(v)
	}
	if _, ok := aic.mutation.ID(); !ok {
		v := appinstance.DefaultID()
		aic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *AppInstanceCreate) check() error {
	if _, ok := aic.mutation.InstanceName(); !ok {
		return &ValidationError{Name: "instance_name", err: errors.New(`codegen: missing required field "AppInstance.instance_name"`)}
	}
	if _, ok := aic.mutation.InstanceCode(); !ok {
		return &ValidationError{Name: "instance_code", err: errors.New(`codegen: missing required field "AppInstance.instance_code"`)}
	}
	if _, ok := aic.mutation.InstancePackage(); !ok {
		return &ValidationError{Name: "instance_package", err: errors.New(`codegen: missing required field "AppInstance.instance_package"`)}
	}
	return nil
}

func (aic *AppInstanceCreate) sqlSave(ctx context.Context) (*AppInstance, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *AppInstanceCreate) createSpec() (*AppInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &AppInstance{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(appinstance.Table, sqlgraph.NewFieldSpec(appinstance.FieldID, field.TypeInt64))
	)
	if id, ok := aic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aic.mutation.CreatedAt(); ok {
		_spec.SetField(appinstance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aic.mutation.UpdatedAt(); ok {
		_spec.SetField(appinstance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aic.mutation.DeleteAt(); ok {
		_spec.SetField(appinstance.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := aic.mutation.Status(); ok {
		_spec.SetField(appinstance.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := aic.mutation.InstanceName(); ok {
		_spec.SetField(appinstance.FieldInstanceName, field.TypeString, value)
		_node.InstanceName = value
	}
	if value, ok := aic.mutation.InstanceCode(); ok {
		_spec.SetField(appinstance.FieldInstanceCode, field.TypeString, value)
		_node.InstanceCode = value
	}
	if value, ok := aic.mutation.InstancePackage(); ok {
		_spec.SetField(appinstance.FieldInstancePackage, field.TypeInt64, value)
		_node.InstancePackage = value
	}
	if value, ok := aic.mutation.InstanceIcon(); ok {
		_spec.SetField(appinstance.FieldInstanceIcon, field.TypeString, value)
		_node.InstanceIcon = value
	}
	if value, ok := aic.mutation.InstanceAddress(); ok {
		_spec.SetField(appinstance.FieldInstanceAddress, field.TypeString, value)
		_node.InstanceAddress = value
	}
	if value, ok := aic.mutation.InstanceType(); ok {
		_spec.SetField(appinstance.FieldInstanceType, field.TypeInt8, value)
		_node.InstanceType = value
	}
	if value, ok := aic.mutation.Installer(); ok {
		_spec.SetField(appinstance.FieldInstaller, field.TypeInt64, value)
		_node.Installer = value
	}
	if value, ok := aic.mutation.Desc(); ok {
		_spec.SetField(appinstance.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := aic.mutation.Remark(); ok {
		_spec.SetField(appinstance.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := aic.mutation.InstallFromIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appinstance.InstallFromTable,
			Columns: []string{appinstance.InstallFromColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apppackage.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.app_package_app_instance = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppInstanceCreateBulk is the builder for creating many AppInstance entities in bulk.
type AppInstanceCreateBulk struct {
	config
	err      error
	builders []*AppInstanceCreate
}

// Save creates the AppInstance entities in the database.
func (aicb *AppInstanceCreateBulk) Save(ctx context.Context) ([]*AppInstance, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AppInstance, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AppInstanceCreateBulk) SaveX(ctx context.Context) []*AppInstance {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AppInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AppInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}
