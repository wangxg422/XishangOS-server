// Code generated by ent, DO NOT EDIT.

package codegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wangxg422/XishangOS-backend/app/module/system/model/schema/codegen/sysoperlog"
)

// 系统操作日志表
type SysOperLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,string"`
	// 模块标题
	Title string `json:"title"`
	// 业务类型(0其他,1新增,2修改,3删除)
	BusinessType int `json:"businessType"`
	// 方法名称
	Method string `json:"method"`
	// 请求方式
	RequestMethod string `json:"requestMethod"`
	// 操作分类(0其他,1后台用户,2手机端用户)
	OperType int8 `json:"operType"`
	// 操作用户
	OperName string `json:"operName"`
	// 部门名称
	DeptName string `json:"deptName"`
	// 请求url
	OperURL string `json:"operUrl"`
	// 主机地址
	OperIP string `json:"ip"`
	// 操作地点
	OperLocation string `json:"location"`
	// 请求参数
	OperParam string `json:"operParam"`
	// 错误消息
	ErrorMsg string `json:"errorMsg"`
	// 操作时间
	OperTime     time.Time `json:"operTime"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysOperLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysoperlog.FieldID, sysoperlog.FieldBusinessType, sysoperlog.FieldOperType:
			values[i] = new(sql.NullInt64)
		case sysoperlog.FieldTitle, sysoperlog.FieldMethod, sysoperlog.FieldRequestMethod, sysoperlog.FieldOperName, sysoperlog.FieldDeptName, sysoperlog.FieldOperURL, sysoperlog.FieldOperIP, sysoperlog.FieldOperLocation, sysoperlog.FieldOperParam, sysoperlog.FieldErrorMsg:
			values[i] = new(sql.NullString)
		case sysoperlog.FieldOperTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysOperLog fields.
func (sol *SysOperLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysoperlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sol.ID = int64(value.Int64)
		case sysoperlog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sol.Title = value.String
			}
		case sysoperlog.FieldBusinessType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field business_type", values[i])
			} else if value.Valid {
				sol.BusinessType = int(value.Int64)
			}
		case sysoperlog.FieldMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				sol.Method = value.String
			}
		case sysoperlog.FieldRequestMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_method", values[i])
			} else if value.Valid {
				sol.RequestMethod = value.String
			}
		case sysoperlog.FieldOperType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oper_type", values[i])
			} else if value.Valid {
				sol.OperType = int8(value.Int64)
			}
		case sysoperlog.FieldOperName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oper_name", values[i])
			} else if value.Valid {
				sol.OperName = value.String
			}
		case sysoperlog.FieldDeptName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dept_name", values[i])
			} else if value.Valid {
				sol.DeptName = value.String
			}
		case sysoperlog.FieldOperURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oper_url", values[i])
			} else if value.Valid {
				sol.OperURL = value.String
			}
		case sysoperlog.FieldOperIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oper_ip", values[i])
			} else if value.Valid {
				sol.OperIP = value.String
			}
		case sysoperlog.FieldOperLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oper_location", values[i])
			} else if value.Valid {
				sol.OperLocation = value.String
			}
		case sysoperlog.FieldOperParam:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oper_param", values[i])
			} else if value.Valid {
				sol.OperParam = value.String
			}
		case sysoperlog.FieldErrorMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_msg", values[i])
			} else if value.Valid {
				sol.ErrorMsg = value.String
			}
		case sysoperlog.FieldOperTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field oper_time", values[i])
			} else if value.Valid {
				sol.OperTime = value.Time
			}
		default:
			sol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysOperLog.
// This includes values selected through modifiers, order, etc.
func (sol *SysOperLog) Value(name string) (ent.Value, error) {
	return sol.selectValues.Get(name)
}

// Update returns a builder for updating this SysOperLog.
// Note that you need to call SysOperLog.Unwrap() before calling this method if this SysOperLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sol *SysOperLog) Update() *SysOperLogUpdateOne {
	return NewSysOperLogClient(sol.config).UpdateOne(sol)
}

// Unwrap unwraps the SysOperLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sol *SysOperLog) Unwrap() *SysOperLog {
	_tx, ok := sol.config.driver.(*txDriver)
	if !ok {
		panic("codegen: SysOperLog is not a transactional entity")
	}
	sol.config.driver = _tx.drv
	return sol
}

// String implements the fmt.Stringer.
func (sol *SysOperLog) String() string {
	var builder strings.Builder
	builder.WriteString("SysOperLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sol.ID))
	builder.WriteString("title=")
	builder.WriteString(sol.Title)
	builder.WriteString(", ")
	builder.WriteString("business_type=")
	builder.WriteString(fmt.Sprintf("%v", sol.BusinessType))
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(sol.Method)
	builder.WriteString(", ")
	builder.WriteString("request_method=")
	builder.WriteString(sol.RequestMethod)
	builder.WriteString(", ")
	builder.WriteString("oper_type=")
	builder.WriteString(fmt.Sprintf("%v", sol.OperType))
	builder.WriteString(", ")
	builder.WriteString("oper_name=")
	builder.WriteString(sol.OperName)
	builder.WriteString(", ")
	builder.WriteString("dept_name=")
	builder.WriteString(sol.DeptName)
	builder.WriteString(", ")
	builder.WriteString("oper_url=")
	builder.WriteString(sol.OperURL)
	builder.WriteString(", ")
	builder.WriteString("oper_ip=")
	builder.WriteString(sol.OperIP)
	builder.WriteString(", ")
	builder.WriteString("oper_location=")
	builder.WriteString(sol.OperLocation)
	builder.WriteString(", ")
	builder.WriteString("oper_param=")
	builder.WriteString(sol.OperParam)
	builder.WriteString(", ")
	builder.WriteString("error_msg=")
	builder.WriteString(sol.ErrorMsg)
	builder.WriteString(", ")
	builder.WriteString("oper_time=")
	builder.WriteString(sol.OperTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SysOperLogs is a parsable slice of SysOperLog.
type SysOperLogs []*SysOperLog
